<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>BigData--Hadoop数据压缩</title>
      <link href="/2020/06/03/BigData-Hadoop%E6%95%B0%E6%8D%AE%E5%8E%8B%E7%BC%A9/"/>
      <url>/2020/06/03/BigData-Hadoop%E6%95%B0%E6%8D%AE%E5%8E%8B%E7%BC%A9/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="Hadoop数据压缩"><a href="#Hadoop数据压缩" class="headerlink" title="Hadoop数据压缩"></a>Hadoop数据压缩</h2><h3 id="1、MR支持的压缩编码"><a href="#1、MR支持的压缩编码" class="headerlink" title="1、MR支持的压缩编码"></a>1、MR支持的压缩编码</h3><table><thead><tr><th>压缩格式</th><th>hadoop自带？</th><th>算法</th><th>文件扩展名</th><th>是否可切分</th><th>换成压缩格式后，原来的程序是否需要修改</th></tr></thead><tbody><tr><td>DEFLATE</td><td>是，直接使用</td><td>DEFLATE</td><td>.deflate</td><td>否</td><td>和文本处理一样，不需要修改</td></tr><tr><td>Gzip</td><td>是，直接使用</td><td>DEFLATE</td><td>.gz</td><td>否</td><td>和文本处理一样，不需要修改</td></tr><tr><td>bzip2</td><td>是，直接使用</td><td>bzip2</td><td>.bz2</td><td>是</td><td>和文本处理一样，不需要修改</td></tr><tr><td>LZO</td><td>否，需要安装</td><td>LZO</td><td>.lzo</td><td>是</td><td>需要建索引，还需要指定输入格式</td></tr><tr><td>Snappy</td><td>否，需要安装</td><td>Snappy</td><td>.snappy</td><td>否</td><td>和文本处理一样，不需要修改</td></tr></tbody></table><p><strong>Hadoop引入的编码/解码器</strong></p><table><thead><tr><th>压缩格式</th><th>对应的编码/解码器</th></tr></thead><tbody><tr><td>DEFLATE</td><td>org.apache.hadoop.io.compress.DefaultCodec</td></tr><tr><td>gzip</td><td>org.apache.hadoop.io.compress.GzipCodec</td></tr><tr><td>bzip2</td><td>org.apache.hadoop.io.compress.BZip2Codec</td></tr><tr><td>LZO</td><td>com.hadoop.compression.lzo.LzopCodec</td></tr><tr><td>Snappy</td><td>org.apache.hadoop.io.compress.SnappyCodec</td></tr></tbody></table><p><strong>压缩性能的比较</strong></p><table><thead><tr><th>压缩算法</th><th>原始文件大小</th><th>压缩文件大小</th><th>压缩速度</th><th>解压速度</th></tr></thead><tbody><tr><td>gzip</td><td>8.3GB</td><td>1.8GB</td><td>17.5MB/s</td><td>58MB/s</td></tr><tr><td>bzip2</td><td>8.3GB</td><td>1.1GB</td><td>2.4MB/s</td><td>9.5MB/s</td></tr><tr><td>LZO</td><td>8.3GB</td><td>2.9GB</td><td>49.3MB/s</td><td>74.6MB/s</td></tr></tbody></table><h3 id="2、数据压缩位置"><a href="#2、数据压缩位置" class="headerlink" title="2、数据压缩位置"></a>2、数据压缩位置</h3><p><a href="https://file.buildworld.cn/img/20200603100027.png" data-fancybox="group" data-caption class="fancybox"><img alt data-src="https://file.buildworld.cn/img/20200603100027.png" class="lazyload" title></a></p><h3 id="3、压缩参数配置"><a href="#3、压缩参数配置" class="headerlink" title="3、压缩参数配置"></a>3、压缩参数配置</h3><table><thead><tr><th>参数</th><th>默认值</th><th>阶段</th><th>建议</th></tr></thead><tbody><tr><td>io.compression.codecs  （在core-site.xml中配置）</td><td>org.apache.hadoop.io.compress.DefaultCodec, org.apache.hadoop.io.compress.GzipCodec, org.apache.hadoop.io.compress.BZip2Codec</td><td>输入压缩</td><td>Hadoop使用文件扩展名判断是否支持某种编解码器</td></tr><tr><td>mapreduce.map.output.compress（在mapred-site.xml中配置）</td><td>false</td><td>mapper输出</td><td>这个参数设为true启用压缩</td></tr><tr><td>mapreduce.map.output.compress.codec（在mapred-site.xml中配置）</td><td>org.apache.hadoop.io.compress.DefaultCodec</td><td>mapper输出</td><td>企业多使用LZO或Snappy编解码器在此阶段压缩数据</td></tr><tr><td>mapreduce.output.fileoutputformat.compress（在mapred-site.xml中配置）</td><td>false</td><td>reducer输出</td><td>这个参数设为true启用压缩</td></tr><tr><td>mapreduce.output.fileoutputformat.compress.codec（在mapred-site.xml中配置）</td><td>org.apache.hadoop.io.compress. DefaultCodec</td><td>reducer输出</td><td>使用标准工具或者编解码器，如gzip和bzip2</td></tr><tr><td>mapreduce.output.fileoutputformat.compress.type（在mapred-site.xml中配置）</td><td>RECORD</td><td>reducer输出</td><td>SequenceFile输出使用的压缩类型：NONE和BLOCK</td></tr></tbody></table><h3 id="4、压缩实操"><a href="#4、压缩实操" class="headerlink" title="4、压缩实操"></a>4、压缩实操</h3><h4 id="1）数据流的压缩和解压缩"><a href="#1）数据流的压缩和解压缩" class="headerlink" title="1）数据流的压缩和解压缩"></a>1）数据流的压缩和解压缩</h4><p><strong><code>CompressionCodec</code>有两个方法可以用于轻松地压缩或解压缩数据。</strong></p><p>要想对正在被写入一个输出流的数据进行压缩，我们可以使用<code>createOutputStream(OutputStreamout)</code>方法创建一个<code>CompressionOutputStream</code>，将其以压缩格式写入底层的流。</p><p>相反，要想对从输入流读取而来的数据进行解压缩，则调用<code>createInputStream(InputStreamin)</code>函数，从而获得一个<code>CompressionInputStream</code>，从而从底层的流读取未压缩的数据。</p><h4 id="2）Map输出端采用压缩"><a href="#2）Map输出端采用压缩" class="headerlink" title="2）Map输出端采用压缩"></a>2）Map输出端采用压缩</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.mapreduce.compress;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.IntWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.compress.BZip2Codec;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.compress.CompressionCodec;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.compress.GzipCodec;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Job;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileInputFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WordCountDriver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">Configuration configuration = <span class="keyword">new</span> Configuration();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开启map端输出压缩</span></span><br><span class="line">configuration.setBoolean(<span class="string">"mapreduce.map.output.compress"</span>, <span class="keyword">true</span>);</span><br><span class="line"><span class="comment">// 设置map端输出压缩方式</span></span><br><span class="line">configuration.setClass(<span class="string">"mapreduce.map.output.compress.codec"</span>, BZip2Codec<span class="class">.<span class="keyword">class</span>, <span class="title">CompressionCodec</span>.<span class="title">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">Job job = Job.getInstance(configuration);</span><br><span class="line"></span><br><span class="line">job.setJarByClass(WordCountDriver<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">job.setMapperClass(WordCountMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">job.setReducerClass(WordCountReducer<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">job.setMapOutputKeyClass(Text<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">job.setMapOutputValueClass(IntWritable<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">job.setOutputKeyClass(Text<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">job.setOutputValueClass(IntWritable<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">FileInputFormat.setInputPaths(job, <span class="keyword">new</span> Path(args[<span class="number">0</span>]));</span><br><span class="line">FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> Path(args[<span class="number">1</span>]));</span><br><span class="line"></span><br><span class="line"><span class="keyword">boolean</span> result = job.waitForCompletion(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">System.exit(result ? <span class="number">1</span> : <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h4 id="3）Reduce输出端采用压缩"><a href="#3）Reduce输出端采用压缩" class="headerlink" title="3）Reduce输出端采用压缩"></a>3）Reduce输出端采用压缩</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.mapreduce.compress;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.IntWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.compress.BZip2Codec;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.compress.DefaultCodec;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.compress.GzipCodec;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.compress.Lz4Codec;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.compress.SnappyCodec;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Job;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileInputFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WordCountDriver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">Configuration configuration = <span class="keyword">new</span> Configuration();</span><br><span class="line"></span><br><span class="line">Job job = Job.getInstance(configuration);</span><br><span class="line"></span><br><span class="line">job.setJarByClass(WordCountDriver<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">job.setMapperClass(WordCountMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">job.setReducerClass(WordCountReducer<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">job.setMapOutputKeyClass(Text<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">job.setMapOutputValueClass(IntWritable<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">job.setOutputKeyClass(Text<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">job.setOutputValueClass(IntWritable<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">FileInputFormat.setInputPaths(job, <span class="keyword">new</span> Path(args[<span class="number">0</span>]));</span><br><span class="line">FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> Path(args[<span class="number">1</span>]));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置reduce端输出压缩开启</span></span><br><span class="line">FileOutputFormat.setCompressOutput(job, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置压缩的方式</span></span><br><span class="line">    FileOutputFormat.setOutputCompressorClass(job, BZip2Codec<span class="class">.<span class="keyword">class</span>)</span>; </span><br><span class="line"><span class="comment">//    FileOutputFormat.setOutputCompressorClass(job, GzipCodec.class); </span></span><br><span class="line"><span class="comment">//    FileOutputFormat.setOutputCompressorClass(job, DefaultCodec.class); </span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">boolean</span> result = job.waitForCompletion(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">System.exit(result?<span class="number">1</span>:<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> BigData </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hadoop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BigData--MapReduce进阶(二)之工作机制</title>
      <link href="/2020/06/01/BigData-MapReduce%E8%BF%9B%E9%98%B6-%E4%BA%8C-%E4%B9%8B%E5%B7%A5%E4%BD%9C%E6%9C%BA%E5%88%B6/"/>
      <url>/2020/06/01/BigData-MapReduce%E8%BF%9B%E9%98%B6-%E4%BA%8C-%E4%B9%8B%E5%B7%A5%E4%BD%9C%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="MapReduce进阶"><a href="#MapReduce进阶" class="headerlink" title="MapReduce进阶"></a>MapReduce进阶</h2><h3 id="一、MapReduce工作流程"><a href="#一、MapReduce工作流程" class="headerlink" title="一、MapReduce工作流程"></a>一、MapReduce工作流程</h3><h4 id="1、工作流程（1）"><a href="#1、工作流程（1）" class="headerlink" title="1、工作流程（1）"></a>1、工作流程（1）</h4><p><a href="https://file.buildworld.cn/img/20200527100132.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://file.buildworld.cn/img/20200527100132.png" class="lazyload"></a></p><h4 id="2、工作流程（2）"><a href="#2、工作流程（2）" class="headerlink" title="2、工作流程（2）"></a>2、工作流程（2）</h4><p><a href="https://file.buildworld.cn/img/20200527100328.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://file.buildworld.cn/img/20200527100328.png" class="lazyload"></a></p><p><strong>shuffle是从第七步开始的到第十六步结束的，下面是shuffle过程详解</strong></p><ul><li>1）MapTask收集我们的map()方法输出的kv对，放到内存缓冲区中</li><li>2）从内存缓冲区不断溢出本地磁盘文件，可能会溢出多个文件</li><li>3）多个溢出文件会被合并成大的溢出文件</li><li>4）在溢出过程及合并的过程中，都要调用Partitioner进行分区和针对key进行排序</li><li>5）ReduceTask根据自己的分区号，去各个MapTask机器上取相应的结果分区数据</li><li>6）ReduceTask会取到同一个分区的来自不同MapTask的结果文件，ReduceTask会将这些文件再进行合并（归并排序）</li><li>7）合并成大文件后，Shuffle的过程也就结束了，后面进入ReduceTask的逻辑运算过程（从文件中取出一个一个的键值对Group，调用用户自定义的reduce()方法）</li></ul><h3 id="二、Shuffle机制"><a href="#二、Shuffle机制" class="headerlink" title="二、Shuffle机制"></a>二、Shuffle机制</h3><p><strong>Map方法之后，Reduce方法之前的数据处理过程称之为Shuffle。</strong></p><h4 id="1、Shuffle机制流程图"><a href="#1、Shuffle机制流程图" class="headerlink" title="1、Shuffle机制流程图"></a>1、Shuffle机制流程图</h4><p><a href="https://file.buildworld.cn/img/20200527140654.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://file.buildworld.cn/img/20200527140654.png" class="lazyload"></a></p><h4 id="2、Partition分区"><a href="#2、Partition分区" class="headerlink" title="2、Partition分区"></a>2、Partition分区</h4><h5 id="1）自定义Partitioner步骤"><a href="#1）自定义Partitioner步骤" class="headerlink" title="1）自定义Partitioner步骤"></a>1）自定义Partitioner步骤</h5><ul><li>（1）自定义类继承<code>Partitioner</code>，重写<code>getPartition()</code>方法</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.buildworld.mapreduce.partition;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.buildworld.mapreduce.flow.FlowBean;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Partitioner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> MiChong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-05-27 14:40</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyPartitioner</span> <span class="keyword">extends</span> <span class="title">Partitioner</span>&lt;<span class="title">Text</span>, <span class="title">FlowBean</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPartition</span><span class="params">(Text text, FlowBean flowBean, <span class="keyword">int</span> numPartitions)</span> </span>&#123;</span><br><span class="line">        String phone = text.toString();</span><br><span class="line">        <span class="keyword">switch</span> (phone.substring(<span class="number">0</span>, <span class="number">3</span>)) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"136"</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"137"</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"138"</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"139"</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ul><li>（2）在Job驱动中，设置自定义<code>Partitioner</code> </li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">job.setPartitionerClass(MyPartitioner<span class="class">.<span class="keyword">class</span>)</span>;</span><br></pre></td></tr></table></figure></div><ul><li>（3）自定义<code>Partition</code>后，要根据自定义<code>Partitioner</code>的逻辑设置相应数量的<code>ReduceTask</code></li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">job.setNumReduceTasks(<span class="number">5</span>);</span><br></pre></td></tr></table></figure></div><h5 id="2）分区总结"><a href="#2）分区总结" class="headerlink" title="2）分区总结"></a>2）分区总结</h5><ul><li>（1）如果<code>ReduceTask</code>的数量&gt; <code>getPartition</code>的结果数，则会多产生几个空的输出文件part-r-000xx；</li><li>（2）如果1&lt;<code>ReduceTask</code>的数量&lt;<code>getPartition</code>的结果数，则有一部分分区数据无处安放，会Exception；</li><li>（3）如果<code>ReduceTask</code>的数量=1，则不管MapTask端输出多少个分区文件，最终结果都交给这一个<code>ReduceTask</code>，最终也就只会产生一个结果文件 part-r-00000；</li><li>（4）分区号必须从零开始，逐一累加。</li></ul><h4 id="3、WritableComparable排序"><a href="#3、WritableComparable排序" class="headerlink" title="3、WritableComparable排序"></a>3、WritableComparable排序</h4><p><strong>Bean对象实现<code>WritableComparable</code>几口，重写<code>compareTo（）</code>方法</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.buildworld.mapreduce.writablecomparable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.WritableComparable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.DataInput;</span><br><span class="line"><span class="keyword">import</span> java.io.DataOutput;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> MiChong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-05-24 18:15</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 必须实现Writable接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlowBean</span> <span class="keyword">implements</span> <span class="title">WritableComparable</span>&lt;<span class="title">FlowBean</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> upFlow;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> downFlow;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> sumFlow;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 此处实现自定义排序</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(FlowBean o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Long.compare(o.sumFlow, <span class="keyword">this</span>.sumFlow);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h4 id="4、Combiner合并"><a href="#4、Combiner合并" class="headerlink" title="4、Combiner合并"></a>4、Combiner合并</h4><ul><li><p>（1）Combiner是MR程序中Mapper和Reducer之外的一种组件。</p></li><li><p>（2）Combiner组件的父类就是Reducer。</p></li><li><p>（3）Combiner和Reducer的区别在于运行的位置</p><p><strong>Combiner是在每一个MapTask所在的节点运行;</strong></p><p><strong>Reducer是接收全局所有Mapper的输出结果；</strong></p></li><li><p>（4）Combiner的意义就是对每一个MapTask的输出进行局部汇总，以减小网络传输量。</p></li><li><p>（5）Combiner能够应用的前提是不能影响最终的业务逻辑，而且，Combiner的输出kv应该跟Reducer的输入kv类型要对应起来。</p></li></ul><h5 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h5><p><strong>自定义一个Combiner继承Reducer，重写Reduce方法</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WordcountCombiner</span> <span class="keyword">extends</span> <span class="title">Reducer</span>&lt;<span class="title">Text</span>, <span class="title">IntWritable</span>, <span class="title">Text</span>,<span class="title">IntWritable</span>&gt;</span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">(Text key, Iterable&lt;IntWritable&gt; values,Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">// 1 汇总操作</span></span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(IntWritable v :values)&#123;</span><br><span class="line">count += v.get();</span><br><span class="line">&#125;</span><br><span class="line">   <span class="comment">// 2 写出</span></span><br><span class="line">context.write(key, <span class="keyword">new</span> IntWritable(count));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><strong>在Job驱动类中设置</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">job.setCombinerClass(WordcountCombiner<span class="class">.<span class="keyword">class</span>)</span>;</span><br></pre></td></tr></table></figure></div><h4 id="5、GroupingComparator分组"><a href="#5、GroupingComparator分组" class="headerlink" title="5、GroupingComparator分组"></a>5、GroupingComparator分组</h4><ul><li>（1）自定义类继承<code>WritableComparator</code></li><li>（2）重写<code>compare()</code>方法</li><li>（3）创建一个构造将比较对象的类传给父类</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.buildworld.mapreduce.groupCompa;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.WritableComparable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.WritableComparator;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> MiChong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-05-30 13:44</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderComparator</span> <span class="keyword">extends</span> <span class="title">WritableComparator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">OrderComparator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(OrderBean<span class="class">.<span class="keyword">class</span>, <span class="title">true</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(WritableComparable a, WritableComparable b)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        OrderBean oa = (OrderBean) a;</span><br><span class="line">        OrderBean ob = (OrderBean) b;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> oa.getOrderId().compareTo(ob.getOrderId());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="三、MapTask工作机制"><a href="#三、MapTask工作机制" class="headerlink" title="三、MapTask工作机制"></a>三、MapTask工作机制</h3><p><a href="https://file.buildworld.cn/img/20200530195503.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://file.buildworld.cn/img/20200530195503.png" class="lazyload"></a></p><ul><li>（1）<strong>Read阶段</strong>：MapTask通过用户编写的RecordReader，从输入InputSplit中解析出一个个key/value。</li><li>（2）<strong>Map阶段</strong>：该节点主要是将解析出的key/value交给用户编写map()函数处理，并产生一系列新的key/value。</li><li>（3）<strong>Collect收集阶段</strong>：在用户编写map()函数中，当数据处理完成后，一般会调用OutputCollector.collect()输出结果。在该函数内部，它会将生成的key/value分区（调用Partitioner），并写入一个环形内存缓冲区中。</li><li>（4）<strong>Spill阶段</strong>：即“溢写”，当环形缓冲区满后，MapReduce会将数据写到本地磁盘上，生成一个临时文件。需要注意的是，将数据写入本地磁盘之前，先要对数据进行一次本地排序，并在必要时对数据进行合并、压缩等操作。</li></ul><p><strong>溢写阶段详情：</strong></p><p>​    步骤1：利用快速排序算法对缓存区内的数据进行排序，排序方式是，先按照分区编号Partition进行排序，然后按照key进行排序。这样，经过排序后，数据以分区为单位聚集在一起，且同一分区内所有数据按照key有序。</p><p>​    步骤2：按照分区编号由小到大依次将每个分区中的数据写入任务工作目录下的临时文件output/spillN.out（N表示当前溢写次数）中。如果用户设置了Combiner，则写入文件之前，对每个分区中的数据进行一次聚集操作。</p><p>​    步骤3：将分区数据的元信息写到内存索引数据结构SpillRecord中，其中每个分区的元信息包括在临时文件中的偏移量、压缩前数据大小和压缩后数据大小。如果当前内存索引大小超过1MB，则将内存索引写到文件output/spillN.out.index中。  </p><ul><li>（<strong>5）Combine阶段：</strong>当所有数据处理完成后，MapTask对所有临时文件进行一次合并，以确保最终只会生成一个数据文件。</li></ul><p>​    当所有数据处理完后，MapTask会将所有临时文件合并成一个大文件，并保存到文件output/file.out中，同时生成相应的索引文件output/file.out.index。</p><p>​    在进行文件合并过程中，MapTask以分区为单位进行合并。对于某个分区，它将采用多轮递归合并的方式。每轮合并io.sort.factor（默认10）个文件，并将产生的文件重新加入待合并列表中，对文件排序后，重复以上过程，直到最终得到一个大文件。</p><p>​    让每个MapTask最终只生成一个数据文件，可避免同时打开大量文件和同时读取大量小文件产生的随机读取带来的开销。</p><h3 id="四、ReduceTask工作机制"><a href="#四、ReduceTask工作机制" class="headerlink" title="四、ReduceTask工作机制"></a>四、ReduceTask工作机制</h3><h4 id="1、工作机制"><a href="#1、工作机制" class="headerlink" title="1、工作机制"></a>1、工作机制</h4><p><a href="https://file.buildworld.cn/img/20200530204504.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://file.buildworld.cn/img/20200530204504.png" class="lazyload"></a></p><ul><li>（1）<strong>Copy阶段</strong>：ReduceTask从各个MapTask上远程拷贝一片数据，并针对某一片数据，如果其大小超过一定阈值，则写到磁盘上，否则直接放到内存中。</li><li>（2）<strong>Merge阶段：</strong>在远程拷贝数据的同时，ReduceTask启动了两个后台线程对内存和磁盘上的文件进行合并，以防止内存使用过多或磁盘上文件过多。</li><li>（3）<strong>Sort阶段：</strong>按照MapReduce语义，用户编写reduce()函数输入数据是按key进行聚集的一组数据。为了将key相同的数据聚在一起，Hadoop采用了基于排序的策略。由于各个MapTask已经实现对自己的处理结果进行了局部排序，因此，ReduceTask只需对所有数据进行一次归并排序即可。</li><li>（4）<strong>Reduce阶段：</strong>reduce()函数将计算结果写到HDFS上。</li></ul><h4 id="2、设置ReduceTask并行度（个数）"><a href="#2、设置ReduceTask并行度（个数）" class="headerlink" title="2、设置ReduceTask并行度（个数）"></a>2、设置ReduceTask并行度（个数）</h4><blockquote><p>educeTask的并行度同样影响整个Job的执行并发度和执行效率，但与MapTask的并发数由切片数决定不同，ReduceTask数量的决定是可以直接手动设置：</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 默认值是1，手动设置为4</span></span><br><span class="line">job.setNumReduceTasks(<span class="number">4</span>);</span><br></pre></td></tr></table></figure></div><h3 id="五、OutputFormat数据输出"><a href="#五、OutputFormat数据输出" class="headerlink" title="五、OutputFormat数据输出"></a>五、OutputFormat数据输出</h3><h4 id="1、OutputFormat接口实现类"><a href="#1、OutputFormat接口实现类" class="headerlink" title="1、OutputFormat接口实现类"></a>1、OutputFormat接口实现类</h4><ul><li><p>文本输出<code>TextOutputFormat</code></p><p>默认的输出格式是TextOutputFormat，它把每条记录写为文本行。它的键和值可以是任意类型，因为TextOutputFormat调用toString()方法把它们转换为字符串。</p></li><li><p><code>SequenceFileOutputFormat</code></p><p>将SequenceFileOutputFormat输出作为后续 MapReduce任务的输入，这便是一种好的输出格式，因为它的格式紧凑，很容易被压缩。</p></li><li><p>自定义<code>OutputFormat</code></p></li></ul><p>根据用户需求，自定义实现输出。</p><h4 id="2、自定义OutputFormat使用场景及步骤"><a href="#2、自定义OutputFormat使用场景及步骤" class="headerlink" title="2、自定义OutputFormat使用场景及步骤"></a>2、自定义OutputFormat使用场景及步骤</h4><ul><li><p>（1）自定义一个类继承FileOutputFormat。</p></li><li><p>（2）改写RecordWriter，具体改写输出数据的方法write()。</p></li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.buildworld.mapreduce.outputformat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FSDataOutputStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FileSystem;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.IOUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.LongWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.RecordWriter;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.TaskAttemptContext;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> MiChong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-05-31 16:45</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRecordWriter</span> <span class="keyword">extends</span> <span class="title">RecordWriter</span>&lt;<span class="title">LongWritable</span>, <span class="title">Text</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> FSDataOutputStream atguigu;</span><br><span class="line">    <span class="keyword">private</span> FSDataOutputStream other;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(TaskAttemptContext job)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        String dir = job.getConfiguration().get(FileOutputFormat.OUTDIR);</span><br><span class="line">        FileSystem fileSystem = FileSystem.get(job.getConfiguration());</span><br><span class="line">        atguigu = fileSystem.create(<span class="keyword">new</span> Path(dir+<span class="string">"/my.log"</span>));</span><br><span class="line">        other = fileSystem.create(<span class="keyword">new</span> Path(dir+<span class="string">"/others.log"</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将KV写出，每对KV调用一次</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> InterruptedException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(LongWritable key, Text value)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">        String out = value.toString() + <span class="string">"\n"</span>;</span><br><span class="line">        <span class="keyword">if</span> (out.contains(<span class="string">"atguigu"</span>)) &#123;</span><br><span class="line">            atguigu.write(out.getBytes());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            other.write(out.getBytes());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(TaskAttemptContext context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">        IOUtils.closeStream(atguigu);</span><br><span class="line">        IOUtils.closeStream(other);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="六、Join应用"><a href="#六、Join应用" class="headerlink" title="六、Join应用"></a>六、Join应用</h3><h4 id="1、Reduce-Join"><a href="#1、Reduce-Join" class="headerlink" title="1、Reduce Join"></a>1、Reduce Join</h4><p><a href="https://file.buildworld.cn/img/20200601111718.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://file.buildworld.cn/img/20200601111718.png" class="lazyload"></a></p><h4 id="2、Map-Join"><a href="#2、Map-Join" class="headerlink" title="2、Map Join"></a>2、Map Join</h4><ul><li>1．使用场景</li></ul><p><strong>Map Join适用于一张表十分小、一张表很大的场景。</strong></p><ul><li>2．优点</li></ul><p>思考：在Reduce端处理过多的表，非常容易产生数据倾斜。怎么办？</p><blockquote><p>在Map端缓存多张表，提前处理业务逻辑，这样增加Map端业务，减少Reduce端数据的压力，尽可能的减少数据倾斜。</p></blockquote><ul><li>3．具体办法：采用DistributedCache</li></ul><p>​    <strong>（1）在Mapper的setup阶段，将文件读取到缓存集合中。</strong></p><p>​    <strong>（2）在驱动函数中加载缓存。</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.net.URI;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 缓存普通文件到Task运行节点。</span></span><br><span class="line">job.addCacheFile(<span class="keyword">new</span> URI(<span class="string">"file:///e:/cache/pd.txt"</span>));</span><br></pre></td></tr></table></figure></div><h3 id="七、MapReduce开发总结"><a href="#七、MapReduce开发总结" class="headerlink" title="七、MapReduce开发总结"></a>七、MapReduce开发总结</h3><h4 id="1．输入数据接口：InputFormat"><a href="#1．输入数据接口：InputFormat" class="headerlink" title="1．输入数据接口：InputFormat"></a>1．输入数据接口：InputFormat</h4><ul><li>（1）默认使用的实现类是：<code>TextInputFormat</code> </li><li>（2）<code>TextInputFormat</code>的功能逻辑是：一次读一行文本，然后将该行的起始偏移量作为key，行内容作为value返回。</li><li>（3）<code>KeyValueTextInputFormat</code>每一行均为一条记录，被分隔符分割为key，value。默认分隔符是tab（\t）。</li><li>（4）<code>NlineInputFormat</code>按照指定的行数N来划分切片。</li><li>（5）<code>CombineTextInputFormat</code>可以把多个小文件合并成一个切片处理，提高处理效率。</li><li>（6）用户还可以自定义<code>InputFormat</code>。</li></ul><h4 id="2．逻辑处理接口：Mapper"><a href="#2．逻辑处理接口：Mapper" class="headerlink" title="2．逻辑处理接口：Mapper"></a>2．逻辑处理接口：Mapper</h4><p><strong>用户根据业务需求实现其中三个方法：map()   setup()   cleanup ()</strong> </p><h4 id="3．Partitioner分区"><a href="#3．Partitioner分区" class="headerlink" title="3．Partitioner分区"></a>3．Partitioner分区</h4><ul><li>（1）有默认实现 HashPartitioner，逻辑是根据key的哈希值和numReduces来返回一个分区号；key.hashCode()&amp;Integer.MAXVALUE % numReduces</li><li>（2）如果业务上有特别的需求，可以自定义分区。</li></ul><h4 id="4．Comparable排序"><a href="#4．Comparable排序" class="headerlink" title="4．Comparable排序"></a>4．Comparable排序</h4><ul><li>（1）当我们用自定义的对象作为key来输出时，就必须要实现WritableComparable接口，重写其中的compareTo()方法。</li><li>（2）部分排序：对最终输出的每一个文件进行内部排序。</li><li>（3）全排序：对所有数据进行排序，通常只有一个Reduce。</li><li>（4）二次排序：排序的条件有两个。</li></ul><h4 id="5．Combiner合并"><a href="#5．Combiner合并" class="headerlink" title="5．Combiner合并"></a>5．Combiner合并</h4><p><code>Combiner</code>合并可以提高程序执行效率，减少IO传输。但是使用时必须不能影响原有的业务处理结果。</p><h4 id="6．Reduce端分组：GroupingComparator"><a href="#6．Reduce端分组：GroupingComparator" class="headerlink" title="6．Reduce端分组：GroupingComparator"></a>6．Reduce端分组：GroupingComparator</h4><p>在<code>Reduce</code>端对key进行分组。应用于：在接收的key为bean对象时，想让一个或几个字段相同（全部字段比较不相同）的key进入到同一个reduce方法时，可以采用分组排序。</p><h4 id="7．逻辑处理接口：Reducer"><a href="#7．逻辑处理接口：Reducer" class="headerlink" title="7．逻辑处理接口：Reducer"></a>7．逻辑处理接口：Reducer</h4><p>用户根据业务需求实现其中三个方法：<code>reduce()   setup()   cleanup ()</code> </p><h4 id="8．输出数据接口：OutputFormat"><a href="#8．输出数据接口：OutputFormat" class="headerlink" title="8．输出数据接口：OutputFormat"></a>8．输出数据接口：OutputFormat</h4><ul><li>（1）默认实现类是TextOutputFormat，功能逻辑是：将每一个KV对，向目标文本文件输出一行。</li><li>（2）将SequenceFileOutputFormat输出作为后续 MapReduce任务的输入，这便是一种好的输出格式，因为它的格式紧凑，很容易被压缩。</li><li>（3）用户还可以自定义OutputFormat。</li></ul>]]></content>
      
      
      <categories>
          
          <category> BigData </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hadoop </tag>
            
            <tag> MapReduce </tag>
            
            <tag> Shuffle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BigData--MapReduce进阶(一)之框架原理</title>
      <link href="/2020/05/26/BigData-MapReduce%E8%BF%9B%E9%98%B6-%E4%B8%80-%E4%B9%8B%E6%A1%86%E6%9E%B6%E5%8E%9F%E7%90%86/"/>
      <url>/2020/05/26/BigData-MapReduce%E8%BF%9B%E9%98%B6-%E4%B8%80-%E4%B9%8B%E6%A1%86%E6%9E%B6%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="MapReduce进阶-一-–框架原理"><a href="#MapReduce进阶-一-–框架原理" class="headerlink" title="MapReduce进阶(一)–框架原理"></a>MapReduce进阶(一)–框架原理</h2><h4 id="1、InputFormat"><a href="#1、InputFormat" class="headerlink" title="1、InputFormat"></a>1、InputFormat</h4><p><strong>MapReduce数据流</strong><a href="https://file.buildworld.cn/img/20200525102001.png" data-fancybox="group" data-caption="MapReduce数据流" class="fancybox"><img alt="MapReduce数据流" title="MapReduce数据流" data-src="https://file.buildworld.cn/img/20200525102001.png" class="lazyload"></a></p><h4 id="2、MapTask并行度决定机制"><a href="#2、MapTask并行度决定机制" class="headerlink" title="2、MapTask并行度决定机制"></a>2、MapTask并行度决定机制</h4><p><strong>数据块：</strong>Block是HDFS物理上把数据分成一块一块。</p><p><strong>数据切片：</strong>数据切片只是在逻辑上对输入进行分片，并不会在磁盘上将其切分成片进行存储。</p><ul><li>1）一个Job的Map阶段并行度由客户端在提交Job时的切片数决定</li><li>2）每一个Split切片分配一个MapTask并行实例处理</li><li>3）默认情况下，切片大小=BlockSize</li><li>4）切片时不考虑数据集整体，而是逐个针对每一个文件单独切片                              </li></ul><h4 id="3、Job提交流程源码解析"><a href="#3、Job提交流程源码解析" class="headerlink" title="3、Job提交流程源码解析"></a>3、Job提交流程源码解析</h4><p><a href="https://file.buildworld.cn/img/20200525144602.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://file.buildworld.cn/img/20200525144602.png" class="lazyload"></a></p><h4 id="4、FileInputFormat切片源码解析-input-getSplits-job"><a href="#4、FileInputFormat切片源码解析-input-getSplits-job" class="headerlink" title="4、FileInputFormat切片源码解析(input.getSplits(job))"></a>4、FileInputFormat切片源码解析(input.getSplits(job))</h4><h5 id="1）源码解析"><a href="#1）源码解析" class="headerlink" title="1）源码解析"></a>1）源码解析</h5><p><a href="https://file.buildworld.cn/img/20200525145028.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://file.buildworld.cn/img/20200525145028.png" class="lazyload"></a>   </p><h5 id="2）切片机制"><a href="#2）切片机制" class="headerlink" title="2）切片机制"></a>2）切片机制</h5><ul><li>（1）简单地按照文件的内容长度进行切片</li><li>（2）切片大小，默认等于Block大小</li><li>（3）切片时不考虑数据集整体，而是逐个针对每一个文件单独切片</li></ul><h5 id="3）切片大小的参数配置"><a href="#3）切片大小的参数配置" class="headerlink" title="3）切片大小的参数配置"></a>3）切片大小的参数配置</h5><p><a href="https://file.buildworld.cn/img/20200525152428.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://file.buildworld.cn/img/20200525152428.png" class="lazyload"></a></p><h4 id="5、小文件切片–CombineTextInputFormat切片机制"><a href="#5、小文件切片–CombineTextInputFormat切片机制" class="headerlink" title="5、小文件切片–CombineTextInputFormat切片机制"></a>5、小文件切片–CombineTextInputFormat切片机制</h4><p><strong>生成切片过程包括：虚拟存储过程和切片过程二部分。</strong></p><p><a href="https://file.buildworld.cn/img/20200525152901.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://file.buildworld.cn/img/20200525152901.png" class="lazyload"></a></p><h5 id="（1）虚拟存储过程："><a href="#（1）虚拟存储过程：" class="headerlink" title="（1）虚拟存储过程："></a>（1）虚拟存储过程：</h5><blockquote><p>将输入目录下所有文件大小，依次和设置的<code>setMaxInputSplitSize</code>值比较，如果不大于设置的最大值，逻辑上划分一个块。如果输入文件大于设置的最大值且大于两倍，那么以最大值切割一块；当剩余数据大小超过设置的最大值且不大于最大值2倍，此时将文件均分成2个虚拟存储块（防止出现太小切片）。</p></blockquote><h5 id="（2）切片过程："><a href="#（2）切片过程：" class="headerlink" title="（2）切片过程："></a>（2）切片过程：</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">（a）判断虚拟存储的文件大小是否大于setMaxInputSplitSize值，大于等于则单独形成一个切片。</span><br><span class="line"></span><br><span class="line">（b）如果不大于则跟下一个虚拟存储文件进行合并，共同形成一个切片。</span><br><span class="line"></span><br><span class="line">（c）测试举例：有4个小文件大小分别为1.7M、5.1M、3.4M以及6.8M这四个小文件，则虚拟存储之后形成6个文件块，大小分别为：1.7M，（2.55M、2.55M），3.4M以及（3.4M、3.4M）</span><br><span class="line">最终会形成3个切片，大小分别为：（1.7+2.55）M，（2.55+3.4）M，（3.4+3.4）M</span><br></pre></td></tr></table></figure></div><h4 id="6、自定义InputFormat"><a href="#6、自定义InputFormat" class="headerlink" title="6、自定义InputFormat"></a>6、自定义InputFormat</h4><p><a href="https://file.buildworld.cn/img/20200526173913.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://file.buildworld.cn/img/20200526173913.png" class="lazyload"></a></p><h5 id="1-WholeFileInputFormat-继承FileInputFormat"><a href="#1-WholeFileInputFormat-继承FileInputFormat" class="headerlink" title="1) WholeFileInputFormat 继承FileInputFormat"></a>1) WholeFileInputFormat 继承FileInputFormat</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.buildworld.mapreduce.inputformat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.BytesWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.InputSplit;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.JobContext;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.RecordReader;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.TaskAttemptContext;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileInputFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> MiChong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-05-25 16:12</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WholeFileInputFormat</span> <span class="keyword">extends</span> <span class="title">FileInputFormat</span>&lt;<span class="title">Text</span>, <span class="title">BytesWritable</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">isSplitable</span><span class="params">(JobContext context, Path filename)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RecordReader&lt;Text, BytesWritable&gt; <span class="title">createRecordReader</span><span class="params">(InputSplit split, TaskAttemptContext context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> WholeFileRecordReader();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h5 id="2）自定义RecordReader–WholeFileRecordReader"><a href="#2）自定义RecordReader–WholeFileRecordReader" class="headerlink" title="2）自定义RecordReader–WholeFileRecordReader"></a>2）自定义RecordReader–WholeFileRecordReader</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.buildworld.mapreduce.inputformat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FSDataInputStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FSDataOutputStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FileSystem;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.BytesWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.IOUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapred.FileSplit;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.InputSplit;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.RecordReader;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.TaskAttemptContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> MiChong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-05-25 16:15</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 自定义RecordReader，处理一个文件，把这个文件直接读成 一个KV值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WholeFileRecordReader</span> <span class="keyword">extends</span> <span class="title">RecordReader</span>&lt;<span class="title">Text</span>, <span class="title">BytesWritable</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> notRead = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">private</span> Text key = <span class="keyword">new</span> Text();</span><br><span class="line">    <span class="keyword">private</span> BytesWritable value = <span class="keyword">new</span> BytesWritable();</span><br><span class="line">    <span class="keyword">private</span> FSDataInputStream inputStream;</span><br><span class="line">    <span class="keyword">private</span> Path path;</span><br><span class="line">    <span class="keyword">private</span> FileSplit fs;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化方法，框架会在开始的时候调用一次</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> split</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> InterruptedException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(InputSplit split, TaskAttemptContext context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">//转换切片类型到文件切片</span></span><br><span class="line">        fs = (FileSplit) split;</span><br><span class="line">        <span class="comment">//通过切片获取路径</span></span><br><span class="line">        path = fs.getPath();</span><br><span class="line">        <span class="comment">//通过路径获取文件系统</span></span><br><span class="line">        FileSystem fileSystem = path.getFileSystem(context.getConfiguration());</span><br><span class="line">        <span class="comment">//开流</span></span><br><span class="line">        inputStream = fileSystem.open(path);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 读取下一组KV值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 如果读到了，返回true，读完了，返回False</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> InterruptedException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">nextKeyValue</span><span class="params">()</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (notRead) &#123;</span><br><span class="line">            <span class="comment">// 具体读文件的过程</span></span><br><span class="line">            <span class="comment">//读key</span></span><br><span class="line">            key.set(fs.getPath().toString());</span><br><span class="line"></span><br><span class="line">            <span class="comment">//读value</span></span><br><span class="line">            <span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[(<span class="keyword">int</span>) fs.getLength()];</span><br><span class="line">            inputStream.read(buf);</span><br><span class="line">            value.set(buf, <span class="number">0</span>, buf.length);</span><br><span class="line"></span><br><span class="line">            notRead = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取到当前的key</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 当前的key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> InterruptedException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Text <span class="title">getCurrentKey</span><span class="params">()</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取当前读到的Value</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 当前Value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> InterruptedException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BytesWritable <span class="title">getCurrentValue</span><span class="params">()</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当前数据读取的进度</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 当前进度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> InterruptedException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getProgress</span><span class="params">()</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> notRead ? <span class="number">0</span> : <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 关闭资源</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        IOUtils.closeStream(inputStream);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> BigData </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hadoop </tag>
            
            <tag> MapReduce </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BigData--MapReduce入门</title>
      <link href="/2020/05/24/BigData-MapReduce%E5%85%A5%E9%97%A8/"/>
      <url>/2020/05/24/BigData-MapReduce%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="MapReduce入门"><a href="#MapReduce入门" class="headerlink" title="MapReduce入门"></a>MapReduce入门</h2><h3 id="一、MapReduce概述"><a href="#一、MapReduce概述" class="headerlink" title="一、MapReduce概述"></a>一、MapReduce概述</h3><p><strong>MapReduce是一个分布式运算程序的编程框架，是用户开发“基于Hadoop的数据分析应用”的核心框架</strong>。</p><p><strong>MapReduce核心功能是将用户编写的业务逻辑代码和自带默认组件整合成一个完整的分布式运算程序，并发运行在一个Hadoop集群上。</strong></p><h4 id="1、优点"><a href="#1、优点" class="headerlink" title="1、优点"></a>1、优点</h4><ul><li>MapReduce易于编程</li><li>良好的扩展性</li><li>高容错性</li><li>适合海量数据的离线处理</li></ul><h4 id="2、缺点"><a href="#2、缺点" class="headerlink" title="2、缺点"></a>2、缺点</h4><ul><li>不擅长实时计算，无法像MySQL一样，在毫秒或者秒级内返回结果。</li><li>不擅长流式计算，MapReduce的输入数据是静态。</li><li>不擅长DAG(有向图)计算，如果每个MapReduce作业的输出结果都写入到磁盘，会造成大量的磁盘IO，导致性能非常的低下。</li></ul><h4 id="3、MapReduce核心编程思想"><a href="#3、MapReduce核心编程思想" class="headerlink" title="3、MapReduce核心编程思想"></a>3、MapReduce核心编程思想</h4><p><a href="https://file.buildworld.cn/img/20200524104738.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://file.buildworld.cn/img/20200524104738.png" class="lazyload"></a></p><ul><li>1）分布式的运算程序往往需要分成至少2个阶段。</li><li>2）第一个阶段的<code>MapTask</code>并发实例，完全并行运行，互不相干。</li><li>3）第二个阶段的<code>ReduceTask</code>并发实例互不相干，但是他们的数据依赖于上一个阶段的所有<code>MapTask</code>并发实例的输出。</li><li>4）MapReduce编程模型只能包含一个Map阶段和一个Reduce阶段，如果用户的业务逻辑非常复杂，那就只能多个MapReduce程序，串行运行。</li></ul><h4 id="4、MapReduce进程"><a href="#4、MapReduce进程" class="headerlink" title="4、MapReduce进程"></a>4、MapReduce进程</h4><p><strong>一个完整的MapReduce程序在分布式运行时有三类实例进程：</strong></p><ul><li><p>1）<code>MrAppMaster</code>：负责整个程序的过程调度及状态协调。</p></li><li><p>2）<code>MapTask</code>：负责Map阶段的整个数据处理流程</p></li><li><p>3）<code>ReduceTask</code>：负责Reduce阶段的整个数据处理流程。</p></li></ul><h4 id="5、MapReduce编程规范"><a href="#5、MapReduce编程规范" class="headerlink" title="5、MapReduce编程规范"></a>5、MapReduce编程规范</h4><h5 id="1-Mapper阶段"><a href="#1-Mapper阶段" class="headerlink" title="1) Mapper阶段"></a>1) Mapper阶段</h5><p>  <a href="https://file.buildworld.cn/img/20200524111628.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://file.buildworld.cn/img/20200524111628.png" class="lazyload"></a></p><h5 id="2）Reducer阶段"><a href="#2）Reducer阶段" class="headerlink" title="2）Reducer阶段"></a>2）Reducer阶段</h5><p><a href="https://file.buildworld.cn/img/20200524111651.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://file.buildworld.cn/img/20200524111651.png" class="lazyload"></a></p><h5 id="3）Driver阶段"><a href="#3）Driver阶段" class="headerlink" title="3）Driver阶段"></a>3）Driver阶段</h5><p><strong>用于提交封装了MapReduce程序相关运行参数的job对象。</strong></p><h3 id="二、WordCount案例实操"><a href="#二、WordCount案例实操" class="headerlink" title="二、WordCount案例实操"></a>二、WordCount案例实操</h3><p><strong>主要实现的是对文件中单词出现频率的分析，统计出单词出现的次数，这也是官方的示例教程</strong></p><h4 id="1、WcMapper-，负责数据的切分"><a href="#1、WcMapper-，负责数据的切分" class="headerlink" title="1、WcMapper ，负责数据的切分"></a>1、WcMapper ，负责数据的切分</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.buildworld.mapreduce.wordcount;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.IntWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.LongWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> MiChong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-05-24 11:32</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WcMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">LongWritable</span>, <span class="title">Text</span>, <span class="title">Text</span>, <span class="title">IntWritable</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Text word = <span class="keyword">new</span> Text();</span><br><span class="line">    <span class="keyword">private</span> IntWritable one = <span class="keyword">new</span> IntWritable(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(LongWritable key, Text value, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">// 拿到这行数据</span></span><br><span class="line">        String line = value.toString();</span><br><span class="line">        <span class="comment">//按照空格切分数据</span></span><br><span class="line">        String[] words = line.split(<span class="string">" "</span>);</span><br><span class="line">        <span class="comment">//遍历数组</span></span><br><span class="line">        <span class="keyword">for</span> (String word : words) &#123;</span><br><span class="line">            <span class="keyword">this</span>.word.set(word);</span><br><span class="line">            context.write(<span class="keyword">this</span>.word, <span class="keyword">this</span>.one);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h4 id="2、WcReducer-负责数据的统计"><a href="#2、WcReducer-负责数据的统计" class="headerlink" title="2、WcReducer,负责数据的统计"></a>2、WcReducer,负责数据的统计</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.buildworld.mapreduce.wordcount;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.IntWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Reducer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> MiChong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-05-24 11:33</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WcReducer</span> <span class="keyword">extends</span> <span class="title">Reducer</span>&lt;<span class="title">Text</span>, <span class="title">IntWritable</span>, <span class="title">Text</span>, <span class="title">IntWritable</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> IntWritable total = <span class="keyword">new</span> IntWritable();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">(Text key, Iterable&lt;IntWritable&gt; values, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//累加</span></span><br><span class="line">        <span class="keyword">for</span> (IntWritable value : values) &#123;</span><br><span class="line">            sum += value.get();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//包装结果并输出</span></span><br><span class="line">        total.set(sum);</span><br><span class="line">        context.write(key, <span class="keyword">this</span>.total);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h4 id="3、WcDriver，代码相对固定，负责提交我们的Job"><a href="#3、WcDriver，代码相对固定，负责提交我们的Job" class="headerlink" title="3、WcDriver，代码相对固定，负责提交我们的Job"></a>3、WcDriver，代码相对固定，负责提交我们的Job</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.buildworld.mapreduce.wordcount;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.IntWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Job;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileInputFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> MiChong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-05-24 11:33</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WcDriver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">// 1、获取一个job实例</span></span><br><span class="line">        Job job = Job.getInstance(<span class="keyword">new</span> Configuration());</span><br><span class="line">        <span class="comment">// 2、设置类路径</span></span><br><span class="line">        job.setJarByClass(WcDriver<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">// 3、设置Mapper和Reducer</span></span><br><span class="line">        job.setMapperClass(WcMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        job.setReducerClass(WcReducer<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4、设置Mapper和Reducer输出类型</span></span><br><span class="line">        job.setMapOutputKeyClass(Text<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        job.setMapOutputValueClass(IntWritable<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5 设置最终输出kv类型</span></span><br><span class="line">        job.setOutputKeyClass(Text<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        job.setOutputValueClass(IntWritable<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6、设置输入输出数据</span></span><br><span class="line">        FileInputFormat.setInputPaths(job, <span class="keyword">new</span> Path(args[<span class="number">0</span>]));</span><br><span class="line">        FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> Path(args[<span class="number">1</span>]));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 7、提交我们的job</span></span><br><span class="line">        <span class="keyword">boolean</span> b = job.waitForCompletion(<span class="keyword">true</span>);</span><br><span class="line">        System.exit(b ? <span class="number">0</span> : <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="三、Hadoop序列化"><a href="#三、Hadoop序列化" class="headerlink" title="三、Hadoop序列化"></a>三、Hadoop序列化</h3><p><strong>不可以使用Java自带的序列化，要使用自定义bean对象实现序列化接口（Writable）</strong></p><h4 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.buildworld.mapreduce.flow;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Writable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.DataInput;</span><br><span class="line"><span class="keyword">import</span> java.io.DataOutput;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> MiChong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-05-24 18:15</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 必须实现Writable接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlowBean</span> <span class="keyword">implements</span> <span class="title">Writable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> upFlow;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> downFlow;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> sumFlow;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 反序列化时，需要反射调用空参构造函数，所以必须有空参构造</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FlowBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">long</span> upFlow, <span class="keyword">long</span> downFlow)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.upFlow = upFlow;</span><br><span class="line">        <span class="keyword">this</span>.downFlow = downFlow;</span><br><span class="line">        <span class="keyword">this</span>.sumFlow = upFlow + downFlow;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getUpFlow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> upFlow;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUpFlow</span><span class="params">(<span class="keyword">long</span> upFlow)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.upFlow = upFlow;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getDownFlow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> downFlow;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDownFlow</span><span class="params">(<span class="keyword">long</span> downFlow)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.downFlow = downFlow;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getSumFlow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sumFlow;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSumFlow</span><span class="params">(<span class="keyword">long</span> sumFlow)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sumFlow = sumFlow;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 最后会按照下面的格式显示在输出文件中</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 要想把结果显示在文件中，需要重写toString()，可用”\t”分开，方便后续用。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"FlowBean&#123;"</span> +</span><br><span class="line">                <span class="string">"upFlow="</span> + upFlow +</span><br><span class="line">                <span class="string">", downFlow="</span> + downFlow +</span><br><span class="line">                <span class="string">", sumFlow="</span> + sumFlow +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 重写序列化方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *注意反序列化的顺序和序列化的顺序完全一致</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> out 框架给我们提供的数据出口</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(DataOutput out)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        out.writeLong(upFlow);</span><br><span class="line">        out.writeLong(downFlow);</span><br><span class="line">        out.writeLong(sumFlow);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 重写反序列化方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 注意反序列化的顺序和序列化的顺序完全一致</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> in 框架给我们提供的数据来源</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readFields</span><span class="params">(DataInput in)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        upFlow = in.readLong();</span><br><span class="line">        downFlow = in.readLong();</span><br><span class="line">        sumFlow = in.readLong();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> BigData </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hadoop </tag>
            
            <tag> MapReduce </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BigData--Hadoop2.x新特性之HA</title>
      <link href="/2020/05/23/BigData-Hadoop2-x%E6%96%B0%E7%89%B9%E6%80%A7%E4%B9%8BHA/"/>
      <url>/2020/05/23/BigData-Hadoop2-x%E6%96%B0%E7%89%B9%E6%80%A7%E4%B9%8BHA/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="HDFS-HA高可用"><a href="#HDFS-HA高可用" class="headerlink" title="HDFS HA高可用"></a>HDFS HA高可用</h2><blockquote><p>Hadoop2.X的两大新特性：YARN和HA</p></blockquote><h3 id="1、概述"><a href="#1、概述" class="headerlink" title="1、概述"></a>1、概述</h3><p><strong>HA即High Available,高可用的意思</strong></p><ul><li><p>NameNode主要在以下两个方面影响HDFS集群</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">NameNode机器发生意外，如宕机，集群将无法使用，直到管理员重启</span><br><span class="line"></span><br><span class="line">NameNode机器需要升级，包括软件、硬件升级，此时集群也将无法使用</span><br><span class="line"></span><br><span class="line">HDFS HA功能通过配置Active&#x2F;Standby两个NameNodes实现在集群中对NameNode的热备来解决上述问题。如果出现故障，如机器崩溃或机器需要升级维护，这时可通过此种方式将NameNode很快的切换到另外一台机器。</span><br></pre></td></tr></table></figure></div></li></ul><h3 id="2、HDFS-HA工作机制"><a href="#2、HDFS-HA工作机制" class="headerlink" title="2、HDFS-HA工作机制"></a>2、HDFS-HA工作机制</h3><blockquote><p>通过双NameNode消除单点故障</p></blockquote><h3 id="3、HDFS-HA工作要点"><a href="#3、HDFS-HA工作要点" class="headerlink" title="3、HDFS-HA工作要点"></a>3、HDFS-HA工作要点</h3><ul><li>元数据管理方式需要改变</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">内存中各自保存一份元数据；</span><br><span class="line"></span><br><span class="line">Edits日志只有Active状态的NameNode节点可以做写操作；</span><br><span class="line"></span><br><span class="line">两个NameNode都可以读取Edits；</span><br><span class="line"></span><br><span class="line">共享的Edits放在一个共享存储中管理（qjournal和NFS两个主流实现）；</span><br></pre></td></tr></table></figure></div><ul><li>需要一个状态管理功能模块</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">实现了一个zkfailover，常驻在每一个namenode所在的节点，每一个zkfailover负责监控自己所在NameNode节点，利用zk进行状态标识，当需要进行状态切换时，由zkfailover来负责切换，切换时需要防止brain split现象的发生。</span><br></pre></td></tr></table></figure></div><ul><li><p>必须保证两个NameNode之间能够ssh无密码登录</p></li><li><p>隔离（Fence），即同一时刻仅仅有一个NameNode对外提供服务</p></li></ul><h3 id="4、HDFS-HA自动故障转移工作机制"><a href="#4、HDFS-HA自动故障转移工作机制" class="headerlink" title="4、HDFS-HA自动故障转移工作机制"></a>4、HDFS-HA自动故障转移工作机制</h3><h4 id="1）HA的自动故障转移依赖于ZooKeeper的以下功能："><a href="#1）HA的自动故障转移依赖于ZooKeeper的以下功能：" class="headerlink" title="1）HA的自动故障转移依赖于ZooKeeper的以下功能："></a>1）HA的自动故障转移依赖于ZooKeeper的以下功能：</h4><p><strong>故障检测</strong>：每个NameNode在ZooKeeper中维护了一个持久会话，如果机器崩溃，ZooKeeper中的会话将终止，ZooKeeper通知另一个NameNode需要触发故障转移。</p><p><strong>现役NameNode选择：</strong>ooKeeper提供了一个简单的机制用于唯一的选择一个节点为active状态。如果目前现役NameNode崩溃，另一个节点可能从ZooKeeper获得特殊的排外锁以表明它应该成为现役NameNode。</p><h4 id="2）ZKFC"><a href="#2）ZKFC" class="headerlink" title="2）ZKFC"></a>2）ZKFC</h4><blockquote><p>ZKFC是自动故障转移中的另一个新组件，是ZooKeeper的客户端，也监视和管理NameNode的状态。每个运行NameNode的主机也运行了一个ZKFC进程，ZKFC负责：</p></blockquote><p><strong>健康监测：</strong>ZKFC使用一个健康检查命令定期地ping与之在相同主机的NameNode，只要该NameNode及时地回复健康状态，ZKFC认为该节点是健康的。如果该节点崩溃，冻结或进入不健康状态，健康监测器标识该节点为非健康的。</p><p><strong>ZooKeeper会话管理：</strong>当本地NameNode是健康的，ZKFC保持一个在ZooKeeper中打开的会话。如果本地NameNode处于active状态，ZKFC也保持一个特殊的znode锁，该锁使用了ZooKeeper对短暂节点的支持，如果会话终止，锁节点将自动删除。</p><p><strong>基于ZooKeeper的选择：</strong>如果本地NameNode是健康的，且ZKFC发现没有其它的节点当前持有znode锁，它将为自己获取该锁。如果成功，则它已经赢得了选择，并负责运行故障转移进程以使它的本地NameNode为Active。故障转移进程与前面描述的手动故障转移相似，首先如果必要保护之前的现役NameNode，然后本地NameNode转换为Active状态。</p><h4 id="HDFS-HA故障转移机制流程图"><a href="#HDFS-HA故障转移机制流程图" class="headerlink" title="HDFS-HA故障转移机制流程图"></a>HDFS-HA故障转移机制流程图</h4><p><a href="https://file.buildworld.cn/img/20200523093038.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://file.buildworld.cn/img/20200523093038.png" class="lazyload"></a></p><h3 id="5、YARN-HA工作机制"><a href="#5、YARN-HA工作机制" class="headerlink" title="5、YARN-HA工作机制"></a>5、YARN-HA工作机制</h3><p><a href="https://file.buildworld.cn/img/20200523162851.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://file.buildworld.cn/img/20200523162851.png" class="lazyload"></a></p><h3 id="6、HDFS-Federation架构设计"><a href="#6、HDFS-Federation架构设计" class="headerlink" title="6、HDFS Federation架构设计"></a>6、HDFS Federation架构设计</h3><h4 id="1、NameNode架构局限性"><a href="#1、NameNode架构局限性" class="headerlink" title="1、NameNode架构局限性"></a>1、NameNode架构局限性</h4><ul><li>（1）Namespace（命名空间）的限制</li><li>（2）隔离问题</li><li>（3）性能的瓶颈</li></ul><h4 id="2、HDFS-Federation架构设计"><a href="#2、HDFS-Federation架构设计" class="headerlink" title="2、HDFS Federation架构设计"></a>2、HDFS Federation架构设计</h4><p><a href="https://file.buildworld.cn/img/20200523221153.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://file.buildworld.cn/img/20200523221153.png" class="lazyload"></a></p><p><strong>不同应用可以使用不同NameNode进行数据管理,Hadoop生态系统中，不同的框架使用不同的NameNode进行管理NameSpace。（隔离性）</strong></p>]]></content>
      
      
      <categories>
          
          <category> BigData </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hadoop </tag>
            
            <tag> HDFS </tag>
            
            <tag> YARN </tag>
            
            <tag> HA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BigData--Hadoop技术</title>
      <link href="/2020/05/22/BigData%E4%B9%8BHadoop%E6%8A%80%E6%9C%AF/"/>
      <url>/2020/05/22/BigData%E4%B9%8BHadoop%E6%8A%80%E6%9C%AF/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="一、Hadoop组成"><a href="#一、Hadoop组成" class="headerlink" title="一、Hadoop组成"></a>一、Hadoop组成</h2><p><a href="http://myfile.buildworld.cn/Hadoop%E7%BB%84%E6%88%90.png" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="http://myfile.buildworld.cn/Hadoop%E7%BB%84%E6%88%90.png" class="lazyload"></a></p><h3 id="1、HDFS架构"><a href="#1、HDFS架构" class="headerlink" title="1、HDFS架构"></a>1、HDFS架构</h3><ul><li>1）NameNode（nn）：存储文件的元数据，如文件名，文件目录结构，文件属性（生成时间、副本数、文件权限），以及每个文件的块列表和块所在的DataNode等</li><li>2）DataNode(dn)：在本地文件系统存储文件块数据，以及块数据的校验和。</li><li>3）Secondary NameNode(2nn)：用来监控HDFS状态的辅助后台程序，每隔一段时间获取HDFS元数据的快照</li></ul><h3 id="2、YARN架构"><a href="#2、YARN架构" class="headerlink" title="2、YARN架构"></a>2、YARN架构</h3><p><a href="http://myfile.buildworld.cn/YARN%E6%9E%B6%E6%9E%84.png" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="http://myfile.buildworld.cn/YARN%E6%9E%B6%E6%9E%84.png" class="lazyload"></a></p><h3 id="3、MapReduce架构"><a href="#3、MapReduce架构" class="headerlink" title="3、MapReduce架构"></a>3、MapReduce架构</h3><ul><li>1）Map阶段并行处理输入数据</li><li>2）Reduce阶段对Map结果进行汇总<br><a href="http://myfile.buildworld.cn/mapreduce.png" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="http://myfile.buildworld.cn/mapreduce.png" class="lazyload"></a></li></ul><h3 id="4、大数据技术生态体系"><a href="#4、大数据技术生态体系" class="headerlink" title="4、大数据技术生态体系"></a>4、大数据技术生态体系</h3><p><a href="https://file.buildworld.cn/img/20200522094812.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://file.buildworld.cn/img/20200522094812.png" class="lazyload"></a></p><h2 id="二、HDFS-Hadoop-Distribution-File-System"><a href="#二、HDFS-Hadoop-Distribution-File-System" class="headerlink" title="二、HDFS(Hadoop Distribution File System)"></a>二、HDFS(Hadoop Distribution File System)</h2><h3 id="1、优点"><a href="#1、优点" class="headerlink" title="1、优点"></a>1、优点</h3><p><a href="http://myfile.buildworld.cn/hdfs%E4%BC%98%E7%82%B9.png" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="http://myfile.buildworld.cn/hdfs%E4%BC%98%E7%82%B9.png" class="lazyload"></a></p><h3 id="2、缺点"><a href="#2、缺点" class="headerlink" title="2、缺点"></a>2、缺点</h3><p><a href="http://myfile.buildworld.cn/hdfs%E7%BC%BA%E7%82%B9.png" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="http://myfile.buildworld.cn/hdfs%E7%BC%BA%E7%82%B9.png" class="lazyload"></a></p><h3 id="3、组织架构"><a href="#3、组织架构" class="headerlink" title="3、组织架构"></a>3、组织架构</h3><p><a href="http://myfile.buildworld.cn/hdfs%E7%BB%84%E7%BB%87%E6%9E%B6%E6%9E%84.png" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="http://myfile.buildworld.cn/hdfs%E7%BB%84%E7%BB%87%E6%9E%B6%E6%9E%84.png" class="lazyload"></a><br><a href="http://myfile.buildworld.cn/hdfs%E7%BB%84%E7%BB%87%E6%9E%B6%E6%9E%842.png" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="http://myfile.buildworld.cn/hdfs%E7%BB%84%E7%BB%87%E6%9E%B6%E6%9E%842.png" class="lazyload"></a></p><h2 id="三、HDFS的数据流"><a href="#三、HDFS的数据流" class="headerlink" title="三、HDFS的数据流"></a>三、HDFS的数据流</h2><h3 id="1、HDFS写数据流程"><a href="#1、HDFS写数据流程" class="headerlink" title="1、HDFS写数据流程"></a>1、HDFS写数据流程</h3><p><a href="https://file.buildworld.cn/img/20200521213715.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://file.buildworld.cn/img/20200521213715.png" class="lazyload"></a></p><ul><li>1）客户端通过Distributed FileSystem模块向NameNode请求上传文件，NameNode检查目标文件是否已存在，父目录是否存在。</li><li>2）NameNode返回是否可以上传。</li><li>3）客户端请求第一个 Block上传到哪几个DataNode服务器上。</li><li>4）NameNode返回3个DataNode节点，分别为dn1、dn2、dn3。</li><li>5）客户端通过FSDataOutputStream模块请求dn1上传数据，dn1收到请求会继续调用dn2，然后dn2调用dn3，将这个通信管道建立完成。</li><li>6）dn1、dn2、dn3逐级应答客户端。</li><li>7）客户端开始往dn1上传第一个Block（先从磁盘读取数据放到一个本地内存缓存），以Packet为单位，dn1收到一个Packet就会传给dn2，dn2传给dn3；dn1每传一个packet会放入一个应答队列等待应答。</li><li>8）当一个Block传输完成之后，客户端再次请求NameNode上传第二个Block的服务器。（重复执行3-7步）。</li></ul><h3 id="2、HDFS读数据流程"><a href="#2、HDFS读数据流程" class="headerlink" title="2、HDFS读数据流程"></a>2、HDFS读数据流程</h3><p><a href="https://file.buildworld.cn/img/20200521213817.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://file.buildworld.cn/img/20200521213817.png" class="lazyload"></a></p><h3 id="3、网络拓扑-节点距离计算"><a href="#3、网络拓扑-节点距离计算" class="headerlink" title="3、网络拓扑-节点距离计算"></a>3、网络拓扑-节点距离计算</h3><blockquote><p>节点距离：两个节点到达最近的共同祖先的距离总和。</p></blockquote><h3 id="常用命令实操"><a href="#常用命令实操" class="headerlink" title="常用命令实操"></a>常用命令实操</h3><p>（0）启动Hadoop集群（方便后续的测试）</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 hadoop-2.7.2]$ sbin&#x2F;start-dfs.sh</span><br><span class="line">[atguigu@hadoop103 hadoop-2.7.2]$ sbin&#x2F;start-yarn.sh</span><br></pre></td></tr></table></figure></div><p>（1）-help：输出这个命令参数</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 hadoop-2.7.2]$ hadoop fs -help rm</span><br></pre></td></tr></table></figure></div><p>（2）-ls: 显示目录信息</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 hadoop-2.7.2]$ hadoop fs -ls &#x2F;</span><br></pre></td></tr></table></figure></div><p>（3）-mkdir：在HDFS上创建目录</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 hadoop-2.7.2]$ hadoop fs -mkdir -p &#x2F;sanguo&#x2F;shuguo</span><br></pre></td></tr></table></figure></div><p>（4）-moveFromLocal：从本地剪切粘贴到HDFS</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 hadoop-2.7.2]$ touch kongming.txt</span><br><span class="line">[atguigu@hadoop102 hadoop-2.7.2]$ hadoop fs  -moveFromLocal  .&#x2F;kongming.txt  &#x2F;sanguo&#x2F;shuguo</span><br></pre></td></tr></table></figure></div><p>（5）-appendToFile：追加一个文件到已经存在的文件末尾</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 hadoop-2.7.2]$ touch liubei.txt</span><br><span class="line">[atguigu@hadoop102 hadoop-2.7.2]$ vi liubei.txt</span><br></pre></td></tr></table></figure></div><p>输入</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">san gu mao lu</span><br><span class="line">[atguigu@hadoop102 hadoop-2.7.2]$ hadoop fs -appendToFile liubei.txt &#x2F;sanguo&#x2F;shuguo&#x2F;kongming.txt</span><br></pre></td></tr></table></figure></div><p>（6）-cat：显示文件内容</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 hadoop-2.7.2]$ hadoop fs -cat &#x2F;sanguo&#x2F;shuguo&#x2F;kongming.txt</span><br></pre></td></tr></table></figure></div><p>（7）-chgrp 、-chmod、-chown：Linux文件系统中的用法一样，修改文件所属权限</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 hadoop-2.7.2]$ hadoop fs  -chmod  666  &#x2F;sanguo&#x2F;shuguo&#x2F;kongming.txt</span><br><span class="line">[atguigu@hadoop102 hadoop-2.7.2]$ hadoop fs  -chown  atguigu:atguigu   &#x2F;sanguo&#x2F;shuguo&#x2F;kongming.txt</span><br></pre></td></tr></table></figure></div><p>（8）-copyFromLocal：从本地文件系统中拷贝文件到HDFS路径去</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 hadoop-2.7.2]$ hadoop fs -copyFromLocal README.txt &#x2F;</span><br></pre></td></tr></table></figure></div><p>（9）-copyToLocal：从HDFS拷贝到本地</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 hadoop-2.7.2]$ hadoop fs -copyToLocal &#x2F;sanguo&#x2F;shuguo&#x2F;kongming.txt .&#x2F;</span><br></pre></td></tr></table></figure></div><p>（10）-cp ：从HDFS的一个路径拷贝到HDFS的另一个路径</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 hadoop-2.7.2]$ hadoop fs -cp &#x2F;sanguo&#x2F;shuguo&#x2F;kongming.txt &#x2F;zhuge.txt</span><br></pre></td></tr></table></figure></div><p>（11）-mv：在HDFS目录中移动文件</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 hadoop-2.7.2]$ hadoop fs -mv &#x2F;zhuge.txt &#x2F;sanguo&#x2F;shuguo&#x2F;</span><br></pre></td></tr></table></figure></div><p>（12）-get：等同于copyToLocal，就是从HDFS下载文件到本地</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 hadoop-2.7.2]$ hadoop fs -get &#x2F;sanguo&#x2F;shuguo&#x2F;kongming.txt .&#x2F;</span><br></pre></td></tr></table></figure></div><p>（13）-getmerge：合并下载多个文件，比如HDFS的<br>目录 /user/atguigu/test下有多个文件:log.1, log.2,log.3,…</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 hadoop-2.7.2]$ hadoop fs -getmerge &#x2F;user&#x2F;atguigu&#x2F;test&#x2F;* .&#x2F;zaiyiqi.txt</span><br></pre></td></tr></table></figure></div><p>（14）-put：等同于copyFromLocal</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 hadoop-2.7.2]$ hadoop fs -put .&#x2F;zaiyiqi.txt &#x2F;user&#x2F;atguigu&#x2F;test&#x2F;</span><br></pre></td></tr></table></figure></div><p>（15）-tail：显示一个文件的末尾</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 hadoop-2.7.2]$ hadoop fs -tail &#x2F;sanguo&#x2F;shuguo&#x2F;kongming.txt</span><br></pre></td></tr></table></figure></div><p>（16）-rm：删除文件或文件夹</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 hadoop-2.7.2]$ hadoop fs -rm &#x2F;user&#x2F;atguigu&#x2F;test&#x2F;jinlian2.txt</span><br></pre></td></tr></table></figure></div><p>（17）-rmdir：删除空目录</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 hadoop-2.7.2]$ hadoop fs -mkdir &#x2F;test</span><br><span class="line">[atguigu@hadoop102 hadoop-2.7.2]$ hadoop fs -rmdir &#x2F;test</span><br></pre></td></tr></table></figure></div><p>（18）-du统计文件夹的大小信息</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 hadoop-2.7.2]$ hadoop fs -du -s -h &#x2F;user&#x2F;atguigu&#x2F;test</span><br><span class="line">2.7 K  &#x2F;user&#x2F;atguigu&#x2F;test</span><br><span class="line"></span><br><span class="line">[atguigu@hadoop102 hadoop-2.7.2]$ hadoop fs -du  -h &#x2F;user&#x2F;atguigu&#x2F;test</span><br><span class="line">1.3 K  &#x2F;user&#x2F;atguigu&#x2F;test&#x2F;README.txt</span><br><span class="line">15     &#x2F;user&#x2F;atguigu&#x2F;test&#x2F;jinlian.txt</span><br><span class="line">1.4 K  &#x2F;user&#x2F;atguigu&#x2F;test&#x2F;zaiyiqi.txt</span><br></pre></td></tr></table></figure></div><p>（19）-setrep：设置HDFS中文件的副本数量</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 hadoop-2.7.2]$ hadoop fs -setrep 10 &#x2F;sanguo&#x2F;shuguo&#x2F;kongming.txt</span><br></pre></td></tr></table></figure></div><p><strong>假设有数据中心d1机架r1中的节点n1。该节点可以表示为/d1/r1/n1。</strong></p><p><a href="https://file.buildworld.cn/img/20200521221124.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://file.buildworld.cn/img/20200521221124.png" class="lazyload"></a></p><h2 id="四、NN-amp-amp-2NN"><a href="#四、NN-amp-amp-2NN" class="headerlink" title="四、NN &amp;&amp; 2NN"></a>四、NN &amp;&amp; 2NN</h2><h3 id="1、NameNode工作机制"><a href="#1、NameNode工作机制" class="headerlink" title="1、NameNode工作机制"></a>1、NameNode工作机制</h3><p><strong>NameNode中的元数据是存储在哪里的？</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">    首先，我们做个假设，如果存储在NameNode节点的磁盘中，因为经常需要进行随机访问，还有响应客户请求，必然是效率过低。</span><br><span class="line">因此，元数据需要存放在内存中。但如果只存在内存中，一旦断电，元数据丢失，整个集群就无法工作了。因此产生在磁盘中备份元数据的FsImage。</span><br><span class="line"></span><br><span class="line">    这样又会带来新的问题，当在内存中的元数据更新时，如果同时更新FsImage，就会导致效率过低，但如果不更新，就会发生一致性问题，</span><br><span class="line">一旦NameNode节点断电，就会产生数据丢失。因此，引入Edits文件(只进行追加操作，效率很高)。每当元数据有更新或者添加元数据时，</span><br><span class="line">修改内存中的元数据并追加到Edits中。这样，一旦NameNode节点断电，可以通过FsImage和Edits的合并，合成元数据。</span><br><span class="line"></span><br><span class="line">    但是，如果长时间添加数据到Edits中，会导致该文件数据过大，效率降低，而且一旦断电，恢复元数据需要的时间过长。</span><br><span class="line">因此，需要定期进行FsImage和Edits的合并，如果这个操作由NameNode节点完成，又会效率过低。因此，引入一个新的节点SecondaryNamenode，</span><br><span class="line">专门用于FsImage和Edits的合并。</span><br></pre></td></tr></table></figure></div><p><strong>Fsimage：NameNode内存中元数据序列化后形成的文件。</strong><br><strong>Edits：记录客户端更新元数据信息的每一步操作（可通过Edits运算出元数据）。</strong></p><h5 id="下图为NN和2NN工作机制"><a href="#下图为NN和2NN工作机制" class="headerlink" title="下图为NN和2NN工作机制"></a>下图为NN和2NN工作机制</h5><p><a href="http://myfile.buildworld.cn/NameNode%E5%B7%A5%E4%BD%9C%E6%9C%BA%E5%88%B6.png" data-fancybox="group" data-caption="NN和2NN工作机制" class="fancybox"><img alt="NN和2NN工作机制" title="NN和2NN工作机制" data-src="http://myfile.buildworld.cn/NameNode%E5%B7%A5%E4%BD%9C%E6%9C%BA%E5%88%B6.png" class="lazyload"></a>  </p><h2 id="五、DataNode"><a href="#五、DataNode" class="headerlink" title="五、DataNode"></a>五、DataNode</h2><h3 id="1、DataNode工作机制"><a href="#1、DataNode工作机制" class="headerlink" title="1、DataNode工作机制"></a>1、DataNode工作机制</h3><p><a href="https://file.buildworld.cn/img/20200522143452.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://file.buildworld.cn/img/20200522143452.png" class="lazyload"></a></p><h3 id="2、数据完整性"><a href="#2、数据完整性" class="headerlink" title="2、数据完整性"></a>2、数据完整性</h3><ul><li>1）当DataNode读取Block的时候，它会计算CheckSum。</li><li>2）如果计算后的CheckSum，与Block创建时值不一样，说明Block已经损坏。</li><li>3）Client读取其他DataNode上的Block。</li><li>4）DataNode在其文件创建后周期验证CheckSum。</li></ul><p><a href="https://file.buildworld.cn/img/20200522152850.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://file.buildworld.cn/img/20200522152850.png" class="lazyload"></a></p>]]></content>
      
      
      <categories>
          
          <category> BigData </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hadoop </tag>
            
            <tag> HDFS </tag>
            
            <tag> YARN </tag>
            
            <tag> MapReduce </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TensorFlow2.X学习笔记(8)--TensorFlow高阶API之构建模型、训练模型</title>
      <link href="/2020/05/19/TensorFlow2-X%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-8-TensorFlow%E9%AB%98%E9%98%B6API%E4%B9%8B%E6%9E%84%E5%BB%BA%E6%A8%A1%E5%9E%8B%E3%80%81%E8%AE%AD%E7%BB%83%E6%A8%A1%E5%9E%8B/"/>
      <url>/2020/05/19/TensorFlow2-X%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-8-TensorFlow%E9%AB%98%E9%98%B6API%E4%B9%8B%E6%9E%84%E5%BB%BA%E6%A8%A1%E5%9E%8B%E3%80%81%E8%AE%AD%E7%BB%83%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="一、构建模型"><a href="#一、构建模型" class="headerlink" title="一、构建模型"></a>一、构建模型</h2><ul><li><strong>使用Sequential按层顺序构建模型</strong></li><li><strong>使用函数式API构建任意结构模型</strong></li><li><strong>继承Model基类构建自定义模型。</strong></li></ul><h3 id="1、Sequential按层顺序创建模型（方便，网络显示清晰）"><a href="#1、Sequential按层顺序创建模型（方便，网络显示清晰）" class="headerlink" title="1、Sequential按层顺序创建模型（方便，网络显示清晰）"></a>1、Sequential按层顺序创建模型（方便，网络显示清晰）</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">tf.keras.backend.clear_session()</span><br><span class="line"></span><br><span class="line">model = models.Sequential()</span><br><span class="line"></span><br><span class="line">model.add(layers.Embedding(MAX_WORDS,<span class="number">7</span>,input_length=MAX_LEN))</span><br><span class="line">model.add(layers.Conv1D(filters = <span class="number">64</span>,kernel_size = <span class="number">5</span>,activation = <span class="string">"relu"</span>))</span><br><span class="line">model.add(layers.MaxPool1D(<span class="number">2</span>))</span><br><span class="line">model.add(layers.Conv1D(filters = <span class="number">32</span>,kernel_size = <span class="number">3</span>,activation = <span class="string">"relu"</span>))</span><br><span class="line">model.add(layers.MaxPool1D(<span class="number">2</span>))</span><br><span class="line">model.add(layers.Flatten())</span><br><span class="line">model.add(layers.Dense(<span class="number">1</span>,activation = <span class="string">"sigmoid"</span>))</span><br><span class="line"></span><br><span class="line">model.compile(optimizer=<span class="string">'Nadam'</span>,</span><br><span class="line">            loss=<span class="string">'binary_crossentropy'</span>,</span><br><span class="line">            metrics=[<span class="string">'accuracy'</span>,<span class="string">"AUC"</span>])</span><br><span class="line"></span><br><span class="line">model.summary()</span><br></pre></td></tr></table></figure></div><h3 id="2、函数式API创建任意结构模型"><a href="#2、函数式API创建任意结构模型" class="headerlink" title="2、函数式API创建任意结构模型"></a>2、函数式API创建任意结构模型</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">tf.keras.backend.clear_session()</span><br><span class="line"></span><br><span class="line">inputs = layers.Input(shape=[MAX_LEN])</span><br><span class="line">x  = layers.Embedding(MAX_WORDS,<span class="number">7</span>)(inputs)</span><br><span class="line"></span><br><span class="line">branch1 = layers.SeparableConv1D(<span class="number">64</span>,<span class="number">3</span>,activation=<span class="string">"relu"</span>)(x)</span><br><span class="line">branch1 = layers.MaxPool1D(<span class="number">3</span>)(branch1)</span><br><span class="line">branch1 = layers.SeparableConv1D(<span class="number">32</span>,<span class="number">3</span>,activation=<span class="string">"relu"</span>)(branch1)</span><br><span class="line">branch1 = layers.GlobalMaxPool1D()(branch1)</span><br><span class="line"></span><br><span class="line">branch2 = layers.SeparableConv1D(<span class="number">64</span>,<span class="number">5</span>,activation=<span class="string">"relu"</span>)(x)</span><br><span class="line">branch2 = layers.MaxPool1D(<span class="number">5</span>)(branch2)</span><br><span class="line">branch2 = layers.SeparableConv1D(<span class="number">32</span>,<span class="number">5</span>,activation=<span class="string">"relu"</span>)(branch2)</span><br><span class="line">branch2 = layers.GlobalMaxPool1D()(branch2)</span><br><span class="line"></span><br><span class="line">branch3 = layers.SeparableConv1D(<span class="number">64</span>,<span class="number">7</span>,activation=<span class="string">"relu"</span>)(x)</span><br><span class="line">branch3 = layers.MaxPool1D(<span class="number">7</span>)(branch3)</span><br><span class="line">branch3 = layers.SeparableConv1D(<span class="number">32</span>,<span class="number">7</span>,activation=<span class="string">"relu"</span>)(branch3)</span><br><span class="line">branch3 = layers.GlobalMaxPool1D()(branch3)</span><br><span class="line"></span><br><span class="line">concat = layers.Concatenate()([branch1,branch2,branch3])</span><br><span class="line">outputs = layers.Dense(<span class="number">1</span>,activation = <span class="string">"sigmoid"</span>)(concat)</span><br><span class="line"></span><br><span class="line">model = models.Model(inputs = inputs,outputs = outputs)</span><br><span class="line"></span><br><span class="line">model.compile(optimizer=<span class="string">'Nadam'</span>,</span><br><span class="line">            loss=<span class="string">'binary_crossentropy'</span>,</span><br><span class="line">            metrics=[<span class="string">'accuracy'</span>,<span class="string">"AUC"</span>])</span><br><span class="line"></span><br><span class="line">model.summary()</span><br></pre></td></tr></table></figure></div><h3 id="3、Model子类化创建自定义模型"><a href="#3、Model子类化创建自定义模型" class="headerlink" title="3、Model子类化创建自定义模型"></a>3、Model子类化创建自定义模型</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先自定义一个残差模块，为自定义Layer</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ResBlock</span><span class="params">(layers.Layer)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, kernel_size, **kwargs)</span>:</span></span><br><span class="line">        super(ResBlock, self).__init__(**kwargs)</span><br><span class="line">        self.kernel_size = kernel_size</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">build</span><span class="params">(self,input_shape)</span>:</span></span><br><span class="line">        self.conv1 = layers.Conv1D(filters=<span class="number">64</span>,kernel_size=self.kernel_size,</span><br><span class="line">                                   activation = <span class="string">"relu"</span>,padding=<span class="string">"same"</span>)</span><br><span class="line">        self.conv2 = layers.Conv1D(filters=<span class="number">32</span>,kernel_size=self.kernel_size,</span><br><span class="line">                                   activation = <span class="string">"relu"</span>,padding=<span class="string">"same"</span>)</span><br><span class="line">        self.conv3 = layers.Conv1D(filters=input_shape[<span class="number">-1</span>],</span><br><span class="line">                                   kernel_size=self.kernel_size,activation = <span class="string">"relu"</span>,padding=<span class="string">"same"</span>)</span><br><span class="line">        self.maxpool = layers.MaxPool1D(<span class="number">2</span>)</span><br><span class="line">        super(ResBlock,self).build(input_shape) <span class="comment"># 相当于设置self.built = True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">call</span><span class="params">(self, inputs)</span>:</span></span><br><span class="line">        x = self.conv1(inputs)</span><br><span class="line">        x = self.conv2(x)</span><br><span class="line">        x = self.conv3(x)</span><br><span class="line">        x = layers.Add()([inputs,x])</span><br><span class="line">        x = self.maxpool(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line">    <span class="comment">#如果要让自定义的Layer通过Functional API 组合成模型时可以序列化，需要自定义get_config方法。</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_config</span><span class="params">(self)</span>:</span>  </span><br><span class="line">        config = super(ResBlock, self).get_config()</span><br><span class="line">        config.update(&#123;<span class="string">'kernel_size'</span>: self.kernel_size&#125;)</span><br><span class="line">        <span class="keyword">return</span> config</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 测试ResBlock</span></span><br><span class="line">resblock = ResBlock(kernel_size = <span class="number">3</span>)</span><br><span class="line">resblock.build(input_shape = (<span class="literal">None</span>,<span class="number">200</span>,<span class="number">7</span>))</span><br><span class="line">resblock.compute_output_shape(input_shape=(<span class="literal">None</span>,<span class="number">200</span>,<span class="number">7</span>))</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 自定义模型，实际上也可以使用Sequential或者FunctionalAPI</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ImdbModel</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(ImdbModel, self).__init__()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">build</span><span class="params">(self,input_shape)</span>:</span></span><br><span class="line">        self.embedding = layers.Embedding(MAX_WORDS,<span class="number">7</span>)</span><br><span class="line">        self.block1 = ResBlock(<span class="number">7</span>)</span><br><span class="line">        self.block2 = ResBlock(<span class="number">5</span>)</span><br><span class="line">        self.dense = layers.Dense(<span class="number">1</span>,activation = <span class="string">"sigmoid"</span>)</span><br><span class="line">        super(ImdbModel,self).build(input_shape)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">call</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        x = self.embedding(x)</span><br><span class="line">        x = self.block1(x)</span><br><span class="line">        x = self.block2(x)</span><br><span class="line">        x = layers.Flatten()(x)</span><br><span class="line">        x = self.dense(x)</span><br><span class="line">        <span class="keyword">return</span>(x)</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 测试</span></span><br><span class="line">tf.keras.backend.clear_session()</span><br><span class="line"></span><br><span class="line">model = ImdbModel()</span><br><span class="line">model.build(input_shape =(<span class="literal">None</span>,<span class="number">200</span>))</span><br><span class="line">model.summary()</span><br><span class="line"></span><br><span class="line">model.compile(optimizer=<span class="string">'Nadam'</span>,</span><br><span class="line">            loss=<span class="string">'binary_crossentropy'</span>,</span><br><span class="line">            metrics=[<span class="string">'accuracy'</span>,<span class="string">"AUC"</span>])</span><br></pre></td></tr></table></figure></div><h2 id="二、训练模型"><a href="#二、训练模型" class="headerlink" title="二、训练模型"></a>二、训练模型</h2><p><strong>模型的训练主要有内置fit方法、内置tran_on_batch方法、自定义训练循环。</strong></p><h3 id="1、内置fit方法"><a href="#1、内置fit方法" class="headerlink" title="1、内置fit方法"></a>1、内置fit方法</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">tf.keras.backend.clear_session()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_model</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    model = models.Sequential()</span><br><span class="line">    model.add(layers.Embedding(MAX_WORDS,<span class="number">7</span>,input_length=MAX_LEN))</span><br><span class="line">    model.add(layers.Conv1D(filters = <span class="number">64</span>,kernel_size = <span class="number">5</span>,activation = <span class="string">"relu"</span>))</span><br><span class="line">    model.add(layers.MaxPool1D(<span class="number">2</span>))</span><br><span class="line">    model.add(layers.Conv1D(filters = <span class="number">32</span>,kernel_size = <span class="number">3</span>,activation = <span class="string">"relu"</span>))</span><br><span class="line">    model.add(layers.MaxPool1D(<span class="number">2</span>))</span><br><span class="line">    model.add(layers.Flatten())</span><br><span class="line">    model.add(layers.Dense(CAT_NUM,activation = <span class="string">"softmax"</span>))</span><br><span class="line">    <span class="keyword">return</span>(model)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compile_model</span><span class="params">(model)</span>:</span></span><br><span class="line">    model.compile(optimizer=optimizers.Nadam(),</span><br><span class="line">                loss=losses.SparseCategoricalCrossentropy(),</span><br><span class="line">                metrics=[metrics.SparseCategoricalAccuracy(),metrics.SparseTopKCategoricalAccuracy(<span class="number">5</span>)]) </span><br><span class="line">    <span class="keyword">return</span>(model)</span><br><span class="line"></span><br><span class="line">model = create_model()</span><br><span class="line">model.summary()</span><br><span class="line">model = compile_model(model)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建模型</span></span><br><span class="line">history = model.fit(ds_train,validation_data = ds_test,epochs = <span class="number">10</span>)</span><br></pre></td></tr></table></figure></div><h3 id="2、内置train-on-batch方法"><a href="#2、内置train-on-batch方法" class="headerlink" title="2、内置train_on_batch方法"></a>2、内置train_on_batch方法</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train_model</span><span class="params">(model,ds_train,ds_valid,epoches)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> tf.range(<span class="number">1</span>,epoches+<span class="number">1</span>):</span><br><span class="line">        model.reset_metrics()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 在后期降低学习率</span></span><br><span class="line">        <span class="keyword">if</span> epoch == <span class="number">5</span>:</span><br><span class="line">            model.optimizer.lr.assign(model.optimizer.lr/<span class="number">2.0</span>)</span><br><span class="line">            tf.print(<span class="string">"Lowering optimizer Learning Rate...\n\n"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> x, y <span class="keyword">in</span> ds_train:</span><br><span class="line">            train_result = model.train_on_batch(x, y)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> x, y <span class="keyword">in</span> ds_valid:</span><br><span class="line">            valid_result = model.test_on_batch(x, y,reset_metrics=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> epoch%<span class="number">1</span> ==<span class="number">0</span>:</span><br><span class="line">            printbar()</span><br><span class="line">            tf.print(<span class="string">"epoch = "</span>,epoch)</span><br><span class="line">            print(<span class="string">"train:"</span>,dict(zip(model.metrics_names,train_result)))</span><br><span class="line">            print(<span class="string">"valid:"</span>,dict(zip(model.metrics_names,valid_result)))</span><br><span class="line">            print(<span class="string">""</span>)</span><br><span class="line">            </span><br><span class="line"><span class="comment"># 构建模型</span></span><br><span class="line">train_model(model,ds_train,ds_test,<span class="number">10</span>)</span><br></pre></td></tr></table></figure></div><h3 id="3、自定义训练循环"><a href="#3、自定义训练循环" class="headerlink" title="3、自定义训练循环"></a>3、自定义训练循环</h3><p><strong>自定义训练循环无需编译模型，直接利用优化器根据损失函数反向传播迭代参数，拥有最高的灵活性。</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">optimizer = optimizers.Nadam()</span><br><span class="line">loss_func = losses.SparseCategoricalCrossentropy()</span><br><span class="line"></span><br><span class="line">train_loss = metrics.Mean(name=<span class="string">'train_loss'</span>)</span><br><span class="line">train_metric = metrics.SparseCategoricalAccuracy(name=<span class="string">'train_accuracy'</span>)</span><br><span class="line"></span><br><span class="line">valid_loss = metrics.Mean(name=<span class="string">'valid_loss'</span>)</span><br><span class="line">valid_metric = metrics.SparseCategoricalAccuracy(name=<span class="string">'valid_accuracy'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@tf.function</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train_step</span><span class="params">(model, features, labels)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> tf.GradientTape() <span class="keyword">as</span> tape:</span><br><span class="line">        predictions = model(features,training = <span class="literal">True</span>)</span><br><span class="line">        loss = loss_func(labels, predictions)</span><br><span class="line">    gradients = tape.gradient(loss, model.trainable_variables)</span><br><span class="line">    optimizer.apply_gradients(zip(gradients, model.trainable_variables))</span><br><span class="line"></span><br><span class="line">    train_loss.update_state(loss)</span><br><span class="line">    train_metric.update_state(labels, predictions)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@tf.function</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">valid_step</span><span class="params">(model, features, labels)</span>:</span></span><br><span class="line">    predictions = model(features)</span><br><span class="line">    batch_loss = loss_func(labels, predictions)</span><br><span class="line">    valid_loss.update_state(batch_loss)</span><br><span class="line">    valid_metric.update_state(labels, predictions)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train_model</span><span class="params">(model,ds_train,ds_valid,epochs)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> tf.range(<span class="number">1</span>,epochs+<span class="number">1</span>):</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> features, labels <span class="keyword">in</span> ds_train:</span><br><span class="line">            train_step(model,features,labels)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> features, labels <span class="keyword">in</span> ds_valid:</span><br><span class="line">            valid_step(model,features,labels)</span><br><span class="line"></span><br><span class="line">        logs = <span class="string">'Epoch=&#123;&#125;,Loss:&#123;&#125;,Accuracy:&#123;&#125;,Valid Loss:&#123;&#125;,Valid Accuracy:&#123;&#125;'</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> epoch%<span class="number">1</span> ==<span class="number">0</span>:</span><br><span class="line">            printbar()</span><br><span class="line">            tf.print(tf.strings.format(logs,</span><br><span class="line">            (epoch,train_loss.result(),train_metric.result(),valid_loss.result(),valid_metric.result())))</span><br><span class="line">            tf.print(<span class="string">""</span>)</span><br><span class="line"></span><br><span class="line">        train_loss.reset_states()</span><br><span class="line">        valid_loss.reset_states()</span><br><span class="line">        train_metric.reset_states()</span><br><span class="line">        valid_metric.reset_states()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建模型</span></span><br><span class="line">train_model(model,ds_train,ds_test,<span class="number">10</span>)</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> TensorFlow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TensorFlow2.X学习笔记(7)--TensorFlow中阶API之losses、metrics、optimizers、callbacks</title>
      <link href="/2020/05/18/TensorFlow2-X%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-7-TensorFlow%E4%B8%AD%E9%98%B6API%E4%B9%8Blosses%E3%80%81metrics%E3%80%81optimizers%E3%80%81callbacks/"/>
      <url>/2020/05/18/TensorFlow2-X%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-7-TensorFlow%E4%B8%AD%E9%98%B6API%E4%B9%8Blosses%E3%80%81metrics%E3%80%81optimizers%E3%80%81callbacks/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="一、损失函数"><a href="#一、损失函数" class="headerlink" title="一、损失函数"></a>一、损失函数</h2><p><strong>一般来说，监督学习的目标函数由损失函数和正则化项组成。（Objective = Loss + Regularization）</strong></p><ul><li>对于二分类模型，通常使用的是二元交叉熵损失函数 binary_crossentropy。</li><li>对于多分类模型，如果label是类别序号编码的，则使用类别交叉熵损失函数 categorical_crossentropy。如果label进行了one-hot编码，则需要使用稀疏类别交叉熵损失函数 sparse_categorical_crossentropy。</li></ul><h3 id="1、内置损失函数"><a href="#1、内置损失函数" class="headerlink" title="1、内置损失函数"></a>1、内置损失函数</h3><p><strong>内置的损失函数一般有类的实现和函数的实现两种形式。</strong></p><blockquote><p>常用的内置损失函数</p></blockquote><ul><li><code>mean_squared_error</code>（平方差误差损失，用于回归，简写为 mse, 类实现形式为 MeanSquaredError 和 MSE）</li><li><code>mean_absolute_error</code> (绝对值误差损失，用于回归，简写为 mae, 类实现形式为 MeanAbsoluteError 和 MAE)</li><li><code>mean_absolute_percentage_error</code> (平均百分比误差损失，用于回归，简写为 mape, 类实现形式为 MeanAbsolutePercentageError 和 MAPE)</li><li><code>Huber</code>(Huber损失，只有类实现形式，用于回归，介于mse和mae之间，对异常值比较鲁棒，相对mse有一定的优势)</li><li><code>binary_crossentropy</code>(二元交叉熵，用于二分类，类实现形式为 BinaryCrossentropy)</li><li><code>categorical_crossentropy</code>(类别交叉熵，用于多分类，要求label为onehot编码，类实现形式为 CategoricalCrossentropy)</li><li><code>sparse_categorical_crossentropy</code>(稀疏类别交叉熵，用于多分类，要求label为序号编码形式，类实现形式为 SparseCategoricalCrossentropy)</li><li><code>hinge</code>(合页损失函数，用于二分类，最著名的应用是作为支持向量机SVM的损失函数，类实现形式为 Hinge)</li><li>kld(相对熵损失，也叫KL散度，常用于最大期望算法EM的损失函数，两个概率分布差异的一种信息度量。<code>类实现形式为</code> KLDivergence 或 KLD)</li><li><code>cosine_similarity</code>(余弦相似度，可用于多分类，类实现形式为 CosineSimilarity)</li></ul><h3 id="2、-自定义损失函数"><a href="#2、-自定义损失函数" class="headerlink" title="2、 自定义损失函数"></a>2、 自定义损失函数</h3><blockquote><p>自定义损失函数接收两个张量<code>y_true</code>,<code>y_pred</code>作为输入参数，并输出一个标量作为损失函数值。</p></blockquote><h4 id="函数形式"><a href="#函数形式" class="headerlink" title="函数形式"></a>函数形式</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">focal_loss</span><span class="params">(gamma=<span class="number">2.</span>, alpha=<span class="number">.25</span>)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">focal_loss_fixed</span><span class="params">(y_true, y_pred)</span>:</span></span><br><span class="line">        pt_1 = tf.where(tf.equal(y_true, <span class="number">1</span>), y_pred, tf.ones_like(y_pred))</span><br><span class="line">        pt_0 = tf.where(tf.equal(y_true, <span class="number">0</span>), y_pred, tf.zeros_like(y_pred))</span><br><span class="line">        loss = -tf.sum(alpha * tf.pow(<span class="number">1.</span> - pt_1, gamma) * tf.log(<span class="number">1e-07</span>+pt_1)) \</span><br><span class="line">           -tf.sum((<span class="number">1</span>-alpha) * tf.pow( pt_0, gamma) * tf.log(<span class="number">1.</span> - pt_0 + <span class="number">1e-07</span>))</span><br><span class="line">        <span class="keyword">return</span> loss</span><br><span class="line">    <span class="keyword">return</span> focal_loss_fixed</span><br></pre></td></tr></table></figure></div><h4 id="类形式"><a href="#类形式" class="headerlink" title="类形式"></a>类形式</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FocalLoss</span><span class="params">(losses.Loss)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,gamma=<span class="number">2.0</span>,alpha=<span class="number">0.25</span>)</span>:</span></span><br><span class="line">        self.gamma = gamma</span><br><span class="line">        self.alpha = alpha</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">call</span><span class="params">(self,y_true,y_pred)</span>:</span></span><br><span class="line"></span><br><span class="line">        pt_1 = tf.where(tf.equal(y_true, <span class="number">1</span>), y_pred, tf.ones_like(y_pred))</span><br><span class="line">        pt_0 = tf.where(tf.equal(y_true, <span class="number">0</span>), y_pred, tf.zeros_like(y_pred))</span><br><span class="line">        loss = -tf.sum(self.alpha * tf.pow(<span class="number">1.</span> - pt_1, self.gamma) * tf.log(<span class="number">1e-07</span>+pt_1)) \</span><br><span class="line">           -tf.sum((<span class="number">1</span>-self.alpha) * tf.pow( pt_0, self.gamma) * tf.log(<span class="number">1.</span> - pt_0 + <span class="number">1e-07</span>))</span><br><span class="line">        <span class="keyword">return</span> loss</span><br></pre></td></tr></table></figure></div><h2 id="二、评估指标metrics"><a href="#二、评估指标metrics" class="headerlink" title="二、评估指标metrics"></a>二、评估指标metrics</h2><p><strong>损失函数除了作为模型训练时候的优化目标，也能够作为模型好坏的一种评价指标。</strong></p><h3 id="1、常用的内置评估指标"><a href="#1、常用的内置评估指标" class="headerlink" title="1、常用的内置评估指标"></a>1、常用的内置评估指标</h3><ul><li><code>MeanSquaredError</code>（平方差误差，用于回归，可以简写为MSE，函数形式为mse）</li><li><code>MeanAbsoluteError</code> (绝对值误差，用于回归，可以简写为MAE，函数形式为mae)</li><li><code>MeanAbsolutePercentageError</code> (平均百分比误差，用于回归，可以简写为MAPE，函数形式为mape)</li><li><code>RootMeanSquaredError</code> (均方根误差，用于回归)</li><li><code>Accuracy</code> (准确率，用于分类，可以用字符串”Accuracy”表示，Accuracy=(TP+TN)/(TP+TN+FP+FN)，要求y_true和y_pred都为类别序号编码)</li><li><code>Precision</code> (精确率，用于二分类，Precision = TP/(TP+FP))</li><li><code>Recall</code> (召回率，用于二分类，Recall = TP/(TP+FN))</li><li><code>TruePositives</code> (真正例，用于二分类)</li><li><code>TrueNegatives</code> (真负例，用于二分类)</li><li><code>FalsePositives</code> (假正例，用于二分类)</li><li><code>FalseNegatives</code> (假负例，用于二分类)</li><li><code>AUC</code>(ROC曲线(TPR vs FPR)下的面积，用于二分类，直观解释为随机抽取一个正样本和一个负样本，正样本的预测值大于负样本的概率)</li><li><code>CategoricalAccuracy</code>（分类准确率，与Accuracy含义相同，要求y_true(label)为onehot编码形式）</li><li><code>SparseCategoricalAccuracy</code> (稀疏分类准确率，与Accuracy含义相同，要求y_true(label)为序号编码形式)</li><li><code>MeanIoU</code> (Intersection-Over-Union，常用于图像分割)</li><li><code>TopKCategoricalAccuracy</code> (多分类TopK准确率，要求y_true(label)为onehot编码形式)</li><li><code>SparseTopKCategoricalAccuracy</code> (稀疏多分类TopK准确率，要求y_true(label)为序号编码形式)</li><li><code>Mean</code> (平均值)</li><li><code>Sum</code> (求和)</li></ul><h3 id="2、自定义评估指标"><a href="#2、自定义评估指标" class="headerlink" title="2、自定义评估指标"></a>2、自定义评估指标</h3><p><strong>KS指标适合二分类问题，其计算方式为 <code>KS=max(TPR-FPR).</code></strong></p><blockquote><p>TPR=TP/(TP+FN) , FPR = FP/(FP+TN)</p><p>TPR曲线实际上就是正样本的累积分布曲线(CDF)，FPR曲线实际上就是负样本的累积分布曲线(CDF)。</p></blockquote><p><strong>KS指标就是正样本和负样本累积分布曲线差值的最大值。</strong></p><h4 id="函数形式的自定义评估指标"><a href="#函数形式的自定义评估指标" class="headerlink" title="函数形式的自定义评估指标"></a>函数形式的自定义评估指标</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#函数形式的自定义评估指标</span></span><br><span class="line"><span class="meta">@tf.function</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ks</span><span class="params">(y_true,y_pred)</span>:</span></span><br><span class="line">    y_true = tf.reshape(y_true,(<span class="number">-1</span>,))</span><br><span class="line">    y_pred = tf.reshape(y_pred,(<span class="number">-1</span>,))</span><br><span class="line">    length = tf.shape(y_true)[<span class="number">0</span>]</span><br><span class="line">    t = tf.math.top_k(y_pred,k = length,sorted = <span class="literal">False</span>)</span><br><span class="line">    y_pred_sorted = tf.gather(y_pred,t.indices)</span><br><span class="line">    y_true_sorted = tf.gather(y_true,t.indices)</span><br><span class="line">    cum_positive_ratio = tf.truediv(</span><br><span class="line">        tf.cumsum(y_true_sorted),tf.reduce_sum(y_true_sorted))</span><br><span class="line">    cum_negative_ratio = tf.truediv(</span><br><span class="line">        tf.cumsum(<span class="number">1</span> - y_true_sorted),tf.reduce_sum(<span class="number">1</span> - y_true_sorted))</span><br><span class="line">    ks_value = tf.reduce_max(tf.abs(cum_positive_ratio - cum_negative_ratio)) </span><br><span class="line">    <span class="keyword">return</span> ks_value</span><br><span class="line"></span><br><span class="line">y_true = tf.constant([[<span class="number">1</span>],[<span class="number">1</span>],[<span class="number">1</span>],[<span class="number">0</span>],[<span class="number">1</span>],[<span class="number">1</span>],[<span class="number">1</span>],[<span class="number">0</span>],[<span class="number">0</span>],[<span class="number">0</span>],[<span class="number">1</span>],[<span class="number">0</span>],[<span class="number">1</span>],[<span class="number">0</span>]])</span><br><span class="line">y_pred = tf.constant([[<span class="number">0.6</span>],[<span class="number">0.1</span>],[<span class="number">0.4</span>],[<span class="number">0.5</span>],[<span class="number">0.7</span>],[<span class="number">0.7</span>],[<span class="number">0.7</span>],</span><br><span class="line">                      [<span class="number">0.4</span>],[<span class="number">0.4</span>],[<span class="number">0.5</span>],[<span class="number">0.8</span>],[<span class="number">0.3</span>],[<span class="number">0.5</span>],[<span class="number">0.3</span>]])</span><br><span class="line">tf.print(ks(y_true,y_pred))</span><br></pre></td></tr></table></figure></div><h4 id="类形式的自定义评估指标"><a href="#类形式的自定义评估指标" class="headerlink" title="类形式的自定义评估指标"></a>类形式的自定义评估指标</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#类形式的自定义评估指标</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">KS</span><span class="params">(metrics.Metric)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name = <span class="string">"ks"</span>, **kwargs)</span>:</span></span><br><span class="line">        super(KS,self).__init__(name=name,**kwargs)</span><br><span class="line">        self.true_positives = self.add_weight(</span><br><span class="line">            name = <span class="string">"tp"</span>,shape = (<span class="number">101</span>,), initializer = <span class="string">"zeros"</span>)</span><br><span class="line">        self.false_positives = self.add_weight(</span><br><span class="line">            name = <span class="string">"fp"</span>,shape = (<span class="number">101</span>,), initializer = <span class="string">"zeros"</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @tf.function</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update_state</span><span class="params">(self,y_true,y_pred)</span>:</span></span><br><span class="line">        y_true = tf.cast(tf.reshape(y_true,(<span class="number">-1</span>,)),tf.bool)</span><br><span class="line">        y_pred = tf.cast(<span class="number">100</span>*tf.reshape(y_pred,(<span class="number">-1</span>,)),tf.int32)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> tf.range(<span class="number">0</span>,tf.shape(y_true)[<span class="number">0</span>]):</span><br><span class="line">            <span class="keyword">if</span> y_true[i]:</span><br><span class="line">                self.true_positives[y_pred[i]].assign(</span><br><span class="line">                    self.true_positives[y_pred[i]]+<span class="number">1.0</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.false_positives[y_pred[i]].assign(</span><br><span class="line">                    self.false_positives[y_pred[i]]+<span class="number">1.0</span>)</span><br><span class="line">        <span class="keyword">return</span> (self.true_positives,self.false_positives)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @tf.function</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">result</span><span class="params">(self)</span>:</span></span><br><span class="line">        cum_positive_ratio = tf.truediv(</span><br><span class="line">            tf.cumsum(self.true_positives),tf.reduce_sum(self.true_positives))</span><br><span class="line">        cum_negative_ratio = tf.truediv(</span><br><span class="line">            tf.cumsum(self.false_positives),tf.reduce_sum(self.false_positives))</span><br><span class="line">        ks_value = tf.reduce_max(tf.abs(cum_positive_ratio - cum_negative_ratio)) </span><br><span class="line">        <span class="keyword">return</span> ks_value</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">y_true = tf.constant([[<span class="number">1</span>],[<span class="number">1</span>],[<span class="number">1</span>],[<span class="number">0</span>],[<span class="number">1</span>],[<span class="number">1</span>],[<span class="number">1</span>],[<span class="number">0</span>],[<span class="number">0</span>],[<span class="number">0</span>],[<span class="number">1</span>],[<span class="number">0</span>],[<span class="number">1</span>],[<span class="number">0</span>]])</span><br><span class="line">y_pred = tf.constant([[<span class="number">0.6</span>],[<span class="number">0.1</span>],[<span class="number">0.4</span>],[<span class="number">0.5</span>],[<span class="number">0.7</span>],[<span class="number">0.7</span>],</span><br><span class="line">                      [<span class="number">0.7</span>],[<span class="number">0.4</span>],[<span class="number">0.4</span>],[<span class="number">0.5</span>],[<span class="number">0.8</span>],[<span class="number">0.3</span>],[<span class="number">0.5</span>],[<span class="number">0.3</span>]])</span><br><span class="line"></span><br><span class="line">myks = KS()</span><br><span class="line">myks.update_state(y_true,y_pred)</span><br><span class="line">tf.print(myks.result())</span><br></pre></td></tr></table></figure></div><h2 id="三、优化器optimizers"><a href="#三、优化器optimizers" class="headerlink" title="三、优化器optimizers"></a>三、优化器optimizers</h2><h3 id="1、优化器"><a href="#1、优化器" class="headerlink" title="1、优化器"></a>1、优化器</h3><p><strong>优化器主要使用<code>apply_gradients</code>方法传入变量和对应梯度从而来对给定变量进行迭代，或者直接使用minimize方法对目标函数进行迭代优化。</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用optimizer.apply_gradients</span></span><br><span class="line">optimizer = tf.keras.optimizers.SGD(learning_rate=<span class="number">0.01</span>)  </span><br><span class="line"><span class="keyword">while</span> tf.constant(<span class="literal">True</span>): </span><br><span class="line">        <span class="keyword">with</span> tf.GradientTape() <span class="keyword">as</span> tape:</span><br><span class="line">            y = a*tf.pow(x,<span class="number">2</span>) + b*x + c</span><br><span class="line">        dy_dx = tape.gradient(y,x)</span><br><span class="line">        optimizer.apply_gradients(grads_and_vars=[(dy_dx,x)])</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用model.fit</span></span><br><span class="line">model.compile(optimizer = </span><br><span class="line">              tf.keras.optimizers.SGD(learning_rate=<span class="number">0.01</span>),loss = myloss)</span><br><span class="line">history = model.fit(tf.zeros((<span class="number">100</span>,<span class="number">2</span>)),</span><br><span class="line">                    tf.ones(<span class="number">100</span>),batch_size = <span class="number">1</span>,epochs = <span class="number">10</span>)  <span class="comment">#迭代1000次</span></span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用optimizer.minimize</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train</span><span class="params">(epoch = <span class="number">1000</span>)</span>:</span>  </span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> tf.range(epoch):  </span><br><span class="line">        optimizer.minimize(f,[x])</span><br><span class="line">    tf.print(<span class="string">"epoch = "</span>,optimizer.iterations)</span><br><span class="line">    <span class="keyword">return</span>(f())</span><br></pre></td></tr></table></figure></div><h3 id="2、内置优化器"><a href="#2、内置优化器" class="headerlink" title="2、内置优化器"></a>2、内置优化器</h3><p>深度学习优化算法大概经历了 SGD -&gt; SGDM -&gt; NAG -&gt;Adagrad -&gt; Adadelta(RMSprop) -&gt; Adam -&gt; Nadam 这样的发展历程。</p><p>在keras.optimizers子模块中，它们基本上都有对应的类的实现。</p><ul><li><code>SGD</code>, 默认参数为纯SGD, 设置momentum参数不为0实际上变成SGDM, 考虑了一阶动量, 设置 nesterov为True后变成NAG，即 Nesterov Acceleration Gradient，在计算梯度时计算的是向前走一步所在位置的梯度。</li><li><code>Adagrad</code>, 考虑了二阶动量，对于不同的参数有不同的学习率，即自适应学习率。缺点是学习率单调下降，可能后期学习速率过慢乃至提前停止学习。</li><li><code>RMSprop</code>, 考虑了二阶动量，对于不同的参数有不同的学习率，即自适应学习率，对Adagrad进行了优化，通过指数平滑只考虑一定窗口内的二阶动量。</li><li><code>Adadelta</code>, 考虑了二阶动量，与RMSprop类似，但是更加复杂一些，自适应性更强。</li><li><code>Adam</code>, 同时考虑了一阶动量和二阶动量，可以看成RMSprop上进一步考虑了Momentum。</li><li><code>Nadam</code>, 在Adam基础上进一步考虑了 Nesterov Acceleration。</li></ul><h2 id="四、回调函数callbacks"><a href="#四、回调函数callbacks" class="headerlink" title="四、回调函数callbacks"></a>四、回调函数callbacks</h2><p>tf.keras的回调函数实际上是一个类，一般是在model.fit时作为参数指定，用于控制在训练过程开始或者在训练过程结束，在每个epoch训练开始或者训练结束，在每个batch训练开始或者训练结束时执行一些操作，例如收集一些日志信息，改变学习率等超参数，提前终止训练过程等等。</p><h3 id="1、内置回调函数"><a href="#1、内置回调函数" class="headerlink" title="1、内置回调函数"></a>1、内置回调函数</h3><ul><li><code>BaseLogger</code>： 收集每个epoch上metrics在各个batch上的平均值，对stateful_metrics参数中的带中间状态的指标直接拿最终值无需对各个batch平均，指标均值结果将添加到logs变量中。该回调函数被所有模型默认添加，且是第一个被添加的。</li><li><code>History</code>： 将BaseLogger计算的各个epoch的metrics结果记录到history这个dict变量中，并作为model.fit的返回值。该回调函数被所有模型默认添加，在BaseLogger之后被添加。</li><li><code>EarlyStopping</code>： 当被监控指标在设定的若干个epoch后没有提升，则提前终止训练。</li><li><code>TensorBoard</code>： 为Tensorboard可视化保存日志信息。支持评估指标，计算图，模型参数等的可视化。</li><li><code>ModelCheckpoint</code>： 在每个epoch后保存模型。</li><li><code>ReduceLROnPlateau</code>：如果监控指标在设定的若干个epoch后没有提升，则以一定的因子减少学习率。</li><li><code>TerminateOnNaN</code>：如果遇到loss为NaN，提前终止训练。</li><li><code>LearningRateScheduler</code>：学习率控制器。给定学习率lr和epoch的函数关系，根据该函数关系在每个epoch前调整学习率。</li><li><code>CSVLogger</code>：将每个epoch后的logs结果记录到CSV文件中。</li><li><code>ProgbarLogger</code>：将每个epoch后的logs结果打印到标准输出流中。</li></ul><h3 id="2、自定义回调函数"><a href="#2、自定义回调函数" class="headerlink" title="2、自定义回调函数"></a>2、自定义回调函数</h3><p><strong>可以使用<code>callbacks.LambdaCallback</code>编写较为简单的回调函数，也可以通过对<code>callbacks.Callback</code>子类化编写更加复杂的回调函数逻辑。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> TensorFlow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TensorFlow2.X学习笔记(6)--TensorFlow中阶API之特征列、激活函数、模型层</title>
      <link href="/2020/05/06/TensorFlow2-X%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-6-TensorFlow%E4%B8%AD%E9%98%B6API%E4%B9%8B%E7%89%B9%E5%BE%81%E5%88%97%E3%80%81%E6%BF%80%E6%B4%BB%E5%87%BD%E6%95%B0%E3%80%81%E6%A8%A1%E5%9E%8B%E5%B1%82/"/>
      <url>/2020/05/06/TensorFlow2-X%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-6-TensorFlow%E4%B8%AD%E9%98%B6API%E4%B9%8B%E7%89%B9%E5%BE%81%E5%88%97%E3%80%81%E6%BF%80%E6%B4%BB%E5%87%BD%E6%95%B0%E3%80%81%E6%A8%A1%E5%9E%8B%E5%B1%82/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="一、特征列feature-column"><a href="#一、特征列feature-column" class="headerlink" title="一、特征列feature_column"></a>一、特征列feature_column</h2><p><strong>特征列</strong>通常用于对结构化数据实施特征工程时候使用，图像或者文本数据一般不会用到特征列。使用特征列可以将类别特征转换为one-hot编码特征，将连续特征构建分桶特征，以及对多个特征生成交叉特征等等。</p><p><a href="https://ae01.alicdn.com/kf/H4620790c4c0747b9831a51822c0361ffi.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://ae01.alicdn.com/kf/H4620790c4c0747b9831a51822c0361ffi.jpg" class="lazyload"></a></p><p><strong>注意：所有的Catogorical Column类型最终都要通过indicator_column转换成Dense Column类型才能传入模型！</strong></p><ul><li><code>numeric_column</code> 数值列，最常用。</li><li><code>bucketized_column</code> 分桶列，由数值列生成，可以由一个数值列出多个特征，one-hot编码。</li><li><code>categorical_column_with_identity</code> 分类标识列，one-hot编码，相当于分桶列每个桶为1个整数的情况。</li><li><code>categorical_column_with_vocabulary_list</code> 分类词汇列，one-hot编码，由list指定词典。</li><li><code>categorical_column_with_vocabulary_file</code> 分类词汇列，由文件file指定词典。</li><li><code>categorical_column_with_hash_bucket</code> 哈希列，整数或词典较大时采用。</li><li><code>indicator_column</code> 指标列，由Categorical Column生成，one-hot编码</li><li><code>embedding_column</code> 嵌入列，由Categorical Column生成，嵌入矢量分布参数需要学习。嵌入矢量维数建议取类别数量的 4 次方根。</li><li><code>crossed_column</code> 交叉列，可以由除categorical_column_with_hash_bucket的任意分类列构成。</li></ul><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#================================================================================</span></span><br><span class="line"><span class="comment"># 二，定义特征列</span></span><br><span class="line"><span class="comment">#================================================================================</span></span><br><span class="line">printlog(<span class="string">"step2: make feature columns..."</span>)</span><br><span class="line"></span><br><span class="line">feature_columns = []</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数值列</span></span><br><span class="line"><span class="keyword">for</span> col <span class="keyword">in</span> [<span class="string">'age'</span>,<span class="string">'fare'</span>,<span class="string">'parch'</span>,<span class="string">'sibsp'</span>] + [</span><br><span class="line">    c <span class="keyword">for</span> c <span class="keyword">in</span> dfdata.columns <span class="keyword">if</span> c.endswith(<span class="string">'_nan'</span>)]:</span><br><span class="line">    feature_columns.append(tf.feature_column.numeric_column(col))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分桶列</span></span><br><span class="line">age = tf.feature_column.numeric_column(<span class="string">'age'</span>)</span><br><span class="line">age_buckets = tf.feature_column.bucketized_column(age, </span><br><span class="line">             boundaries=[<span class="number">18</span>, <span class="number">25</span>, <span class="number">30</span>, <span class="number">35</span>, <span class="number">40</span>, <span class="number">45</span>, <span class="number">50</span>, <span class="number">55</span>, <span class="number">60</span>, <span class="number">65</span>])</span><br><span class="line">feature_columns.append(age_buckets)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 类别列</span></span><br><span class="line"><span class="comment"># 注意：所有的Catogorical Column类型最终都要通过indicator_column转换成Dense Column类型才能传入模型！！</span></span><br><span class="line">sex = tf.feature_column.indicator_column(</span><br><span class="line">      tf.feature_column.categorical_column_with_vocabulary_list(</span><br><span class="line">      key=<span class="string">'sex'</span>,vocabulary_list=[<span class="string">"male"</span>, <span class="string">"female"</span>]))</span><br><span class="line">feature_columns.append(sex)</span><br><span class="line"></span><br><span class="line">pclass = tf.feature_column.indicator_column(</span><br><span class="line">      tf.feature_column.categorical_column_with_vocabulary_list(</span><br><span class="line">      key=<span class="string">'pclass'</span>,vocabulary_list=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]))</span><br><span class="line">feature_columns.append(pclass)</span><br><span class="line"></span><br><span class="line">ticket = tf.feature_column.indicator_column(</span><br><span class="line">     tf.feature_column.categorical_column_with_hash_bucket(<span class="string">'ticket'</span>,<span class="number">3</span>))</span><br><span class="line">feature_columns.append(ticket)</span><br><span class="line"></span><br><span class="line">embarked = tf.feature_column.indicator_column(</span><br><span class="line">      tf.feature_column.categorical_column_with_vocabulary_list(</span><br><span class="line">      key=<span class="string">'embarked'</span>,vocabulary_list=[<span class="string">'S'</span>,<span class="string">'C'</span>,<span class="string">'B'</span>]))</span><br><span class="line">feature_columns.append(embarked)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 嵌入列</span></span><br><span class="line">cabin = tf.feature_column.embedding_column(</span><br><span class="line">    tf.feature_column.categorical_column_with_hash_bucket(<span class="string">'cabin'</span>,<span class="number">32</span>),<span class="number">2</span>)</span><br><span class="line">feature_columns.append(cabin)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 交叉列</span></span><br><span class="line">pclass_cate = tf.feature_column.categorical_column_with_vocabulary_list(</span><br><span class="line">          key=<span class="string">'pclass'</span>,vocabulary_list=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line"></span><br><span class="line">crossed_feature = tf.feature_column.indicator_column(</span><br><span class="line">    tf.feature_column.crossed_column([age_buckets, pclass_cate],hash_bucket_size=<span class="number">15</span>))</span><br><span class="line"></span><br><span class="line">feature_columns.append(crossed_feature)</span><br></pre></td></tr></table></figure></div><h2 id="二、常用激活函数"><a href="#二、常用激活函数" class="headerlink" title="二、常用激活函数"></a>二、常用激活函数</h2><ul><li><code>tf.nn.sigmoid</code>：<strong>将实数压缩到0到1之间，一般只在二分类的最后输出层使用。主要缺陷为存在梯度消失问题，计算复杂度高，输出不以0为中心。</strong></li></ul><p><a href="https://ae01.alicdn.com/kf/Hec0591aab2694376abed7d4a04b22ee6m.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://ae01.alicdn.com/kf/Hec0591aab2694376abed7d4a04b22ee6m.jpg" class="lazyload"></a></p><ul><li><code>tf.nn.softmax</code>：<strong>sigmoid的多分类扩展，一般只在多分类问题的最后输出层使用。</strong></li></ul><p><a href="https://ae01.alicdn.com/kf/H7714e766763444f98ea732a0fb608ae8g.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://ae01.alicdn.com/kf/H7714e766763444f98ea732a0fb608ae8g.jpg" class="lazyload"></a></p><ul><li><code>tf.nn.tanh</code>：<strong>将实数压缩到-1到1之间，输出期望为0。主要缺陷为存在梯度消失问题，计算复杂度高。</strong></li></ul><p><a href="https://ae01.alicdn.com/kf/H18cb479a89fd43b39a119e18c1084c4dA.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://ae01.alicdn.com/kf/H18cb479a89fd43b39a119e18c1084c4dA.jpg" class="lazyload"></a></p><ul><li><code>tf.nn.relu</code>：<strong>修正线性单元，最流行的激活函数。一般隐藏层使用。主要缺陷是：输出不以0为中心，输入小于0时存在梯度消失问题(死亡relu)。</strong></li></ul><p><a href="https://ae01.alicdn.com/kf/Heda2eb461b334151b85403f2bc841898A.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://ae01.alicdn.com/kf/Heda2eb461b334151b85403f2bc841898A.jpg" class="lazyload"></a></p><ul><li><code>tf.nn.leaky_relu</code>：<strong>对修正线性单元（relu）的改进，解决了死亡relu问题</strong>。</li></ul><p><a href="https://ae01.alicdn.com/kf/H2f91cf2e243546c993f5bd2bdd07acf3L.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://ae01.alicdn.com/kf/H2f91cf2e243546c993f5bd2bdd07acf3L.jpg" class="lazyload"></a></p><ul><li><code>tf.nn.elu</code>：<strong>指数线性单元。对relu的改进，能够缓解死亡relu问题。</strong></li></ul><p><a href="https://ae01.alicdn.com/kf/H709db342edb048dbbf8ae1b1567c2fa0J.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://ae01.alicdn.com/kf/H709db342edb048dbbf8ae1b1567c2fa0J.jpg" class="lazyload"></a></p><ul><li><code>tf.nn.selu</code>：<strong>扩展型指数线性单元。在权重用<code>tf.keras.initializers.lecun_normal</code>初始化前提下能够对神经网络进行自归一化。不可能出现梯度爆炸或者梯度消失问题。需要和Dropout的变种AlphaDropout一起使用。</strong></li></ul><p><a href="https://ae01.alicdn.com/kf/H09d0dcf100f34a0984ee5d7b11c9cba8m.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://ae01.alicdn.com/kf/H09d0dcf100f34a0984ee5d7b11c9cba8m.jpg" class="lazyload"></a></p><ul><li><code>tf.nn.swish</code>：<strong>自门控激活函数。谷歌出品，相关研究指出用swish替代relu将获得轻微效果提升。</strong></li></ul><p><a href="https://ae01.alicdn.com/kf/H6ac78612fb9e4fe299be63a219f29e62A.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://ae01.alicdn.com/kf/H6ac78612fb9e4fe299be63a219f29e62A.jpg" class="lazyload"></a></p><ul><li>gelu：<strong>高斯误差线性单元激活函数。在Transformer中表现最好。tf.nn模块尚没有实现该函数</strong>。</li></ul><p><a href="https://ae01.alicdn.com/kf/Hed15868919324758b0d326f7d68eaed4T.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://ae01.alicdn.com/kf/Hed15868919324758b0d326f7d68eaed4T.jpg" class="lazyload"></a></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras <span class="keyword">import</span> layers,models</span><br><span class="line"></span><br><span class="line">tf.keras.backend.clear_session()</span><br><span class="line"></span><br><span class="line">model = models.Sequential()</span><br><span class="line"><span class="comment"># 通过 activation参数指定</span></span><br><span class="line">model.add(layers.Dense(<span class="number">32</span>,input_shape = (<span class="literal">None</span>,<span class="number">16</span>),activation = tf.nn.relu)) </span><br><span class="line"></span><br><span class="line">model.add(layers.Dense(<span class="number">10</span>))</span><br><span class="line">model.add(layers.Activation(tf.nn.softmax))  <span class="comment"># 显式添加layers.Activation激活层</span></span><br><span class="line">model.summary()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印结果：</span></span><br><span class="line">Model: <span class="string">"sequential"</span></span><br><span class="line">_________________________________________________________________</span><br><span class="line">Layer (type)                 Output Shape              Param <span class="comment">#   </span></span><br><span class="line">=================================================================</span><br><span class="line">dense (Dense)                (<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">32</span>)          <span class="number">544</span>       </span><br><span class="line">_________________________________________________________________</span><br><span class="line">dense_1 (Dense)              (<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">10</span>)          <span class="number">330</span>       </span><br><span class="line">_________________________________________________________________</span><br><span class="line">activation (Activation)      (<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">10</span>)          <span class="number">0</span>         </span><br><span class="line">=================================================================</span><br><span class="line">Total params: <span class="number">874</span></span><br><span class="line">Trainable params: <span class="number">874</span></span><br><span class="line">Non-trainable params: <span class="number">0</span></span><br></pre></td></tr></table></figure></div><h2 id="三、模型层"><a href="#三、模型层" class="headerlink" title="三、模型层"></a>三、模型层</h2><h3 id="1、内置模型层"><a href="#1、内置模型层" class="headerlink" title="1、内置模型层"></a>1、内置模型层</h3><h4 id="基础层"><a href="#基础层" class="headerlink" title="基础层"></a><strong>基础层</strong></h4><ul><li><code>Dense</code>：密集连接层。参数个数 = 输入层特征数× 输出层特征数(weight)＋ 输出层特征数(bias)</li><li><code>Activation</code>：激活函数层。一般放在Dense层后面，等价于在Dense层中指定activation。</li><li><code>Dropout</code>：随机置零层。训练期间以一定几率将输入置0，一种正则化手段。</li><li><code>BatchNormalization</code>：批标准化层。通过线性变换将输入批次缩放平移到稳定的均值和标准差。可以增强模型对输入不同分布的适应性，加快模型训练速度，有轻微正则化效果。一般在激活函数之前使用。</li><li><code>SpatialDropout2D</code>：空间随机置零层。训练期间以一定几率将整个特征图置0，一种正则化手段，有利于避免特征图之间过高的相关性。</li><li><code>Input</code>：输入层。通常使用Functional API方式构建模型时作为第一层。</li><li><code>DenseFeature</code>：特征列接入层，用于接收一个特征列列表并产生一个密集连接层。</li><li><code>Flatten</code>：压平层，用于将多维张量压成一维。</li><li><code>Reshape</code>：形状重塑层，改变输入张量的形状。</li><li><code>Concatenate</code>：拼接层，将多个张量在某个维度上拼接。</li><li><code>Add</code>：加法层。</li><li><code>Subtract</code>： 减法层。</li><li><code>Maximum</code>：取最大值层。</li><li><code>Minimum</code>：取最小值层。</li></ul><h4 id="卷积网络相关层"><a href="#卷积网络相关层" class="headerlink" title="卷积网络相关层"></a><strong>卷积网络相关层</strong></h4><ul><li><code>Conv1D</code>：普通一维卷积，常用于文本。参数个数 = 输入通道数×卷积核尺寸(如3)×卷积核个数</li><li><code>Conv2D</code>：普通二维卷积，常用于图像。参数个数 = 输入通道数×卷积核尺寸(如3乘3)×卷积核个数</li><li><code>Conv3D</code>：普通三维卷积，常用于视频。参数个数 = 输入通道数×卷积核尺寸(如3乘3乘3)×卷积核个数</li><li><code>SeparableConv2D</code>：二维深度可分离卷积层。不同于普通卷积同时对区域和通道操作，深度可分离卷积先操作区域，再操作通道。即先对每个通道做独立卷即先操作区域，再用1乘1卷积跨通道组合即再操作通道。参数个数 = 输入通道数×卷积核尺寸 + 输入通道数×1×1×输出通道数。深度可分离卷积的参数数量一般远小于普通卷积，效果一般也更好。</li><li><code>DepthwiseConv2D</code>：二维深度卷积层。仅有SeparableConv2D前半部分操作，即只操作区域，不操作通道，一般输出通道数和输入通道数相同，但也可以通过设置depth_multiplier让输出通道为输入通道的若干倍数。输出通道数 = 输入通道数 × depth_multiplier。参数个数 = 输入通道数×卷积核尺寸× depth_multiplier。</li><li><code>Conv2DTranspose</code>：二维卷积转置层，俗称反卷积层。并非卷积的逆操作，但在卷积核相同的情况下，当其输入尺寸是卷积操作输出尺寸的情况下，卷积转置的输出尺寸恰好是卷积操作的输入尺寸。</li><li><code>LocallyConnected2D</code>: 二维局部连接层。类似Conv2D，唯一的差别是没有空间上的权值共享，所以其参数个数远高于二维卷积。</li><li><code>MaxPooling2D</code>: 二维最大池化层。也称作下采样层。池化层无参数，主要作用是降维。</li><li><code>AveragePooling2D</code>: 二维平均池化层。</li><li><code>GlobalMaxPool2D</code>: 全局最大池化层。每个通道仅保留一个值。一般从卷积层过渡到全连接层时使用，是Flatten的替代方案。</li><li><code>GlobalAvgPool2D</code>: 全局平均池化层。每个通道仅保留一个值。</li></ul><h4 id="循环网络相关层"><a href="#循环网络相关层" class="headerlink" title="循环网络相关层"></a><strong>循环网络相关层</strong></h4><ul><li><p><code>Embedding</code>：嵌入层。一种比Onehot更加有效的对离散特征进行编码的方法。一般用于将输入中的单词映射为稠密向量。嵌入层的参数需要学习。</p></li><li><p><code>LSTM</code>：长短记忆循环网络层。最普遍使用的循环网络层。具有携带轨道，遗忘门，更新门，输出门。可以较为有效地缓解梯度消失问题，从而能够适用长期依赖问题。设置return_sequences = True时可以返回各个中间步骤输出，否则只返回最终输出。</p></li><li><p><code>GRU</code>：门控循环网络层。LSTM的低配版，不具有携带轨道，参数数量少于LSTM，训练速度更快。</p></li><li><p><code>SimpleRNN</code>：简单循环网络层。容易存在梯度消失，不能够适用长期依赖问题。一般较少使用。</p></li><li><p><code>ConvLSTM2D</code>：卷积长短记忆循环网络层。结构上类似LSTM，但对输入的转换操作和对状态的转换操作都是卷积运算。</p></li><li><p><code>Bidirectional</code>：双向循环网络包装器。可以将LSTM，GRU等层包装成双向循环网络。从而增强特征提取能力。</p></li><li><p><code>RNN</code>：RNN基本层。接受一个循环网络单元或一个循环单元列表，通过调用tf.keras.backend.rnn函数在序列上进行迭代从而转换成循环网络层。</p></li><li><p><code>LSTMCell</code>：LSTM单元。和LSTM在整个序列上迭代相比，它仅在序列上迭代一步。可以简单理解LSTM即RNN基本层包裹LSTMCell。</p></li><li><p><code>GRUCell</code>：GRU单元。和GRU在整个序列上迭代相比，它仅在序列上迭代一步。</p></li><li><p><code>SimpleRNNCell</code>：SimpleRNN单元。和SimpleRNN在整个序列上迭代相比，它仅在序列上迭代一步。</p></li><li><p><code>AbstractRNNCell</code>：抽象RNN单元。通过对它的子类化用户可以自定义RNN单元，再通过RNN基本层的包裹实现用户自定义循环网络层。</p></li><li><p><code>Attention</code>：Dot-product类型注意力机制层。可以用于构建注意力模型。</p></li><li><p><code>AdditiveAttention</code>：Additive类型注意力机制层。可以用于构建注意力模型。</p></li><li><p><code>TimeDistributed</code>：时间分布包装器。包装后可以将Dense、Conv2D等作用到每一个时间片段上。</p></li></ul><h3 id="2、自定义模型层"><a href="#2、自定义模型层" class="headerlink" title="2、自定义模型层"></a>2、自定义模型层</h3><ul><li><p><strong>如果自定义模型层没有需要被训练的参数，一般推荐使用<code>Lamda</code>层实现。</strong></p></li><li><p><strong>如果自定义模型层有需要被训练的参数，则可以通过对<code>Layer</code>基类子类化实现。</strong></p></li></ul><h4 id="Lamda层"><a href="#Lamda层" class="headerlink" title="Lamda层"></a>Lamda层</h4><p>Lamda层由于没有需要被训练的参数，只需要定义正向传播逻辑即可，使用比Layer基类子类化更加简单。</p><p>Lamda层的正向逻辑可以使用Python的lambda函数来表达，也可以用def关键字定义函数来表达。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras <span class="keyword">import</span> layers,models,regularizers</span><br><span class="line"></span><br><span class="line">mypower = layers.Lambda(<span class="keyword">lambda</span> x:tf.math.pow(x,<span class="number">2</span>))</span><br><span class="line">mypower(tf.range(<span class="number">5</span>))</span><br></pre></td></tr></table></figure></div><h4 id="Layer层"><a href="#Layer层" class="headerlink" title="Layer层"></a>Layer层</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Linear</span><span class="params">(layers.Layer)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, units=<span class="number">32</span>, **kwargs)</span>:</span></span><br><span class="line">        super(Linear, self).__init__(**kwargs)</span><br><span class="line">        self.units = units</span><br><span class="line"></span><br><span class="line">    <span class="comment">#build方法一般定义Layer需要被训练的参数。    </span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">build</span><span class="params">(self, input_shape)</span>:</span> </span><br><span class="line">        self.w = self.add_weight(shape=(input_shape[<span class="number">-1</span>], self.units),</span><br><span class="line">                                 initializer=<span class="string">'random_normal'</span>,</span><br><span class="line">                                 trainable=<span class="literal">True</span>)</span><br><span class="line">        self.b = self.add_weight(shape=(self.units,),</span><br><span class="line">                                 initializer=<span class="string">'random_normal'</span>,</span><br><span class="line">                                 trainable=<span class="literal">True</span>)</span><br><span class="line">        super(Linear,self).build(input_shape) <span class="comment"># 相当于设置self.built = True</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#call方法一般定义正向传播运算逻辑，__call__方法调用了它。    </span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">call</span><span class="params">(self, inputs)</span>:</span> </span><br><span class="line">        <span class="keyword">return</span> tf.matmul(inputs, self.w) + self.b</span><br><span class="line"></span><br><span class="line">    <span class="comment">#如果要让自定义的Layer通过Functional API 组合成模型时可以序列化，需要自定义get_config方法。</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_config</span><span class="params">(self)</span>:</span>  </span><br><span class="line">        config = super(Linear, self).get_config()</span><br><span class="line">        config.update(&#123;<span class="string">'units'</span>: self.units&#125;)</span><br><span class="line">        <span class="keyword">return</span> config</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">linear = Linear(units = <span class="number">8</span>)</span><br><span class="line">print(linear.built)</span><br><span class="line"><span class="comment">#指定input_shape，显式调用build方法，第0维代表样本数量，用None填充</span></span><br><span class="line">linear.build(input_shape = (<span class="literal">None</span>,<span class="number">16</span>)) </span><br><span class="line">print(linear.built)</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">linear = Linear(units = <span class="number">16</span>)</span><br><span class="line">print(linear.built)</span><br><span class="line"><span class="comment">#如果built = False，调用__call__时会先调用build方法, 再调用call方法。</span></span><br><span class="line">linear(tf.random.uniform((<span class="number">100</span>,<span class="number">64</span>))) </span><br><span class="line">print(linear.built)</span><br><span class="line">config = linear.get_config()</span><br><span class="line">print(config)</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">tf.keras.backend.clear_session()</span><br><span class="line"></span><br><span class="line">model = models.Sequential()</span><br><span class="line"><span class="comment">#注意该处的input_shape会被模型加工，无需使用None代表样本数量维</span></span><br><span class="line">model.add(Linear(units = <span class="number">16</span>,input_shape = (<span class="number">64</span>,)))  </span><br><span class="line">print(<span class="string">"model.input_shape: "</span>,model.input_shape)</span><br><span class="line">print(<span class="string">"model.output_shape: "</span>,model.output_shape)</span><br><span class="line">model.summary()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印结果：</span></span><br><span class="line">model.input_shape:  (<span class="literal">None</span>, <span class="number">64</span>)</span><br><span class="line">model.output_shape:  (<span class="literal">None</span>, <span class="number">16</span>)</span><br><span class="line">Model: <span class="string">"sequential"</span></span><br><span class="line">_________________________________________________________________</span><br><span class="line">Layer (type)                 Output Shape              Param <span class="comment">#   </span></span><br><span class="line">=================================================================</span><br><span class="line">linear (Linear)              (<span class="literal">None</span>, <span class="number">16</span>)                <span class="number">1040</span>      </span><br><span class="line">=================================================================</span><br><span class="line">Total params: <span class="number">1</span>,<span class="number">040</span></span><br><span class="line">Trainable params: <span class="number">1</span>,<span class="number">040</span></span><br><span class="line">Non-trainable params: <span class="number">0</span></span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> TensorFlow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TensorFlow2.X学习笔记(5)--TensorFlow中阶API之数据管道</title>
      <link href="/2020/05/03/TensorFlow2-X%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-5-TensorFlow%E4%B8%AD%E9%98%B6API%E4%B9%8B%E6%95%B0%E6%8D%AE%E7%AE%A1%E9%81%93/"/>
      <url>/2020/05/03/TensorFlow2-X%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-5-TensorFlow%E4%B8%AD%E9%98%B6API%E4%B9%8B%E6%95%B0%E6%8D%AE%E7%AE%A1%E9%81%93/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="TensorFlow的中阶API"><a href="#TensorFlow的中阶API" class="headerlink" title="TensorFlow的中阶API"></a>TensorFlow的中阶API</h1><h2 id="【模型之墙】"><a href="#【模型之墙】" class="headerlink" title="【模型之墙】"></a>【模型之墙】</h2><p>TensorFlow的中阶API主要包括:</p><ul><li>数据管道(tf.data)</li><li>特征列(tf.feature_column)</li><li>激活函数(tf.nn)</li><li>模型层(tf.keras.layers)</li><li>损失函数(tf.keras.losses)</li><li>评估函数(tf.keras.metrics)</li><li>优化器(tf.keras.optimizers)</li><li>回调函数(tf.keras.callbacks)</li></ul><h2 id="一、数据管道Dataset"><a href="#一、数据管道Dataset" class="headerlink" title="一、数据管道Dataset"></a>一、数据管道Dataset</h2><blockquote><p>使用 <code>tf.data</code> API 可以构建数据输入管道，轻松处理大量的数据，不同的数据格式，以及不同的数据转换。</p></blockquote><blockquote><p>使用<code>tfrecoreds</code>文件的优点是压缩后文件较小，便于网络传播，加载速度较快。</p></blockquote><h3 id="1、从Numpy-array构建数据管道"><a href="#1、从Numpy-array构建数据管道" class="headerlink" title="1、从Numpy array构建数据管道"></a>1、从Numpy array构建数据管道</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从Numpy array构建数据管道</span></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> datasets </span><br><span class="line">iris = datasets.load_iris()</span><br><span class="line"></span><br><span class="line">ds1 = tf.data.Dataset.from_tensor_slices((iris[<span class="string">"data"</span>],iris[<span class="string">"target"</span>]))</span><br><span class="line"><span class="keyword">for</span> features,label <span class="keyword">in</span> ds1.take(<span class="number">5</span>):</span><br><span class="line">    print(features,label)</span><br></pre></td></tr></table></figure></div><h3 id="2、从-Pandas-DataFrame构建数据管道"><a href="#2、从-Pandas-DataFrame构建数据管道" class="headerlink" title="2、从 Pandas DataFrame构建数据管道"></a>2、从 Pandas DataFrame构建数据管道</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从 Pandas DataFrame构建数据管道</span></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> datasets </span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">iris = datasets.load_iris()</span><br><span class="line">dfiris = pd.DataFrame(iris[<span class="string">"data"</span>],columns = iris.feature_names)</span><br><span class="line">ds2 = tf.data.Dataset.from_tensor_slices((dfiris.to_dict(<span class="string">"list"</span>),iris[<span class="string">"target"</span>]))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> features,label <span class="keyword">in</span> ds2.take(<span class="number">3</span>):</span><br><span class="line">    print(features,label)</span><br></pre></td></tr></table></figure></div><h3 id="3、从Python-generator构建数据管道"><a href="#3、从Python-generator构建数据管道" class="headerlink" title="3、从Python generator构建数据管道"></a>3、从Python generator构建数据管道</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从Python generator构建数据管道</span></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt </span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.preprocessing.image <span class="keyword">import</span> ImageDataGenerator</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个从文件中读取图片的generator</span></span><br><span class="line">image_generator = ImageDataGenerator(rescale=<span class="number">1.0</span>/<span class="number">255</span>).flow_from_directory(</span><br><span class="line">                    <span class="string">"./data/cifar2/test/"</span>,</span><br><span class="line">                    target_size=(<span class="number">32</span>, <span class="number">32</span>),</span><br><span class="line">                    batch_size=<span class="number">20</span>,</span><br><span class="line">                    class_mode=<span class="string">'binary'</span>)</span><br><span class="line"></span><br><span class="line">classdict = image_generator.class_indices</span><br><span class="line">print(classdict)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generator</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> features,label <span class="keyword">in</span> image_generator:</span><br><span class="line">        <span class="keyword">yield</span> (features,label)</span><br><span class="line"></span><br><span class="line">ds3 = tf.data.Dataset.from_generator(generator,output_types=(tf.float32,tf.int32))</span><br></pre></td></tr></table></figure></div><h3 id="4、从csv文件构建数据管道"><a href="#4、从csv文件构建数据管道" class="headerlink" title="4、从csv文件构建数据管道"></a>4、从csv文件构建数据管道</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从csv文件构建数据管道</span></span><br><span class="line">ds4 = tf.data.experimental.make_csv_dataset(</span><br><span class="line">      file_pattern = [<span class="string">"./data/titanic/train.csv"</span>,<span class="string">"./data/titanic/test.csv"</span>],</span><br><span class="line">      batch_size=<span class="number">3</span>, </span><br><span class="line">      label_name=<span class="string">"Survived"</span>,</span><br><span class="line">      na_value=<span class="string">""</span>,</span><br><span class="line">      num_epochs=<span class="number">1</span>,</span><br><span class="line">      ignore_errors=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> data,label <span class="keyword">in</span> ds4.take(<span class="number">2</span>):</span><br><span class="line">    print(data,label)</span><br></pre></td></tr></table></figure></div><h3 id="5、从文本文件构建数据管道"><a href="#5、从文本文件构建数据管道" class="headerlink" title="5、从文本文件构建数据管道"></a>5、从文本文件构建数据管道</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从文本文件构建数据管道</span></span><br><span class="line">ds5 = tf.data.TextLineDataset(</span><br><span class="line">    filenames = [<span class="string">"./data/titanic/train.csv"</span>,<span class="string">"./data/titanic/test.csv"</span>]</span><br><span class="line">    ).skip(<span class="number">1</span>) <span class="comment">#略去第一行header</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> ds5.take(<span class="number">5</span>):</span><br><span class="line">    print(line)</span><br></pre></td></tr></table></figure></div><h3 id="6、从文件路径构建数据管道"><a href="#6、从文件路径构建数据管道" class="headerlink" title="6、从文件路径构建数据管道"></a>6、从文件路径构建数据管道</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ds6 = tf.data.Dataset.list_files(<span class="string">"./data/cifar2/train/*/*.jpg"</span>)</span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> ds6.take(<span class="number">5</span>):</span><br><span class="line">    print(file)</span><br></pre></td></tr></table></figure></div><h3 id="7、从tfrecords文件构建数据管道"><a href="#7、从tfrecords文件构建数据管道" class="headerlink" title="7、从tfrecords文件构建数据管道"></a>7、从tfrecords文件构建数据管道</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># inpath：原始数据路径 outpath:TFRecord文件输出路径</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_tfrecords</span><span class="params">(inpath,outpath)</span>:</span> </span><br><span class="line">    writer = tf.io.TFRecordWriter(outpath)</span><br><span class="line">    dirs = os.listdir(inpath)</span><br><span class="line">    <span class="keyword">for</span> index, name <span class="keyword">in</span> enumerate(dirs):</span><br><span class="line">        class_path = inpath +<span class="string">"/"</span>+ name+<span class="string">"/"</span></span><br><span class="line">        <span class="keyword">for</span> img_name <span class="keyword">in</span> os.listdir(class_path):</span><br><span class="line">            img_path = class_path + img_name</span><br><span class="line">            img = tf.io.read_file(img_path)</span><br><span class="line">            <span class="comment">#img = tf.image.decode_image(img)</span></span><br><span class="line">            <span class="comment">#img = tf.image.encode_jpeg(img) #统一成jpeg格式压缩</span></span><br><span class="line">            example = tf.train.Example(</span><br><span class="line">               features=tf.train.Features(feature=&#123;</span><br><span class="line">                    <span class="string">'label'</span>: tf.train.Feature(int64_list=tf.train.Int64List(value=[index])),</span><br><span class="line">                    <span class="string">'img_raw'</span>: tf.train.Feature(bytes_list=tf.train.BytesList(value=[img.numpy()]))</span><br><span class="line">               &#125;))</span><br><span class="line">            writer.write(example.SerializeToString())</span><br><span class="line">    writer.close()</span><br><span class="line"><span class="comment"># 将数据打包成tfrecord文件</span></span><br><span class="line">create_tfrecords(<span class="string">"./data/cifar2/test/"</span>,<span class="string">"./data/cifar2_test.tfrecords/"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_example</span><span class="params">(proto)</span>:</span></span><br><span class="line">    description =&#123; <span class="string">'img_raw'</span> : tf.io.FixedLenFeature([], tf.string),</span><br><span class="line">                   <span class="string">'label'</span>: tf.io.FixedLenFeature([], tf.int64)&#125; </span><br><span class="line">    example = tf.io.parse_single_example(proto, description)</span><br><span class="line">    img = tf.image.decode_jpeg(example[<span class="string">"img_raw"</span>])   <span class="comment">#注意此处为jpeg格式</span></span><br><span class="line">    img = tf.image.resize(img, (<span class="number">32</span>,<span class="number">32</span>))</span><br><span class="line">    label = example[<span class="string">"label"</span>]</span><br><span class="line">    <span class="keyword">return</span>(img,label)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取tfrecord文件</span></span><br><span class="line">ds7 = tf.data.TFRecordDataset(<span class="string">"./data/cifar2_test.tfrecords"</span>).map(parse_example).shuffle(<span class="number">3000</span>)</span><br></pre></td></tr></table></figure></div><h2 id="二、应用数据转换"><a href="#二、应用数据转换" class="headerlink" title="二、应用数据转换"></a>二、应用数据转换</h2><p><strong>Dataset</strong>数据结构应用非常灵活，因为它本质上是一个Sequece序列，其每个元素可以是各种类型，例如可以是<strong>张量，列表，字典，也可以是Dataset。</strong></p><p>Dataset包含了非常丰富的数据转换功能。</p><ul><li><p><code>map</code>: 将转换函数映射到数据集每一个元素。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#map:将转换函数映射到数据集每一个元素</span></span><br><span class="line">ds = tf.data.Dataset.from_tensor_slices([<span class="string">"hello world"</span>,<span class="string">"hello China"</span>,<span class="string">"hello Beijing"</span>])</span><br><span class="line">ds_map = ds.map(<span class="keyword">lambda</span> x:tf.strings.split(x,<span class="string">" "</span>))</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> ds_map:</span><br><span class="line">    print(x)</span><br></pre></td></tr></table></figure></div></li><li><p><code>flat_map</code>: 将转换函数映射到数据集的每一个元素，并将嵌套的Dataset压平。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">ds = tf.data.Dataset.from_tensor_slices([<span class="string">"hello world"</span>,<span class="string">"hello China"</span>,<span class="string">"hello Beijing"</span>])</span><br><span class="line">ds_flatmap = ds.flat_map(<span class="keyword">lambda</span> x:tf.data.Dataset</span><br><span class="line">                         .from_tensor_slices(tf.strings.split(x,<span class="string">" "</span>)))</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> ds_flatmap:</span><br><span class="line">    tf.print(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印结果：</span></span><br><span class="line">    hello</span><br><span class="line">    world</span><br><span class="line">    hello</span><br><span class="line">    China</span><br><span class="line">    hello</span><br><span class="line">    Beijing</span><br></pre></td></tr></table></figure></div></li><li><p><code>interleave</code>: 效果类似flat_map,但可以将不同来源的数据夹在一起。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ds = tf.data.Dataset.from_tensor_slices([<span class="string">"hello world"</span>,<span class="string">"hello China"</span>,<span class="string">"hello Beijing"</span>])</span><br><span class="line">ds_interleave = ds.interleave(<span class="keyword">lambda</span> x:tf.data.Dataset.from_tensor_slices(tf.strings.split(x,<span class="string">" "</span>)))</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> ds_interleave:</span><br><span class="line">    print(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印结果</span></span><br><span class="line">    tf.Tensor(<span class="string">b'hello'</span>, shape=(), dtype=string)</span><br><span class="line">    tf.Tensor(<span class="string">b'hello'</span>, shape=(), dtype=string)</span><br><span class="line">    tf.Tensor(<span class="string">b'hello'</span>, shape=(), dtype=string)</span><br><span class="line">    tf.Tensor(<span class="string">b'world'</span>, shape=(), dtype=string)</span><br><span class="line">    tf.Tensor(<span class="string">b'China'</span>, shape=(), dtype=string)</span><br><span class="line">    tf.Tensor(<span class="string">b'Beijing'</span>, shape=(), dtype=string)</span><br></pre></td></tr></table></figure></div></li><li><p><code>filter</code>: 过滤掉某些元素。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#找出含有字母a或B的元素</span></span><br><span class="line">ds_filter = ds.filter(<span class="keyword">lambda</span> x: tf.strings.regex_full_match(x, <span class="string">".*[a|B].*"</span>))</span><br></pre></td></tr></table></figure></div></li><li><p><code>zip</code>: 将三个长度相同的Dataset横向铰合。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#zip:将三个长度相同的Dataset横向铰合。</span></span><br><span class="line"></span><br><span class="line">ds1 = tf.data.Dataset.range(<span class="number">0</span>,<span class="number">3</span>)</span><br><span class="line">ds2 = tf.data.Dataset.range(<span class="number">3</span>,<span class="number">6</span>)</span><br><span class="line">ds3 = tf.data.Dataset.range(<span class="number">6</span>,<span class="number">9</span>)</span><br><span class="line">ds_zip = tf.data.Dataset.zip((ds1,ds2,ds3))</span><br><span class="line"><span class="keyword">for</span> x,y,z <span class="keyword">in</span> ds_zip:</span><br><span class="line">    print(x.numpy(),y.numpy(),z.numpy())</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 打印结果</span></span><br><span class="line">    <span class="number">0</span> <span class="number">3</span> <span class="number">6</span></span><br><span class="line">    <span class="number">1</span> <span class="number">4</span> <span class="number">7</span></span><br><span class="line">    <span class="number">2</span> <span class="number">5</span> <span class="number">8</span></span><br></pre></td></tr></table></figure></div></li><li><p><code>concatenate</code>: 将两个Dataset纵向连接。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">ds1 = tf.data.Dataset.range(<span class="number">0</span>,<span class="number">3</span>)</span><br><span class="line">ds2 = tf.data.Dataset.range(<span class="number">3</span>,<span class="number">6</span>)</span><br><span class="line">ds_concat = tf.data.Dataset.concatenate(ds1,ds2)</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> ds_concat:</span><br><span class="line">    tf.print(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印结果</span></span><br><span class="line">    <span class="number">0</span></span><br><span class="line">    <span class="number">1</span></span><br><span class="line">    <span class="number">2</span></span><br><span class="line">    <span class="number">3</span></span><br><span class="line">    <span class="number">4</span></span><br><span class="line">    <span class="number">5</span></span><br></pre></td></tr></table></figure></div></li><li><p><code>reduce</code>: 执行归并操作。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ds = tf.data.Dataset.from_tensor_slices([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5.0</span>])</span><br><span class="line">result = ds.reduce(<span class="number">0.0</span>,<span class="keyword">lambda</span> x,y:tf.add(x,y))</span><br><span class="line">tf.print(result)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印结果</span></span><br><span class="line"><span class="number">15</span></span><br></pre></td></tr></table></figure></div></li><li><p><code>batch</code> : 构建批次，每次放一个批次。比原始数据增加一个维度。 其逆操作为unbatch。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ds = tf.data.Dataset.range(<span class="number">12</span>)</span><br><span class="line">ds_batch = ds.batch(<span class="number">3</span>)</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> ds_batch:</span><br><span class="line">    tf.print(x)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 打印结果</span></span><br><span class="line">    [<span class="number">0</span> <span class="number">1</span> <span class="number">2</span>]</span><br><span class="line">    [<span class="number">3</span> <span class="number">4</span> <span class="number">5</span>]</span><br><span class="line">    [<span class="number">6</span> <span class="number">7</span> <span class="number">8</span>]</span><br><span class="line">    [<span class="number">9</span> <span class="number">10</span> <span class="number">11</span>]</span><br></pre></td></tr></table></figure></div></li><li><p><code>padded_batch</code>: 构建批次，类似batch, 但可以填充到相同的形状。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">elements = [[<span class="number">1</span>, <span class="number">2</span>],[<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>],[<span class="number">6</span>, <span class="number">7</span>],[<span class="number">8</span>]]</span><br><span class="line">ds = tf.data.Dataset.from_generator(<span class="keyword">lambda</span>: iter(elements), tf.int32)</span><br><span class="line"></span><br><span class="line">ds_padded_batch = ds.padded_batch(<span class="number">2</span>,padded_shapes = [<span class="number">4</span>,])</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> ds_padded_batch:</span><br><span class="line">    tf.print(x)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment"># 打印结果：</span></span><br><span class="line">tf.Tensor(</span><br><span class="line">[[<span class="number">1</span> <span class="number">2</span> <span class="number">0</span> <span class="number">0</span>]</span><br><span class="line"> [<span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">0</span>]], shape=(<span class="number">2</span>, <span class="number">4</span>), dtype=int32)</span><br><span class="line">tf.Tensor(</span><br><span class="line">[[<span class="number">6</span> <span class="number">7</span> <span class="number">0</span> <span class="number">0</span>]</span><br><span class="line"> [<span class="number">8</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>]], shape=(<span class="number">2</span>, <span class="number">4</span>), dtype=int32)</span><br></pre></td></tr></table></figure></div></li><li><p><code>window</code> :构建滑动窗口，返回Dataset of Dataset.</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ds = tf.data.Dataset.range(<span class="number">12</span>)</span><br><span class="line"><span class="comment">#window返回的是Dataset of Dataset,可以用flat_map压平</span></span><br><span class="line">ds_window = ds.window(<span class="number">3</span>, shift=<span class="number">1</span>).flat_map(<span class="keyword">lambda</span> x: x.batch(<span class="number">3</span>,drop_remainder=<span class="literal">True</span>)) </span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> ds_window:</span><br><span class="line">    print(x)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 打印结果：</span></span><br><span class="line">    tf.Tensor([<span class="number">0</span> <span class="number">1</span> <span class="number">2</span>], shape=(<span class="number">3</span>,), dtype=int64)</span><br><span class="line">    tf.Tensor([<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>], shape=(<span class="number">3</span>,), dtype=int64)</span><br><span class="line">    tf.Tensor([<span class="number">2</span> <span class="number">3</span> <span class="number">4</span>], shape=(<span class="number">3</span>,), dtype=int64)</span><br><span class="line">    tf.Tensor([<span class="number">3</span> <span class="number">4</span> <span class="number">5</span>], shape=(<span class="number">3</span>,), dtype=int64)</span><br><span class="line">    tf.Tensor([<span class="number">4</span> <span class="number">5</span> <span class="number">6</span>], shape=(<span class="number">3</span>,), dtype=int64)</span><br></pre></td></tr></table></figure></div></li><li><p><code>shuffle</code>: 数据顺序洗牌。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ds = tf.data.Dataset.range(<span class="number">12</span>)</span><br><span class="line">ds_shuffle = ds.shuffle(buffer_size = <span class="number">5</span>)</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> ds_shuffle:</span><br><span class="line">    print(x)</span><br></pre></td></tr></table></figure></div></li><li><p><code>repeat</code>: 重复数据若干次，不带参数时，重复无数次。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">ds = tf.data.Dataset.range(<span class="number">3</span>)</span><br><span class="line">ds_repeat = ds.repeat(<span class="number">3</span>)</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> ds_repeat:</span><br><span class="line">    print(x)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 打印结果：</span></span><br><span class="line">tf.Tensor(<span class="number">0</span>, shape=(), dtype=int64)</span><br><span class="line">tf.Tensor(<span class="number">1</span>, shape=(), dtype=int64)</span><br><span class="line">tf.Tensor(<span class="number">2</span>, shape=(), dtype=int64)</span><br><span class="line">tf.Tensor(<span class="number">0</span>, shape=(), dtype=int64)</span><br><span class="line">tf.Tensor(<span class="number">1</span>, shape=(), dtype=int64)</span><br><span class="line">tf.Tensor(<span class="number">2</span>, shape=(), dtype=int64)</span><br><span class="line">tf.Tensor(<span class="number">0</span>, shape=(), dtype=int64)</span><br><span class="line">tf.Tensor(<span class="number">1</span>, shape=(), dtype=int64)</span><br><span class="line">tf.Tensor(<span class="number">2</span>, shape=(), dtype=int64)</span><br></pre></td></tr></table></figure></div></li><li><p><code>shard</code>: 采样，从某个位置开始隔固定距离采样一个元素。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ds = tf.data.Dataset.range(<span class="number">12</span>)</span><br><span class="line">ds_shard = ds.shard(<span class="number">3</span>,index = <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> ds_shard:</span><br><span class="line">    print(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印结果：</span></span><br><span class="line">tf.Tensor(<span class="number">1</span>, shape=(), dtype=int64)</span><br><span class="line">tf.Tensor(<span class="number">4</span>, shape=(), dtype=int64)</span><br><span class="line">tf.Tensor(<span class="number">7</span>, shape=(), dtype=int64)</span><br><span class="line">tf.Tensor(<span class="number">10</span>, shape=(), dtype=int64)</span><br></pre></td></tr></table></figure></div></li><li><p><code>take</code>: 采样，从开始位置取前几个元素。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ds = tf.data.Dataset.range(<span class="number">12</span>)</span><br><span class="line">ds_take = ds.take(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">list(ds_take.as_numpy_iterator())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印结果</span></span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br></pre></td></tr></table></figure></div></li></ul><h2 id="三、提升管道性能"><a href="#三、提升管道性能" class="headerlink" title="三、提升管道性能"></a>三、提升管道性能</h2><p>模型训练的耗时主要来自于两个部分，一部分来自<strong>数据准备</strong>，另一部分来自<strong>参数迭代</strong>。</p><p>参数迭代过程的耗时通常依赖于GPU来提升。</p><p>而数据准备过程的耗时则可以通过<strong>构建高效的数据管道</strong>进行提升。</p><p>以下是一些构建高效数据管道的建议。</p><ul><li><p>1，使用 <code>prefetch</code> 方法让数据准备和参数迭代两个过程相互并行。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line"><span class="comment">#打印时间分割线</span></span><br><span class="line"><span class="meta">@tf.function</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printbar</span><span class="params">()</span>:</span></span><br><span class="line">    ts = tf.timestamp()</span><br><span class="line">    today_ts = ts%(<span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span>)</span><br><span class="line"></span><br><span class="line">    hour = tf.cast(today_ts//<span class="number">3600</span>+<span class="number">8</span>,tf.int32)%tf.constant(<span class="number">24</span>)</span><br><span class="line">    minite = tf.cast((today_ts%<span class="number">3600</span>)//<span class="number">60</span>,tf.int32)</span><br><span class="line">    second = tf.cast(tf.floor(today_ts%<span class="number">60</span>),tf.int32)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">timeformat</span><span class="params">(m)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> tf.strings.length(tf.strings.format(<span class="string">"&#123;&#125;"</span>,m))==<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span>(tf.strings.format(<span class="string">"0&#123;&#125;"</span>,m))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span>(tf.strings.format(<span class="string">"&#123;&#125;"</span>,m))</span><br><span class="line"></span><br><span class="line">    timestring = tf.strings.join([timeformat(hour),timeformat(minite),</span><br><span class="line">                timeformat(second)],separator = <span class="string">":"</span>)</span><br><span class="line">    tf.print(<span class="string">"=========="</span>*<span class="number">8</span>,end = <span class="string">""</span>)</span><br><span class="line">    tf.print(timestring)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># tf.data.experimental.AUTOTUNE 可以让程序自动选择合适的参数</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> ds.prefetch(buffer_size = tf.data.experimental.AUTOTUNE):</span><br><span class="line">    train_step()</span><br></pre></td></tr></table></figure></div></li><li><p>2，使用 <code>interleave</code> 方法可以让数据读取过程多进程执行,并将不同来源数据夹在一起。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ds_files = tf.data.Dataset.list_files(<span class="string">"./data/titanic/*.csv"</span>)</span><br><span class="line"><span class="comment"># ds = ds_files.flat_map(lambda x:tf.data.TextLineDataset(x).skip(1))</span></span><br><span class="line"><span class="comment"># 使用interleave()方法代替flat_map()方法</span></span><br><span class="line">ds = ds_files.interleave(<span class="keyword">lambda</span> x:tf.data.TextLineDataset(x).skip(<span class="number">1</span>))</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> ds.take(<span class="number">8</span>):</span><br><span class="line">    print(line)</span><br></pre></td></tr></table></figure></div></li><li><p>3，使用 <code>map</code> 时设置<code>num_parallel_calls</code> 让数据转换过程多进行执行。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">ds = tf.data.Dataset.list_files(<span class="string">"./data/cifar2/train/*/*.jpg"</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_image</span><span class="params">(img_path,size = <span class="params">(<span class="number">32</span>,<span class="number">32</span>)</span>)</span>:</span></span><br><span class="line">    label = <span class="number">1</span> <span class="keyword">if</span> tf.strings.regex_full_match(img_path,<span class="string">".*/automobile/.*"</span>) <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">    img = tf.io.read_file(img_path)</span><br><span class="line">    img = tf.image.decode_jpeg(img) <span class="comment">#注意此处为jpeg格式</span></span><br><span class="line">    img = tf.image.resize(img,size)</span><br><span class="line">    <span class="keyword">return</span>(img,label)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#多进程转换</span></span><br><span class="line">printbar()</span><br><span class="line">tf.print(tf.constant(<span class="string">"start parallel transformation..."</span>))</span><br><span class="line"></span><br><span class="line">ds_map_parallel = ds.map(load_image,num_parallel_calls = tf.data.experimental.AUTOTUNE)</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> ds_map_parallel:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></div></li><li><p>4，使用 <code>cache</code> 方法让数据在第一个<code>epoch</code>后缓存到内存中，仅限于数据集不大情形。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模拟数据准备</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generator</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">        <span class="comment">#假设每次准备数据需要2s</span></span><br><span class="line">        time.sleep(<span class="number">2</span>) </span><br><span class="line">        <span class="keyword">yield</span> i </span><br><span class="line">        </span><br><span class="line"><span class="comment"># 使用 cache 方法让数据在第一个epoch后缓存到内存中，仅限于数据集不大情形。</span></span><br><span class="line">ds = tf.data.Dataset.from_generator(generator,output_types = (tf.int32)).cache()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模拟参数迭代</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train_step</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#假设每一步训练需要0s</span></span><br><span class="line">    time.sleep(<span class="number">0</span>)</span><br></pre></td></tr></table></figure></div></li><li><p>5，使用 <code>map</code>转换时，先<code>batch</code>, 然后采用向量化的转换方法对每个batch进行转换。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#先batch后map</span></span><br><span class="line">ds = tf.data.Dataset.range(<span class="number">100000</span>)</span><br><span class="line">ds_batch_map = ds.batch(<span class="number">20</span>).map(<span class="keyword">lambda</span> x:x**<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">printbar()</span><br><span class="line">tf.print(tf.constant(<span class="string">"start vector transformation..."</span>))</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> ds_batch_map:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">printbar()</span><br><span class="line">tf.print(tf.constant(<span class="string">"end vector transformation..."</span>))</span><br></pre></td></tr></table></figure></div></li></ul>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> TensorFlow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TensorFlow2.X学习笔记(4)--TensorFlow低阶API之AutoGraph相关研究</title>
      <link href="/2020/05/02/TensorFlow2-X%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-4-TensorFlow%E4%BD%8E%E9%98%B6API%E4%B9%8BAutoGraph%E7%9B%B8%E5%85%B3%E7%A0%94%E7%A9%B6/"/>
      <url>/2020/05/02/TensorFlow2-X%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-4-TensorFlow%E4%BD%8E%E9%98%B6API%E4%B9%8BAutoGraph%E7%9B%B8%E5%85%B3%E7%A0%94%E7%A9%B6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="AutoGraph相关研究"><a href="#AutoGraph相关研究" class="headerlink" title="AutoGraph相关研究"></a>AutoGraph相关研究</h1><p>TensorFlow 2.0主要使用的是动态计算图和Autograph。</p><p>动态计算图易于调试，编码效率较高，但执行效率偏低。</p><p>静态计算图执行效率很高，但较难调试。</p><p>而Autograph机制可以将动态图转换成静态计算图，兼收执行效率和编码效率之利。</p><p>当然Autograph机制能够转换的代码并不是没有任何约束的，有一些编码规范需要遵循，否则可能会转换失败或者不符合预期。</p><h2 id="一、Autograph使用规范"><a href="#一、Autograph使用规范" class="headerlink" title="一、Autograph使用规范"></a>一、Autograph使用规范</h2><h3 id="1、规范总结"><a href="#1、规范总结" class="headerlink" title="1、规范总结"></a>1、规范总结</h3><ul><li>1，被<code>@tf.function</code>修饰的函数应尽可能使用TensorFlow中的函数而不是Python中的其他函数。例如使用tf.print而不是print，使用tf.range而不是range，使用<code>tf.constant(True)</code>而不是True.</li><li>2，避免在@tf.function修饰的函数内部定义tf.Variable.</li><li>3，被@tf.function修饰的函数不可修改该函数外部的Python列表或字典等数据结构变量。</li></ul><h3 id="2、规范解析"><a href="#2、规范解析" class="headerlink" title="2、规范解析"></a>2、规范解析</h3><p><strong>被@tf.function修饰的函数应尽量使用TensorFlow中的函数而不是Python中的其他函数。</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line"><span class="meta">@tf.function</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">np_random</span><span class="params">()</span>:</span></span><br><span class="line">    a = np.random.randn(<span class="number">3</span>,<span class="number">3</span>)</span><br><span class="line">    tf.print(a)</span><br><span class="line"></span><br><span class="line"><span class="meta">@tf.function</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tf_random</span><span class="params">()</span>:</span></span><br><span class="line">    a = tf.random.normal((<span class="number">3</span>,<span class="number">3</span>))</span><br><span class="line">    tf.print(a)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># np_random每次执行都是一样的结果</span></span><br><span class="line"><span class="comment"># tf_random每次执行都会有重新生成随机数。</span></span><br></pre></td></tr></table></figure></div><p><strong>避免在@tf.function修饰的函数内部定义tf.Variable.</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x = tf.Variable(<span class="number">1.0</span>,dtype=tf.float32)</span><br><span class="line"><span class="meta">@tf.function</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer_var</span><span class="params">()</span>:</span></span><br><span class="line">    x.assign_add(<span class="number">1.0</span>)</span><br><span class="line">    tf.print(x)</span><br></pre></td></tr></table></figure></div><p><strong>被@tf.function修饰的函数不可修改该函数外部的Python列表或字典等结构类型变量。</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">tensor_list = []</span><br><span class="line"></span><br><span class="line"><span class="meta">@tf.function #加上这一行切换成Autograph结果将不符合预期！！！</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">append_tensor</span><span class="params">(x)</span>:</span></span><br><span class="line">    tensor_list.append(x) <span class="comment">#测试在此处的tensor_list虽然使用append的方法，但是却起不到作用</span></span><br><span class="line">    <span class="keyword">return</span> tensor_list</span><br></pre></td></tr></table></figure></div><h2 id="二、Autograph机制原理"><a href="#二、Autograph机制原理" class="headerlink" title="二、Autograph机制原理"></a>二、Autograph机制原理</h2><h3 id="1、-tf-function"><a href="#1、-tf-function" class="headerlink" title="1、@tf.function"></a>1、@tf.function</h3><p><strong>当我们第一次调用这个被@tf.function装饰的函数时，后面到底发生了什么？</strong></p><ul><li><p>第一件事情是创建计算图。即创建一个静态计算图，跟踪执行一遍函数体中的Python代码，确定各个变量的Tensor类型，并根据执行顺序将算子添加到计算图中。 在这个过程中，如果开启了autograph=True(默认开启),会将Python控制流转换成TensorFlow图内控制流。 主要是将if语句转换成 tf.cond算子表达，将while和for循环语句转换成tf.while_loop算子表达，并在必要的时候添加 tf.control_dependencies指定执行顺序依赖关系。</p></li><li><p>第二件事情是执行计算图。</p></li></ul><h3 id="2、重新理解Autograph的编码规范"><a href="#2、重新理解Autograph的编码规范" class="headerlink" title="2、重新理解Autograph的编码规范"></a>2、重新理解Autograph的编码规范</h3><ul><li><p><strong>1，被@tf.function修饰的函数应尽量使用TensorFlow中的函数而不是Python中的其他函数。例如使用tf.print而不是print.</strong></p><p>解释：Python中的函数仅仅会在跟踪执行函数以创建静态图的阶段使用，普通Python函数是无法嵌入到静态计算图中的，所以 在计算图构建好之后再次调用的时候，这些Python函数并没有被计算，而TensorFlow中的函数则可以嵌入到计算图中。使用普通的Python函数会导致 被@tf.function修饰前【eager执行】和被@tf.function修饰后【静态图执行】的输出不一致。</p></li><li><p><strong>2，避免在@tf.function修饰的函数内部定义tf.Variable.</strong></p><p>解释：如果函数内部定义了tf.Variable,那么在【eager执行】时，这种创建tf.Variable的行为在每次函数调用时候都会发生。但是在【静态图执行】时，这种创建tf.Variable的行为只会发生在第一步跟踪Python代码逻辑创建计算图时，这会导致被@tf.function修饰前【eager执行】和被@tf.function修饰后【静态图执行】的输出不一致。实际上，TensorFlow在这种情况下一般会报错。</p></li><li><p><strong>3，被@tf.function修饰的函数不可修改该函数外部的Python列表或字典等数据结构变量。</strong></p><p>解释：静态计算图是被编译成C++代码在TensorFlow内核中执行的。Python中的列表和字典等数据结构变量是无法嵌入到计算图中，它们仅仅能够在创建计算图时被读取，在执行计算图时是无法修改Python中的列表或字典这样的数据结构变量的。</p></li></ul><h2 id="三、tf-Module概述"><a href="#三、tf-Module概述" class="headerlink" title="三、tf.Module概述"></a>三、tf.Module概述</h2><p>​    TensorFlow提供了一个基类<code>tf.Module</code>，通过继承它构建子类，我们不仅可以获得以上的自然而然，而且可以非常方便地管理变量，还可以非常方便地管理它引用的其它Module，而且我们能够利用<code>tf.saved_model</code>保存模型并实现跨平台部署使用。``</p><p>​    实际上，<code>tf.keras.models.Model,tf.keras.layers.Layer</code> 都是继承自<code>tf.Module</code>的，提供了方便的变量管理和所引用的子模块管理的功能。</p><h3 id="1、tf-Module"><a href="#1、tf-Module" class="headerlink" title="1、tf.Module"></a>1、tf.Module</h3><p><strong>因此，利用tf.Module提供的封装，再结合TensoFlow丰富的低阶API，实际上我们能够基于TensorFlow开发任意机器学习模型(而非仅仅是神经网络模型)，并实现跨平台部署使用。</strong></p><blockquote><p>定义一个简单的function.</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf </span><br><span class="line">x = tf.Variable(<span class="number">1.0</span>,dtype=tf.float32)</span><br><span class="line"></span><br><span class="line"><span class="comment">#在tf.function中用input_signature限定输入张量的签名类型：shape和dtype,当a不符合这个标准，就会报错</span></span><br><span class="line"><span class="meta">@tf.function(input_signature=[tf.TensorSpec(shape = [], dtype = tf.float32)])    </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_print</span><span class="params">(a)</span>:</span></span><br><span class="line">    x.assign_add(a)</span><br><span class="line">    tf.print(x)</span><br><span class="line">    <span class="keyword">return</span>(x)</span><br></pre></td></tr></table></figure></div><blockquote><p>自定义module</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DemoModule</span><span class="params">(tf.Module)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,init_value = tf.constant<span class="params">(<span class="number">0.0</span>)</span>,name=None)</span>:</span></span><br><span class="line">        super(DemoModule, self).__init__(name=name)</span><br><span class="line">        <span class="keyword">with</span> self.name_scope:  <span class="comment">#相当于with tf.name_scope("demo_module")</span></span><br><span class="line">            self.x = tf.Variable(init_value,dtype = tf.float32,trainable=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">    @tf.function(input_signature=[tf.TensorSpec(shape = [], dtype = tf.float32)])  </span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addprint</span><span class="params">(self,a)</span>:</span></span><br><span class="line">        <span class="keyword">with</span> self.name_scope:</span><br><span class="line">            self.x.assign_add(a)</span><br><span class="line">            tf.print(self.x)</span><br><span class="line">            <span class="keyword">return</span>(self.x)</span><br><span class="line">        </span><br><span class="line"><span class="comment">#执行</span></span><br><span class="line">demo = DemoModule(init_value = tf.constant(<span class="number">1.0</span>))</span><br><span class="line">result = demo.addprint(tf.constant(<span class="number">5.0</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看模块中的全部变量和全部可训练变量</span></span><br><span class="line">print(demo.variables)</span><br><span class="line">print(demo.trainable_variables)</span><br><span class="line"><span class="comment">#查看模块中的全部子模块</span></span><br><span class="line">demo.submodules</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用tf.saved_model 保存模型，并指定需要跨平台部署的方法</span></span><br><span class="line">tf.saved_model.save(demo,<span class="string">"./data/demo/1"</span>,signatures = &#123;<span class="string">"serving_default"</span>:demo.addprint&#125;)</span><br><span class="line"><span class="comment">#加载模型</span></span><br><span class="line">demo2 = tf.saved_model.load(<span class="string">"./data/demo/1"</span>)</span><br><span class="line">demo2.addprint(tf.constant(<span class="number">5.0</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看模型文件相关信息，红框标出来的输出信息在模型部署和跨平台使用时有可能会用到</span></span><br><span class="line">!saved_model_cli show --dir ./data/demo/<span class="number">1</span> --all</span><br></pre></td></tr></table></figure></div><blockquote><p>在tensorboard中查看计算图，模块会被添加模块名demo_module,方便层次化呈现计算图结构。</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建日志</span></span><br><span class="line">stamp = datetime.datetime.now().strftime(<span class="string">"%Y%m%d-%H%M%S"</span>)</span><br><span class="line">logdir = <span class="string">'./data/demomodule/%s'</span> % stamp</span><br><span class="line">writer = tf.summary.create_file_writer(logdir)</span><br><span class="line"></span><br><span class="line"><span class="comment">#开启autograph跟踪</span></span><br><span class="line">tf.summary.trace_on(graph=<span class="literal">True</span>, profiler=<span class="literal">True</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment">#执行autograph</span></span><br><span class="line">demo = DemoModule(init_value = tf.constant(<span class="number">0.0</span>))</span><br><span class="line">result = demo.addprint(tf.constant(<span class="number">5.0</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#将计算图信息写入日志</span></span><br><span class="line"><span class="keyword">with</span> writer.as_default():</span><br><span class="line">    tf.summary.trace_export(</span><br><span class="line">        name=<span class="string">"demomodule"</span>,</span><br><span class="line">        step=<span class="number">0</span>,</span><br><span class="line">        profiler_outdir=logdir)</span><br></pre></td></tr></table></figure></div><blockquote><p>使用tensorboard</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#启动 tensorboard在jupyter中的魔法命令</span></span><br><span class="line"><span class="keyword">from</span> tensorboard <span class="keyword">import</span> notebook</span><br><span class="line">notebook.list()</span><br><span class="line">notebook.start(<span class="string">"--logdir ./data/demomodule/"</span>)</span><br></pre></td></tr></table></figure></div><p><a href="https://ae01.alicdn.com/kf/H1c4b8f2321884270b7b33ebc987197d6U.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://ae01.alicdn.com/kf/H1c4b8f2321884270b7b33ebc987197d6U.jpg" class="lazyload"></a></p><blockquote><p>除了利用tf.Module的子类化实现封装，我们也可以通过给<code>tf.Module</code>添加属性的方法进行封装。</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mymodule = tf.Module()</span><br><span class="line">mymodule.x = tf.Variable(<span class="number">0.0</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@tf.function(input_signature=[tf.TensorSpec(shape = [], dtype = tf.float32)])  </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">addprint</span><span class="params">(a)</span>:</span></span><br><span class="line">    mymodule.x.assign_add(a)</span><br><span class="line">    tf.print(mymodule.x)</span><br><span class="line">    <span class="keyword">return</span> (mymodule.x)</span><br><span class="line"></span><br><span class="line">mymodule.addprint = addprint</span><br></pre></td></tr></table></figure></div><h3 id="2、tf-Module和tf-keras-Model，tf-keras-layers-Layer"><a href="#2、tf-Module和tf-keras-Model，tf-keras-layers-Layer" class="headerlink" title="2、tf.Module和tf.keras.Model，tf.keras.layers.Layer"></a>2、tf.Module和tf.keras.Model，tf.keras.layers.Layer</h3><blockquote><p>tf.keras中的模型和层都是继承tf.Module实现的，也具有变量管理和子模块管理功能。</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras <span class="keyword">import</span> models,layers,losses,metrics</span><br><span class="line"></span><br><span class="line">tf.keras.backend.clear_session() </span><br><span class="line"></span><br><span class="line">model = models.Sequential()</span><br><span class="line"></span><br><span class="line">model.add(layers.Dense(<span class="number">4</span>,input_shape = (<span class="number">10</span>,)))</span><br><span class="line">model.add(layers.Dense(<span class="number">2</span>))</span><br><span class="line">model.add(layers.Dense(<span class="number">1</span>))</span><br><span class="line">model.summary()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印结果：</span></span><br><span class="line">Model: <span class="string">"sequential"</span></span><br><span class="line">_________________________________________________________________</span><br><span class="line">Layer (type)                 Output Shape              Param <span class="comment">#   </span></span><br><span class="line">=================================================================</span><br><span class="line">dense (Dense)                (<span class="literal">None</span>, <span class="number">4</span>)                 <span class="number">44</span>        </span><br><span class="line">_________________________________________________________________</span><br><span class="line">dense_1 (Dense)              (<span class="literal">None</span>, <span class="number">2</span>)                 <span class="number">10</span>        </span><br><span class="line">_________________________________________________________________</span><br><span class="line">dense_2 (Dense)              (<span class="literal">None</span>, <span class="number">1</span>)                 <span class="number">3</span>         </span><br><span class="line">=================================================================</span><br><span class="line">Total params: <span class="number">57</span></span><br><span class="line">Trainable params: <span class="number">57</span></span><br><span class="line">Non-trainable params: <span class="number">0</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="comment"># 获得model中的变量</span></span><br><span class="line">model.variables</span><br><span class="line"><span class="comment"># 获得model中的可训练变量</span></span><br><span class="line">model.trainable_variables</span><br><span class="line">model.layers[<span class="number">0</span>].trainable = <span class="literal">False</span> <span class="comment">#冻结第0层的变量,使其不可训练</span></span><br><span class="line"></span><br><span class="line">model.submodules <span class="comment">#获得每层model的情况</span></span><br><span class="line"><span class="comment">## Sequence of all sub-modules.</span></span><br><span class="line"><span class="comment">## Submodules are modules which are properties of this module, or found as</span></span><br><span class="line"><span class="comment">## properties of modules which are properties of this module (and so on).</span></span><br><span class="line"></span><br><span class="line">model.layers</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> TensorFlow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TensorFlow2.X学习笔记(3)--TensorFlow低阶API之张量</title>
      <link href="/2020/05/02/TensorFlow2-X%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-3-TensorFlow%E4%BD%8E%E9%98%B6API%E4%B9%8B%E5%BC%A0%E9%87%8F/"/>
      <url>/2020/05/02/TensorFlow2-X%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-3-TensorFlow%E4%BD%8E%E9%98%B6API%E4%B9%8B%E5%BC%A0%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>TensorFlow的低阶API主要包括<code>张量操作</code>，<code>计算图</code>和<code>自动微分</code>。</p><p>如果把模型比作一个房子，那么低阶API就是<strong>【模型之砖】</strong>。</p><p>在低阶API层次上，可以把TensorFlow当做一个增强版的numpy来使用。</p><p>TensorFlow提供的方法比numpy更全面，运算速度更快，如果需要的话，还可以使用GPU进行加速。</p><h4 id="一、张量的结构操作"><a href="#一、张量的结构操作" class="headerlink" title="一、张量的结构操作"></a>一、张量的结构操作</h4><p>张量的操作主要包括张量的结构操作和张量的数学运算。</p><p><strong>张量结构操作</strong>诸如：<code>张量创建，索引切片，维度变换，合并分割</code>。</p><p><strong>张量数学运算</strong>主要有：<code>标量运算，向量运算，矩阵运算</code>。另外我们会介绍张量运算的广播机制。</p><p>Autograph计算图我们将介绍使用Autograph的规范建议，Autograph的机制原理，Autograph和tf.Module.</p><h5 id="1、创建张量"><a href="#1、创建张量" class="headerlink" title="1、创建张量"></a>1、创建张量</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1、创建一个一维张量</span></span><br><span class="line">a = tf.constant([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],dtype = tf.float32)</span><br><span class="line">tf.print(a)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、创建范围1-10，间隔为2的张量</span></span><br><span class="line">tf.print(tf.range(<span class="number">1</span>,<span class="number">10</span>,delta=<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3、0.0-6.18之间分成100份</span></span><br><span class="line">tf.print(tf.linspace(<span class="number">0.0</span>,<span class="number">2</span>*<span class="number">3.14</span>,<span class="number">100</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4、创建3*3的零向量</span></span><br><span class="line">tf.print(tf.zeros([<span class="number">3</span>,<span class="number">3</span>]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5、创建3*2,用5填充的张量</span></span><br><span class="line">tf.print( tf.fill([<span class="number">3</span>,<span class="number">2</span>],<span class="number">5</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6、均匀分布随机</span></span><br><span class="line">tf.random.set_seed(<span class="number">1.0</span>) <span class="comment">#Sets the global random seed.</span></span><br><span class="line">a = tf.random.uniform([<span class="number">5</span>],minval=<span class="number">0</span>,maxval=<span class="number">10</span>)</span><br><span class="line">tf.print(a)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 7、正态随机分布</span></span><br><span class="line">tf.print(tf.random.normal([<span class="number">3</span>,<span class="number">3</span>],mean=<span class="number">0.0</span>,stddev=<span class="number">1.0</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 8、正态分布随机，剔除2倍方差以外数据重新生成</span></span><br><span class="line">c = tf.random.truncated_normal((<span class="number">5</span>,<span class="number">5</span>), mean=<span class="number">0.0</span>, stddev=<span class="number">1.0</span>, dtype=tf.float32)</span><br><span class="line">tf.print(c)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印结果</span></span><br><span class="line"><span class="number">1</span>、[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]</span><br><span class="line"><span class="number">2</span>、[<span class="number">1</span> <span class="number">3</span> <span class="number">5</span> <span class="number">7</span> <span class="number">9</span>]</span><br><span class="line"><span class="number">3</span>、[<span class="number">0</span> <span class="number">0.0634343475</span> <span class="number">0.126868695</span> ... <span class="number">6.15313148</span> <span class="number">6.21656609</span> <span class="number">6.28</span>]</span><br><span class="line"><span class="number">4</span>、</span><br><span class="line">[[<span class="number">0</span> <span class="number">0</span> <span class="number">0</span>]</span><br><span class="line"> [<span class="number">0</span> <span class="number">0</span> <span class="number">0</span>]</span><br><span class="line"> [<span class="number">0</span> <span class="number">0</span> <span class="number">0</span>]]</span><br><span class="line"><span class="number">5</span>、</span><br><span class="line">[[<span class="number">5</span> <span class="number">5</span>]</span><br><span class="line"> [<span class="number">5</span> <span class="number">5</span>]</span><br><span class="line"> [<span class="number">5</span> <span class="number">5</span>]]</span><br><span class="line"></span><br><span class="line"><span class="number">6</span>、[<span class="number">2.91975141</span> <span class="number">2.06566453</span> <span class="number">5.35390759</span> <span class="number">5.61257458</span> <span class="number">4.16674519</span>]</span><br><span class="line"></span><br><span class="line"><span class="number">7</span>、[[<span class="number">1.06688023</span> <span class="number">0.194549292</span> <span class="number">-0.530828953</span>]</span><br><span class="line">   [<span class="number">0.0919008255</span> <span class="number">-0.177537084</span> <span class="number">-0.919308841</span>]</span><br><span class="line">   [<span class="number">-2.07775569</span> <span class="number">2.03919029</span> <span class="number">0.802899718</span>]]</span><br><span class="line"></span><br><span class="line"><span class="number">8</span>、</span><br><span class="line">[[<span class="number">-1.80412865</span> <span class="number">-0.111534528</span> <span class="number">-0.845551133</span> <span class="number">0.848961473</span> <span class="number">0.181714371</span>]</span><br><span class="line"> [<span class="number">0.0783366337</span> <span class="number">-0.772812247</span> <span class="number">0.510512829</span> <span class="number">1.09207666</span> <span class="number">-0.685003579</span>]</span><br><span class="line"> [<span class="number">-0.0209237766</span> <span class="number">-0.870738804</span> <span class="number">0.00304621807</span> <span class="number">0.29193154</span> <span class="number">-0.484454393</span>]</span><br><span class="line"> [<span class="number">1.13532615</span> <span class="number">-0.133236796</span> <span class="number">-0.620660245</span> <span class="number">1.43435645</span> <span class="number">-0.0828505158</span>]</span><br><span class="line"> [<span class="number">0.762984335</span> <span class="number">0.0506231971</span> <span class="number">-0.368702501</span> <span class="number">-0.46321547</span> <span class="number">-0.0791869536</span>]]</span><br></pre></td></tr></table></figure></div><h5 id="2、索引切片"><a href="#2、索引切片" class="headerlink" title="2、索引切片"></a>2、索引切片</h5><p>张量的索引切片方式和numpy几乎是一样的。切片时支持缺省参数和省略号。</p><p>对于<code>tf.Variable</code>,可以通过索引和切片对部分元素进行修改。</p><p>对于提取张量的连续子区域，也可以使用<code>tf.slice</code>.</p><p>此外，对于不规则的切片提取,可以使用<code>tf.gather,tf.gather_nd,tf.boolean_mask</code>。</p><p><code>tf.boolean_mask</code>功能最为强大，它可以实现<code>tf.gather,tf.gather_nd</code>的功能，并且<code>tf.boolean_mask</code>还可以实现布尔索引。</p><p>如果要通过修改张量的某些元素得到新的张量，可以使用<code>tf.where，tf.scatter_nd</code>。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">tf.random.set_seed(<span class="number">3</span>)</span><br><span class="line">t = tf.random.uniform([<span class="number">5</span>,<span class="number">5</span>],minval=<span class="number">0</span>,maxval=<span class="number">10</span>,dtype=tf.int32)</span><br><span class="line">tf.print(t)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line">[[<span class="number">4</span> <span class="number">7</span> <span class="number">4</span> <span class="number">2</span> <span class="number">9</span>]</span><br><span class="line"> [<span class="number">9</span> <span class="number">1</span> <span class="number">2</span> <span class="number">4</span> <span class="number">7</span>]</span><br><span class="line"> [<span class="number">7</span> <span class="number">2</span> <span class="number">7</span> <span class="number">4</span> <span class="number">0</span>]</span><br><span class="line"> [<span class="number">9</span> <span class="number">6</span> <span class="number">9</span> <span class="number">7</span> <span class="number">2</span>]</span><br><span class="line"> [<span class="number">3</span> <span class="number">7</span> <span class="number">0</span> <span class="number">0</span> <span class="number">3</span>]]</span><br><span class="line"></span><br><span class="line"><span class="comment">#第0行</span></span><br><span class="line">tf.print(t[<span class="number">0</span>]) <span class="comment">#[4 7 4 2 9]</span></span><br><span class="line"><span class="comment">#倒数第一行</span></span><br><span class="line">tf.print(t[<span class="number">-1</span>]) <span class="comment">#[3 7 0 0 3]</span></span><br><span class="line"><span class="comment">#第1行第3列</span></span><br><span class="line">tf.print(t[<span class="number">1</span>,<span class="number">3</span>])</span><br><span class="line">tf.print(t[<span class="number">1</span>][<span class="number">3</span>]) </span><br><span class="line"></span><br><span class="line"><span class="comment">#第1行至第3行</span></span><br><span class="line">tf.print(t[<span class="number">1</span>:<span class="number">4</span>,:])</span><br><span class="line">tf.print(tf.slice(t,[<span class="number">1</span>,<span class="number">0</span>],[<span class="number">3</span>,<span class="number">5</span>])) <span class="comment">#tf.slice(input,begin_vector,size_vector) 从[1,0]位置开始，寻找三行五列的数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#第1行至最后一行，第0列到最后一列每隔两列取一列</span></span><br><span class="line">tf.print(t[<span class="number">1</span>:<span class="number">4</span>,:<span class="number">4</span>:<span class="number">2</span>]) <span class="comment">#或者写成这样的：tf.print(t[1:4,0:4:2])</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#对变量来说，还可以使用索引和切片修改部分元素</span></span><br><span class="line">x = tf.Variable([[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>]],dtype = tf.float32)</span><br><span class="line">x[<span class="number">1</span>,:].assign(tf.constant([<span class="number">0.0</span>,<span class="number">0.0</span>]))</span><br><span class="line"></span><br><span class="line"><span class="comment">#省略号可以表示多个冒号</span></span><br><span class="line">a=tf.random.uniform([<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>],minval=<span class="number">0</span>,maxval=<span class="number">10</span>,dtype=tf.int32)</span><br><span class="line"><span class="comment"># a的值：</span></span><br><span class="line">[[[<span class="number">2</span>, <span class="number">2</span>, <span class="number">6</span>],</span><br><span class="line">        [<span class="number">5</span>, <span class="number">7</span>, <span class="number">6</span>],</span><br><span class="line">        [<span class="number">4</span>, <span class="number">8</span>, <span class="number">6</span>]],</span><br><span class="line"></span><br><span class="line">       [[<span class="number">4</span>, <span class="number">6</span>, <span class="number">3</span>],</span><br><span class="line">        [<span class="number">8</span>, <span class="number">1</span>, <span class="number">7</span>],</span><br><span class="line">        [<span class="number">3</span>, <span class="number">1</span>, <span class="number">3</span>]],</span><br><span class="line"></span><br><span class="line">       [[<span class="number">2</span>, <span class="number">1</span>, <span class="number">6</span>],</span><br><span class="line">        [<span class="number">3</span>, <span class="number">1</span>, <span class="number">8</span>],</span><br><span class="line">        [<span class="number">9</span>, <span class="number">3</span>, <span class="number">7</span>]]]</span><br><span class="line"> tf.print(a[...,<span class="number">1</span>]) <span class="comment">#等价于tf.print(a[:,:,1])</span></span><br><span class="line"><span class="comment"># 结果：</span></span><br><span class="line">[[<span class="number">2</span> <span class="number">7</span> <span class="number">8</span>]</span><br><span class="line"> [<span class="number">6</span> <span class="number">1</span> <span class="number">1</span>]</span><br><span class="line"> [<span class="number">1</span> <span class="number">1</span> <span class="number">3</span>]]</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment"># 考虑班级成绩册的例子，有4个班级，每个班级10个学生，每个学生7门科目成绩。可以用一个4107的张量来表示。</span></span><br><span class="line">scores = tf.random.uniform((<span class="number">4</span>,<span class="number">10</span>,<span class="number">7</span>),minval=<span class="number">0</span>,maxval=<span class="number">100</span>,dtype=tf.int32)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 抽取每个班级第0个学生，第5个学生，第9个学生的全部成绩</span></span><br><span class="line">p = tf.gather(scores,[<span class="number">0</span>,<span class="number">5</span>,<span class="number">9</span>],axis=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 抽取每个班级第0个学生，第5个学生，第9个学生的第1门课程，第3门课程，第6门课程成绩</span></span><br><span class="line">q = tf.gather(tf.gather(scores,[<span class="number">0</span>,<span class="number">5</span>,<span class="number">9</span>],axis=<span class="number">1</span>),[<span class="number">1</span>,<span class="number">3</span>,<span class="number">6</span>],axis=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 抽取第0个班级第0个学生，第2个班级的第4个学生，第3个班级的第6个学生的全部成绩</span></span><br><span class="line"><span class="comment"># indices的长度为采样样本的个数，每个元素为采样位置的坐标</span></span><br><span class="line">s = tf.gather_nd(scores,indices = [(<span class="number">0</span>,<span class="number">0</span>),(<span class="number">2</span>,<span class="number">4</span>),(<span class="number">3</span>,<span class="number">6</span>)])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 抽取每个班级第0个学生，第5个学生，第9个学生的全部成绩（等价位：tf.gather(scores,[0,5,9],axis=1)）</span></span><br><span class="line">p = tf.boolean_mask(scores,[<span class="literal">True</span>,<span class="literal">False</span>,<span class="literal">False</span>,<span class="literal">False</span>,<span class="literal">False</span>,</span><br><span class="line">                            <span class="literal">True</span>,<span class="literal">False</span>,<span class="literal">False</span>,<span class="literal">False</span>,<span class="literal">True</span>],axis=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#找到矩阵中小于0的元素</span></span><br><span class="line">c = tf.constant([[<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>],[<span class="number">2</span>,<span class="number">2</span>,<span class="number">-2</span>],[<span class="number">3</span>,<span class="number">-3</span>,<span class="number">3</span>]],dtype=tf.float32)</span><br><span class="line">tf.print(tf.boolean_mask(c,c&lt;<span class="number">0</span>),<span class="string">"\n"</span>) </span><br><span class="line">tf.print(c[c&lt;<span class="number">0</span>]) <span class="comment">#布尔索引，为boolean_mask的语法糖形式</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#找到张量中小于0的元素,将其换成np.nan得到新的张量</span></span><br><span class="line"><span class="comment">#tf.where和np.where作用类似，可以理解为if的张量版本</span></span><br><span class="line">c = tf.constant([[<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>],[<span class="number">2</span>,<span class="number">2</span>,<span class="number">-2</span>],[<span class="number">3</span>,<span class="number">-3</span>,<span class="number">3</span>]],dtype=tf.float32)</span><br><span class="line">d = tf.where(c&lt;<span class="number">0</span>,tf.fill(c.shape,np.nan),c) </span><br><span class="line"></span><br><span class="line"><span class="comment">#如果where只有一个参数，将返回所有满足条件的位置坐标</span></span><br><span class="line">indices = tf.where(c&lt;<span class="number">0</span>)</span><br><span class="line"><span class="comment">#将张量的第[0,0]和[2,1]两个位置元素替换为0得到新的张量</span></span><br><span class="line">d = c - tf.scatter_nd([[<span class="number">0</span>,<span class="number">0</span>],[<span class="number">2</span>,<span class="number">1</span>]],[c[<span class="number">0</span>,<span class="number">0</span>],c[<span class="number">2</span>,<span class="number">1</span>]],c.shape)</span><br><span class="line"></span><br><span class="line"><span class="comment">#scatter_nd的作用和gather_nd有些相反</span></span><br><span class="line"><span class="comment">#可以将某些值插入到一个给定shape的全0的张量的指定位置处。</span></span><br><span class="line">indices = tf.where(c&lt;<span class="number">0</span>)</span><br><span class="line">tf.scatter_nd(indices,tf.gather_nd(c,indices),c.shape)</span><br></pre></td></tr></table></figure></div><h5 id="3、维度变换"><a href="#3、维度变换" class="headerlink" title="3、维度变换"></a>3、维度变换</h5><p>维度变换相关函数主要有 tf.reshape, tf.squeeze, tf.expand_dims, tf.transpose.</p><ul><li><code>tf.reshape</code> 可以改变张量的形状。</li><li><code>tf.squeeze</code> 可以减少维度。如果张量在某个维度上只有一个元素，利用<code>tf.squeeze</code>可以消除这个维度。</li><li><code>tf.expand_dims</code> 可以增加维度。</li><li><code>tf.transpose</code> 可以交换维度，它会改变张量元素的存储顺序。<code>tf.transpose</code>常用于图片存储格式的变换上。</li></ul><p>tf.reshape可以改变张量的形状，但是其本质上不会改变张量元素的存储顺序，所以，该操作实际上非常迅速，并且是可逆的。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">tf.expand_dims(s,axis=<span class="number">0</span>) <span class="comment">#在第0维插入长度为1的一个维度</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Batch,Height,Width,Channel</span></span><br><span class="line">a = tf.random.uniform(shape=[<span class="number">100</span>,<span class="number">600</span>,<span class="number">600</span>,<span class="number">4</span>],minval=<span class="number">0</span>,maxval=<span class="number">255</span>,dtype=tf.int32)</span><br><span class="line">tf.print(a.shape)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 转换成 Channel,Height,Width,Batch</span></span><br><span class="line">s= tf.transpose(a,perm=[<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>])</span><br><span class="line">tf.print(s.shape)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果：perm中定义了维度顺序</span></span><br><span class="line">TensorShape([<span class="number">100</span>, <span class="number">600</span>, <span class="number">600</span>, <span class="number">4</span>])</span><br><span class="line">TensorShape([<span class="number">4</span>, <span class="number">600</span>, <span class="number">600</span>, <span class="number">100</span>])</span><br></pre></td></tr></table></figure></div><h5 id="4、合并分割"><a href="#4、合并分割" class="headerlink" title="4、合并分割"></a>4、合并分割</h5><p><code>tf.concat</code>和<code>tf.stack</code>有略微的区别，tf.concat是<strong>连接</strong>，不会增加维度，而tf.stack是<strong>堆叠</strong>，会增加维度。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">a = tf.constant([[<span class="number">1.0</span>,<span class="number">2.0</span>],[<span class="number">3.0</span>,<span class="number">4.0</span>]])</span><br><span class="line">b = tf.constant([[<span class="number">5.0</span>,<span class="number">6.0</span>],[<span class="number">7.0</span>,<span class="number">8.0</span>]])</span><br><span class="line">c = tf.constant([[<span class="number">9.0</span>,<span class="number">10.0</span>],[<span class="number">11.0</span>,<span class="number">12.0</span>]])</span><br><span class="line"></span><br><span class="line">tf.concat([a,b,c],axis = <span class="number">0</span>)</span><br><span class="line">&lt;tf.Tensor: shape=(<span class="number">6</span>, <span class="number">2</span>), dtype=float32, numpy=</span><br><span class="line">array([[ <span class="number">1.</span>,  <span class="number">2.</span>],</span><br><span class="line">       [ <span class="number">3.</span>,  <span class="number">4.</span>],</span><br><span class="line">       [ <span class="number">5.</span>,  <span class="number">6.</span>],</span><br><span class="line">       [ <span class="number">7.</span>,  <span class="number">8.</span>],</span><br><span class="line">       [ <span class="number">9.</span>, <span class="number">10.</span>],</span><br><span class="line">       [<span class="number">11.</span>, <span class="number">12.</span>]], dtype=float32)&gt;</span><br><span class="line"></span><br><span class="line">tf.stack([a,b,c])</span><br><span class="line">&lt;tf.Tensor: shape=(<span class="number">3</span>, <span class="number">2</span>, <span class="number">2</span>), dtype=float32, numpy=</span><br><span class="line">array([[[ <span class="number">1.</span>,  <span class="number">2.</span>],</span><br><span class="line">        [ <span class="number">3.</span>,  <span class="number">4.</span>]],</span><br><span class="line"></span><br><span class="line">       [[ <span class="number">5.</span>,  <span class="number">6.</span>],</span><br><span class="line">        [ <span class="number">7.</span>,  <span class="number">8.</span>]],</span><br><span class="line"></span><br><span class="line">       [[ <span class="number">9.</span>, <span class="number">10.</span>],</span><br><span class="line">        [<span class="number">11.</span>, <span class="number">12.</span>]]], dtype=float32)&gt;</span><br></pre></td></tr></table></figure></div><blockquote><p><code>tf.split</code>是tf.concat的逆运算，可以指定分割份数平均分割，也可以通过指定每份的记录数量进行分割。</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#tf.split(value,num_or_size_splits,axis)</span></span><br><span class="line">tf.split(c,<span class="number">3</span>,axis = <span class="number">0</span>)  <span class="comment">#指定分割份数，平均分割</span></span><br><span class="line"></span><br><span class="line">tf.split(c,[<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>],axis = <span class="number">0</span>) <span class="comment">#指定每份的记录数量</span></span><br></pre></td></tr></table></figure></div><h4 id="二、张量的数学运算"><a href="#二、张量的数学运算" class="headerlink" title="二、张量的数学运算"></a>二、张量的数学运算</h4><h5 id="1、标量运算"><a href="#1、标量运算" class="headerlink" title="1、标量运算"></a>1、标量运算</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">a = tf.constant([[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>]])</span><br><span class="line">a%<span class="number">3</span> <span class="comment">#mod的运算符重载，等价于m = tf.math.mod(a,3)</span></span><br><span class="line">a//<span class="number">3</span>  <span class="comment">#地板除法</span></span><br><span class="line">a==<span class="number">4</span> <span class="comment">#tf.equal(a,4)</span></span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line">&lt;tf.Tensor: shape=(<span class="number">2</span>, <span class="number">2</span>), dtype=bool, numpy=</span><br><span class="line">array([[<span class="literal">False</span>, <span class="literal">False</span>],</span><br><span class="line">       [<span class="literal">False</span>,  <span class="literal">True</span>]])&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 三个张量相加</span></span><br><span class="line">a = tf.constant([<span class="number">1.0</span>,<span class="number">8.0</span>])</span><br><span class="line">b = tf.constant([<span class="number">5.0</span>,<span class="number">6.0</span>])</span><br><span class="line">c = tf.constant([<span class="number">6.0</span>,<span class="number">7.0</span>])</span><br><span class="line">tf.add_n([a,b,c])</span><br><span class="line">tf.maximum(a,b)  <span class="comment">#[5 8]</span></span><br><span class="line">tf.minimum(a,b)  <span class="comment">#[1 6]</span></span><br></pre></td></tr></table></figure></div><h5 id="2、向量运算"><a href="#2、向量运算" class="headerlink" title="2、向量运算"></a>2、向量运算</h5><blockquote><p>向量运算符只在一个特定轴上运算，将一个向量映射到一个标量或者另外一个向量。 许多向量运算符都以reduce开头。</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#向量reduce</span></span><br><span class="line">a = tf.range(<span class="number">1</span>,<span class="number">10</span>)</span><br><span class="line">tf.print(tf.reduce_sum(a))</span><br><span class="line">tf.print(tf.reduce_mean(a))</span><br><span class="line">tf.print(tf.reduce_max(a))</span><br><span class="line">tf.print(tf.reduce_min(a))</span><br><span class="line">tf.print(tf.reduce_prod(a))</span><br><span class="line"></span><br><span class="line"><span class="comment">#张量指定维度进行reduce</span></span><br><span class="line">b = tf.reshape(a,(<span class="number">3</span>,<span class="number">3</span>))</span><br><span class="line">tf.print(tf.reduce_sum(b, axis=<span class="number">1</span>, keepdims=<span class="literal">True</span>))</span><br><span class="line">tf.print(tf.reduce_sum(b, axis=<span class="number">0</span>, keepdims=<span class="literal">True</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#bool类型的reduce</span></span><br><span class="line">p = tf.constant([<span class="literal">True</span>,<span class="literal">False</span>,<span class="literal">False</span>])</span><br><span class="line">q = tf.constant([<span class="literal">False</span>,<span class="literal">False</span>,<span class="literal">True</span>])</span><br><span class="line">tf.print(tf.reduce_all(p)) <span class="comment">#结果为0，计算一个张量在维度上元素的“逻辑和”</span></span><br><span class="line">tf.print(tf.reduce_any(q)) <span class="comment">#结果为1，在张量的维度上计算元素的 "逻辑或"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#cum扫描累积</span></span><br><span class="line">a = tf.range(<span class="number">1</span>,<span class="number">10</span>)</span><br><span class="line">tf.print(tf.math.cumsum(a))</span><br><span class="line">tf.print(tf.math.cumprod(a))</span><br><span class="line"><span class="comment"># 结果：</span></span><br><span class="line">[<span class="number">1</span> <span class="number">3</span> <span class="number">6</span> ... <span class="number">28</span> <span class="number">36</span> <span class="number">45</span>]</span><br><span class="line">[<span class="number">1</span> <span class="number">2</span> <span class="number">6</span> ... <span class="number">5040</span> <span class="number">40320</span> <span class="number">362880</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#arg最大最小值索引</span></span><br><span class="line">a = tf.range(<span class="number">1</span>,<span class="number">10</span>)</span><br><span class="line">tf.print(tf.argmax(a))</span><br><span class="line">tf.print(tf.argmin(a))</span><br><span class="line"></span><br><span class="line"><span class="comment">#tf.math.top_k可以用于对张量排序</span></span><br><span class="line">a = tf.constant([<span class="number">1</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">8</span>])</span><br><span class="line">values,indices = tf.math.top_k(a,<span class="number">3</span>,sorted=<span class="literal">True</span>) <span class="comment">#将a中的元素按照从大到小排序，然后取前三位</span></span><br><span class="line">tf.print(values) </span><br><span class="line">tf.print(indices)</span><br><span class="line"><span class="comment">#结果：</span></span><br><span class="line">[<span class="number">8</span> <span class="number">7</span> <span class="number">5</span>]</span><br><span class="line">[<span class="number">5</span> <span class="number">2</span> <span class="number">3</span>]</span><br></pre></td></tr></table></figure></div><h5 id="3、矩阵运算"><a href="#3、矩阵运算" class="headerlink" title="3、矩阵运算"></a>3、矩阵运算</h5><blockquote><p>矩阵运算包括<strong>：矩阵乘法，矩阵转置，矩阵逆，矩阵求迹，矩阵范数，矩阵行列式，矩阵求特征值，矩阵分解</strong>等运算。大部分和矩阵有关的运算都在<code>tf.linalg</code>子包中。</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#矩阵乘法</span></span><br><span class="line">a = tf.constant([[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>]])</span><br><span class="line">b = tf.constant([[<span class="number">2</span>,<span class="number">0</span>],[<span class="number">0</span>,<span class="number">2</span>]])</span><br><span class="line">a@b  <span class="comment">#等价于tf.matmul(a,b)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#矩阵转置</span></span><br><span class="line">a = tf.constant([[<span class="number">1.0</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>]])</span><br><span class="line">tf.transpose(a)</span><br><span class="line"><span class="comment">#结果</span></span><br><span class="line">&lt;tf.Tensor: shape=(<span class="number">2</span>, <span class="number">2</span>), dtype=float32, numpy=</span><br><span class="line">array([[<span class="number">1.</span>, <span class="number">3.</span>],</span><br><span class="line">       [<span class="number">2.</span>, <span class="number">4.</span>]], dtype=float32)&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">#矩阵逆，必须为tf.float32或tf.double类型</span></span><br><span class="line">a = tf.constant([[<span class="number">1.0</span>,<span class="number">2</span>],[<span class="number">3.0</span>,<span class="number">4</span>]],dtype = tf.float32)</span><br><span class="line">tf.linalg.inv(a)</span><br><span class="line"></span><br><span class="line"><span class="comment">#矩阵求trace</span></span><br><span class="line">a = tf.constant([[<span class="number">1.0</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>]])</span><br><span class="line">tf.linalg.trace(a)</span><br><span class="line"></span><br><span class="line"><span class="comment">#矩阵求范数</span></span><br><span class="line">a = tf.constant([[<span class="number">1.0</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>]])</span><br><span class="line">tf.linalg.norm(a)</span><br><span class="line"></span><br><span class="line"><span class="comment">#矩阵行列式</span></span><br><span class="line">a = tf.constant([[<span class="number">1.0</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>]])</span><br><span class="line">tf.linalg.det(a)</span><br><span class="line"></span><br><span class="line"><span class="comment">#矩阵特征值</span></span><br><span class="line">tf.linalg.eigvalsh(a)</span><br><span class="line"></span><br><span class="line"><span class="comment">#矩阵qr分解</span></span><br><span class="line">a  = tf.constant([[<span class="number">1.0</span>,<span class="number">2.0</span>],[<span class="number">3.0</span>,<span class="number">4.0</span>]],dtype = tf.float32)</span><br><span class="line">q,r = tf.linalg.qr(a)</span><br><span class="line"></span><br><span class="line"><span class="comment">#矩阵svd分解</span></span><br><span class="line">a  = tf.constant([[<span class="number">1.0</span>,<span class="number">2.0</span>],[<span class="number">3.0</span>,<span class="number">4.0</span>]],dtype = tf.float32)</span><br><span class="line">v,s,d = tf.linalg.svd(a)</span><br><span class="line">tf.matmul(tf.matmul(s,tf.linalg.diag(v)),d)</span><br><span class="line"><span class="comment">#利用svd分解可以在TensorFlow中实现主成分分析降维</span></span><br></pre></td></tr></table></figure></div><h5 id="4、广播机制"><a href="#4、广播机制" class="headerlink" title="4、广播机制"></a>4、广播机制</h5><ul><li>1、如果张量的维度不同，将维度较小的张量进行扩展，直到两个张量的维度都一样。</li><li>2、如果两个张量在某个维度上的长度是相同的，或者其中一个张量在该维度上的长度为1，那么我们就说这两个张量在该维度上是相容的。</li><li>3、如果两个张量在所有维度上都是相容的，它们就能使用广播。</li><li>4、广播之后，每个维度的长度将取两个张量在该维度长度的较大值。</li><li>5、在任何一个维度上，如果一个张量的长度为1，另一个张量长度大于1，那么在该维度上，就好像是对第一个张量进行了复制。</li></ul><blockquote><p><code>tf.broadcast_to</code> 以显式的方式按照广播机制扩展张量的维度。</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">a = tf.constant([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">b = tf.constant([[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>],[<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>]])</span><br><span class="line">b + a  <span class="comment">#等价于 b + tf.broadcast_to(a,b.shape)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#计算广播后计算结果的形状，静态形状，TensorShape类型参数</span></span><br><span class="line">tf.broadcast_static_shape(a.shape,b.shape)</span><br><span class="line"></span><br><span class="line"><span class="comment">#计算广播后计算结果的形状，动态形状，Tensor类型参数</span></span><br><span class="line">c = tf.constant([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">d = tf.constant([[<span class="number">1</span>],[<span class="number">2</span>],[<span class="number">3</span>]])</span><br><span class="line">tf.broadcast_dynamic_shape(tf.shape(c),tf.shape(d))</span><br><span class="line"><span class="comment">#广播效果</span></span><br><span class="line">c+d <span class="comment">#等价于 tf.broadcast_to(c,[3,3]) + tf.broadcast_to(d,[3,3])</span></span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> TensorFlow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title> TensorFlow2.X学习笔记(2)--TensorFlow的层次结构介绍</title>
      <link href="/2020/04/30/TensorFlow2-X%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-2-TensorFlow%E7%9A%84%E5%B1%82%E6%AC%A1%E7%BB%93%E6%9E%84%E4%BB%8B%E7%BB%8D/"/>
      <url>/2020/04/30/TensorFlow2-X%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-2-TensorFlow%E7%9A%84%E5%B1%82%E6%AC%A1%E7%BB%93%E6%9E%84%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="TensorFlow的层次结构"><a href="#TensorFlow的层次结构" class="headerlink" title="TensorFlow的层次结构"></a>TensorFlow的层次结构</h1><p>TensorFlow中5个不同的层次结构：</p><p><code>硬件层，内核层，低阶API，中阶API，高阶API</code></p><a href="https://ae01.alicdn.com/kf/Haf5b341a1ab342d2b56a5ec363e442770.jpg" data-fancybox="group" data-caption="undefined" class="fancybox"><img style="zoom:70%;" data-src="https://ae01.alicdn.com/kf/Haf5b341a1ab342d2b56a5ec363e442770.jpg" class="lazyload"></a><ul><li>最底层为硬件层，TensorFlow支持CPU、GPU或TPU加入计算资源池。</li><li>第二层为C++实现的内核，kernel可以跨平台分布运行。</li><li>第三层为Python实现的操作符，提供了封装<code>C++内核</code>的低级API指令，主要包括各种张量操作<code>算子、计算图、自动微分</code>. 如<code>tf.Variable,tf.constant,tf.function,tf.GradientTape,tf.nn.softmax...</code> 如果把模型比作一个房子，那么第三层API就是【模型之砖】。</li><li>第四层为Python实现的模型组件，对低级API进行了函数封装，主要包括各种<code>模型层，损失函数，优化器，数据管道，特征列</code>等等。 如tf.keras.layers,tf.keras.losses,tf.keras.metrics,tf.keras.optimizers,tf.data.DataSet,tf.feature_column… 如果把模型比作一个房子，那么第四层API就是【模型之墙】。</li><li>第五层为Python实现的模型成品，一般为按照OOP方式封装的高级API，主要为<code>tf.keras.models</code>提供的模型的类接口。 如果把模型比作一个房子，那么第五层API就是模型本身，即【模型之屋】。 </li></ul><h4 id="低阶API示范"><a href="#低阶API示范" class="headerlink" title="低阶API示范"></a>低阶API示范</h4><blockquote><p>低阶API主要包括张量操作，计算图和自动微分。</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line"><span class="comment">#打印时间分割线</span></span><br><span class="line"><span class="meta">@tf.function</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printbar</span><span class="params">()</span>:</span></span><br><span class="line">    ts = tf.timestamp()</span><br><span class="line">    today_ts = ts%(<span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span>)</span><br><span class="line"></span><br><span class="line">    hour = tf.cast(today_ts//<span class="number">3600</span>+<span class="number">8</span>,tf.int32)%tf.constant(<span class="number">24</span>)</span><br><span class="line">    minite = tf.cast((today_ts%<span class="number">3600</span>)//<span class="number">60</span>,tf.int32)</span><br><span class="line">    second = tf.cast(tf.floor(today_ts%<span class="number">60</span>),tf.int32)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">timeformat</span><span class="params">(m)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> tf.strings.length(tf.strings.format(<span class="string">"&#123;&#125;"</span>,m))==<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span>(tf.strings.format(<span class="string">"0&#123;&#125;"</span>,m))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span>(tf.strings.format(<span class="string">"&#123;&#125;"</span>,m))</span><br><span class="line"></span><br><span class="line">    timestring = tf.strings.join([timeformat(hour),timeformat(minite),</span><br><span class="line">                timeformat(second)],separator = <span class="string">":"</span>)</span><br><span class="line">    tf.print(<span class="string">"=========="</span>*<span class="number">8</span>,end = <span class="string">""</span>)</span><br><span class="line">    tf.print(timestring)</span><br><span class="line">    </span><br><span class="line">  </span><br><span class="line"><span class="comment">#样本数量</span></span><br><span class="line">n = <span class="number">400</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成测试用数据集</span></span><br><span class="line">X = tf.random.uniform([n,<span class="number">2</span>],minval=<span class="number">-10</span>,maxval=<span class="number">10</span>) </span><br><span class="line">w0 = tf.constant([[<span class="number">2.0</span>],[<span class="number">-1.0</span>]])</span><br><span class="line">b0 = tf.constant(<span class="number">3.0</span>)</span><br><span class="line">Y = X@w0 + b0 + tf.random.normal([n,<span class="number">1</span>],mean = <span class="number">0.0</span>,stddev= <span class="number">2.0</span>)  <span class="comment"># @表示矩阵乘法,增加正态扰动</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#使用动态图调试</span></span><br><span class="line"></span><br><span class="line">w = tf.Variable(tf.random.normal(w0.shape))</span><br><span class="line">b = tf.Variable(<span class="number">0.0</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train</span><span class="params">(epoches)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> tf.range(<span class="number">1</span>,epoches+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">with</span> tf.GradientTape() <span class="keyword">as</span> tape:</span><br><span class="line">            <span class="comment">#正向传播求损失</span></span><br><span class="line">            Y_hat = X@w + b</span><br><span class="line">            loss = tf.squeeze(tf.transpose(Y-Y_hat)@(Y-Y_hat))/(<span class="number">2.0</span>*n)   </span><br><span class="line"></span><br><span class="line">        <span class="comment"># 反向传播求梯度</span></span><br><span class="line">        dloss_dw,dloss_db = tape.gradient(loss,[w,b])</span><br><span class="line">        <span class="comment"># 梯度下降法更新参数</span></span><br><span class="line">        w.assign(w - <span class="number">0.001</span>*dloss_dw)</span><br><span class="line">        b.assign(b - <span class="number">0.001</span>*dloss_db)</span><br><span class="line">        <span class="keyword">if</span> epoch%<span class="number">1000</span> == <span class="number">0</span>:</span><br><span class="line">            printbar()</span><br><span class="line">            tf.print(<span class="string">"epoch ="</span>,epoch,<span class="string">" loss ="</span>,loss,)</span><br><span class="line">            tf.print(<span class="string">"w ="</span>,w)</span><br><span class="line">            tf.print(<span class="string">"b ="</span>,b)</span><br><span class="line">            tf.print(<span class="string">""</span>)</span><br><span class="line"></span><br><span class="line">train(<span class="number">5000</span>)</span><br></pre></td></tr></table></figure></div><h5 id="使用autograph机制转换成静态图加速"><a href="#使用autograph机制转换成静态图加速" class="headerlink" title="使用autograph机制转换成静态图加速"></a>使用autograph机制转换成静态图加速</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">w = tf.Variable(tf.random.normal(w0.shape))</span><br><span class="line">b = tf.Variable(<span class="number">0.0</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@tf.function</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train</span><span class="params">(epoches)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> tf.range(<span class="number">1</span>,epoches+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">with</span> tf.GradientTape() <span class="keyword">as</span> tape:</span><br><span class="line">            <span class="comment">#正向传播求损失</span></span><br><span class="line">            Y_hat = X@w + b</span><br><span class="line">            loss = tf.squeeze(tf.transpose(Y-Y_hat)@(Y-Y_hat))/(<span class="number">2.0</span>*n)   </span><br><span class="line"></span><br><span class="line">        <span class="comment"># 反向传播求梯度</span></span><br><span class="line">        dloss_dw,dloss_db = tape.gradient(loss,[w,b])</span><br><span class="line">        <span class="comment"># 梯度下降法更新参数</span></span><br><span class="line">        w.assign(w - <span class="number">0.001</span>*dloss_dw)</span><br><span class="line">        b.assign(b - <span class="number">0.001</span>*dloss_db)</span><br><span class="line">        <span class="keyword">if</span> epoch%<span class="number">1000</span> == <span class="number">0</span>:</span><br><span class="line">            printbar()</span><br><span class="line">            tf.print(<span class="string">"epoch ="</span>,epoch,<span class="string">" loss ="</span>,loss,)</span><br><span class="line">            tf.print(<span class="string">"w ="</span>,w)</span><br><span class="line">            tf.print(<span class="string">"b ="</span>,b)</span><br><span class="line">            tf.print(<span class="string">""</span>)</span><br><span class="line">train(<span class="number">5000</span>)</span><br></pre></td></tr></table></figure></div><h4 id="中阶API示范"><a href="#中阶API示范" class="headerlink" title="中阶API示范"></a>中阶API示范</h4><blockquote><p>TensorFlow的中阶API主要包括各种<code>模型层</code>，<code>损失函数</code>，<code>优化器</code>，<code>数据管道</code>，<code>特征列</code>等等。</p></blockquote><p><strong>下面代码在GPU上面测试不通过，有人说可以在CPU上面跑通</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 要使用CPU则在代码最上面加上下面两行代码</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.environ[<span class="string">"CUDA_VISIBLE_DEVICES"</span>] = <span class="string">"-1"</span></span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras <span class="keyword">import</span> layers,losses,metrics,optimizers</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#打印时间分割线</span></span><br><span class="line"><span class="meta">@tf.function</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printbar</span><span class="params">()</span>:</span></span><br><span class="line">    ts = tf.timestamp()</span><br><span class="line">    today_ts = ts%(<span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span>)</span><br><span class="line"></span><br><span class="line">    hour = tf.cast(today_ts//<span class="number">3600</span>+<span class="number">8</span>,tf.int32)%tf.constant(<span class="number">24</span>)</span><br><span class="line">    minite = tf.cast((today_ts%<span class="number">3600</span>)//<span class="number">60</span>,tf.int32)</span><br><span class="line">    second = tf.cast(tf.floor(today_ts%<span class="number">60</span>),tf.int32)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">timeformat</span><span class="params">(m)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> tf.strings.length(tf.strings.format(<span class="string">"&#123;&#125;"</span>,m))==<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span>(tf.strings.format(<span class="string">"0&#123;&#125;"</span>,m))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span>(tf.strings.format(<span class="string">"&#123;&#125;"</span>,m))</span><br><span class="line"></span><br><span class="line">    timestring = tf.strings.join([timeformat(hour),timeformat(minite),</span><br><span class="line">                timeformat(second)],separator = <span class="string">":"</span>)</span><br><span class="line">    tf.print(<span class="string">"=========="</span>*<span class="number">8</span>,end = <span class="string">""</span>)</span><br><span class="line">    tf.print(timestring)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">   <span class="comment">#样本数量</span></span><br><span class="line">n = <span class="number">800</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成测试用数据集</span></span><br><span class="line">X = tf.random.uniform([n,<span class="number">2</span>],minval=<span class="number">-10</span>,maxval=<span class="number">10</span>) </span><br><span class="line">w0 = tf.constant([[<span class="number">2.0</span>],[<span class="number">-1.0</span>]])</span><br><span class="line">b0 = tf.constant(<span class="number">3.0</span>)</span><br><span class="line">Y = X@w0 + b0 + tf.random.normal([n,<span class="number">1</span>],mean = <span class="number">0.0</span>,stddev= <span class="number">2.0</span>)  <span class="comment"># @表示矩阵乘法,增加正态扰动</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#构建输入数据管道</span></span><br><span class="line">ds = tf.data.Dataset.from_tensor_slices((X,Y)) \</span><br><span class="line">     .shuffle(buffer_size = <span class="number">1000</span>).batch(<span class="number">100</span>) \</span><br><span class="line">     .prefetch(tf.data.experimental.AUTOTUNE)  </span><br><span class="line"></span><br><span class="line"><span class="comment">#定义优化器</span></span><br><span class="line">optimizer = optimizers.SGD(learning_rate=<span class="number">0.001</span>)</span><br><span class="line"></span><br><span class="line">linear = layers.Dense(units = <span class="number">1</span>)</span><br><span class="line">linear.build(input_shape = (<span class="number">2</span>,)) </span><br><span class="line"></span><br><span class="line"><span class="meta">@tf.function</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train</span><span class="params">(epoches)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> tf.range(<span class="number">1</span>,epoches+<span class="number">1</span>):</span><br><span class="line">        L = tf.constant(<span class="number">0.0</span>) <span class="comment">#使用L记录loss值</span></span><br><span class="line">        <span class="keyword">for</span> X_batch,Y_batch <span class="keyword">in</span> ds:</span><br><span class="line">            <span class="keyword">with</span> tf.GradientTape() <span class="keyword">as</span> tape:</span><br><span class="line">                Y_hat = linear(X_batch)</span><br><span class="line">                loss = losses.mean_squared_error(tf.reshape(Y_hat,[<span class="number">-1</span>]),tf.reshape(Y_batch,[<span class="number">-1</span>]))</span><br><span class="line">            grads = tape.gradient(loss,linear.variables)</span><br><span class="line">            optimizer.apply_gradients(zip(grads,linear.variables))</span><br><span class="line">            L = loss</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(epoch%<span class="number">100</span>==<span class="number">0</span>):</span><br><span class="line">            printbar()</span><br><span class="line">            tf.print(<span class="string">"epoch ="</span>,epoch,<span class="string">"loss ="</span>,L)</span><br><span class="line">            tf.print(<span class="string">"w ="</span>,linear.kernel)</span><br><span class="line">            tf.print(<span class="string">"b ="</span>,linear.bias)</span><br><span class="line">            tf.print(<span class="string">""</span>)</span><br><span class="line"></span><br><span class="line">train(<span class="number">500</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行结果</span></span><br><span class="line">================================================================================<span class="number">11</span>:<span class="number">54</span>:<span class="number">07</span></span><br><span class="line">epoch = <span class="number">100</span> loss = <span class="number">4.13672256</span></span><br><span class="line">w = [[<span class="number">1.9903785</span>]</span><br><span class="line"> [<span class="number">-0.987648785</span>]]</span><br><span class="line">b = [<span class="number">2.40720725</span>]</span><br><span class="line"></span><br><span class="line">================================================================================<span class="number">11</span>:<span class="number">54</span>:<span class="number">10</span></span><br><span class="line">epoch = <span class="number">200</span> loss = <span class="number">4.51364088</span></span><br><span class="line">w = [[<span class="number">1.99168313</span>]</span><br><span class="line"> [<span class="number">-0.987588942</span>]]</span><br><span class="line">b = [<span class="number">2.90266657</span>]</span><br><span class="line"></span><br><span class="line">================================================================================<span class="number">11</span>:<span class="number">54</span>:<span class="number">12</span></span><br><span class="line">epoch = <span class="number">300</span> loss = <span class="number">4.33221674</span></span><br><span class="line">w = [[<span class="number">1.99366784</span>]</span><br><span class="line"> [<span class="number">-0.98791343</span>]]</span><br><span class="line">b = [<span class="number">3.00248265</span>]</span><br><span class="line"></span><br><span class="line">================================================================================<span class="number">11</span>:<span class="number">54</span>:<span class="number">15</span></span><br><span class="line">epoch = <span class="number">400</span> loss = <span class="number">3.12717295</span></span><br><span class="line">w = [[<span class="number">1.98944652</span>]</span><br><span class="line"> [<span class="number">-0.986787856</span>]]</span><br><span class="line">b = [<span class="number">3.02270603</span>]</span><br><span class="line"></span><br><span class="line">================================================================================<span class="number">11</span>:<span class="number">54</span>:<span class="number">17</span></span><br><span class="line">epoch = <span class="number">500</span> loss = <span class="number">3.830863</span></span><br><span class="line">w = [[<span class="number">1.99245548</span>]</span><br><span class="line"> [<span class="number">-0.987303793</span>]]</span><br><span class="line">b = [<span class="number">3.02663541</span>]</span><br></pre></td></tr></table></figure></div><h4 id="高阶API示范"><a href="#高阶API示范" class="headerlink" title="高阶API示范"></a>高阶API示范</h4><blockquote><p>TensorFlow的高阶API主要为tf.keras.models提供的模型的类接口。</p><p>使用Keras接口有以下3种方式构建模型：使用<strong>Sequential</strong>按层顺序构建模型，使用<strong>函数式API</strong>构建任意结构模型，<strong>继承Model基类</strong>构建自定义模型。</p></blockquote><h5 id="1-、使用Sequential按层顺序构建模型"><a href="#1-、使用Sequential按层顺序构建模型" class="headerlink" title="(1)、使用Sequential按层顺序构建模型"></a>(1)、使用Sequential按层顺序构建模型</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras <span class="keyword">import</span> models,layers,optimizers</span><br><span class="line"></span><br><span class="line"><span class="comment">#样本数量</span></span><br><span class="line">n = <span class="number">800</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成测试用数据集</span></span><br><span class="line">X = tf.random.uniform([n,<span class="number">2</span>],minval=<span class="number">-10</span>,maxval=<span class="number">10</span>) </span><br><span class="line">w0 = tf.constant([[<span class="number">2.0</span>],[<span class="number">-1.0</span>]])</span><br><span class="line">b0 = tf.constant(<span class="number">3.0</span>)</span><br><span class="line"></span><br><span class="line">Y = X@w0 + b0 + tf.random.normal([n,<span class="number">1</span>],mean = <span class="number">0.0</span>,stddev= <span class="number">2.0</span>)  <span class="comment"># @表示矩阵乘法,增加正态扰动</span></span><br><span class="line"></span><br><span class="line">tf.keras.backend.clear_session()</span><br><span class="line"></span><br><span class="line">linear = models.Sequential()</span><br><span class="line">linear.add(layers.Dense(<span class="number">1</span>,input_shape =(<span class="number">2</span>,)))</span><br><span class="line">linear.summary()</span><br><span class="line"></span><br><span class="line"><span class="comment">### 使用fit方法进行训练</span></span><br><span class="line">linear.compile(optimizer=<span class="string">"adam"</span>,loss=<span class="string">"mse"</span>,metrics=[<span class="string">"mae"</span>])</span><br><span class="line">linear.fit(X,Y,batch_size = <span class="number">20</span>,epochs = <span class="number">200</span>)  </span><br><span class="line"></span><br><span class="line">tf.print(<span class="string">"w = "</span>,linear.layers[<span class="number">0</span>].kernel)</span><br><span class="line">tf.print(<span class="string">"b = "</span>,linear.layers[<span class="number">0</span>].bias)</span><br><span class="line"></span><br><span class="line"><span class="comment">### 运行结果</span></span><br><span class="line">Model: <span class="string">"sequential"</span></span><br><span class="line">_________________________________________________________________</span><br><span class="line">Layer (type)                 Output Shape              Param <span class="comment">#   </span></span><br><span class="line">=================================================================</span><br><span class="line">dense (Dense)                (<span class="literal">None</span>, <span class="number">1</span>)                 <span class="number">3</span>         </span><br><span class="line">=================================================================</span><br><span class="line">Total params: <span class="number">3</span></span><br><span class="line">Trainable params: <span class="number">3</span></span><br><span class="line">Non-trainable params: <span class="number">0</span></span><br><span class="line">_________________________________________________________________</span><br><span class="line">Train on <span class="number">800</span> samples</span><br><span class="line"></span><br><span class="line">............</span><br><span class="line">。。。略过。。。</span><br><span class="line">............</span><br><span class="line"></span><br><span class="line">Epoch <span class="number">197</span>/<span class="number">200</span></span><br><span class="line"></span><br><span class="line"> <span class="number">20</span>/<span class="number">800</span> [..............................] - ETA: <span class="number">0</span>s - loss: <span class="number">4.1910</span> - mae: <span class="number">1.5875</span></span><br><span class="line">360/800 [============&gt;.................] - ETA: 0s - loss: 3.7929 - mae: 1.5485</span><br><span class="line">660/800 [=======================&gt;......] - ETA: 0s - loss: 4.1543 - mae: 1.6328</span><br><span class="line"><span class="number">800</span>/<span class="number">800</span> [==============================] - <span class="number">0</span>s <span class="number">171</span>us/sample - loss: <span class="number">4.0170</span> - mae: <span class="number">1.6049</span></span><br><span class="line">Epoch <span class="number">198</span>/<span class="number">200</span></span><br><span class="line"></span><br><span class="line"> <span class="number">20</span>/<span class="number">800</span> [..............................] - ETA: <span class="number">0</span>s - loss: <span class="number">5.7438</span> - mae: <span class="number">1.8000</span></span><br><span class="line">340/800 [===========&gt;..................] - ETA: 0s - loss: 4.1317 - mae: 1.5987</span><br><span class="line">700/800 [=========================&gt;....] - ETA: 0s - loss: 4.1257 - mae: 1.6281</span><br><span class="line"><span class="number">800</span>/<span class="number">800</span> [==============================] - <span class="number">0</span>s <span class="number">151</span>us/sample - loss: <span class="number">4.0162</span> - mae: <span class="number">1.6045</span></span><br><span class="line">Epoch <span class="number">199</span>/<span class="number">200</span></span><br><span class="line"></span><br><span class="line"> <span class="number">20</span>/<span class="number">800</span> [..............................] - ETA: <span class="number">0</span>s - loss: <span class="number">5.3425</span> - mae: <span class="number">1.6237</span></span><br><span class="line">340/800 [===========&gt;..................] - ETA: 0s - loss: 3.9504 - mae: 1.5925</span><br><span class="line">660/800 [=======================&gt;......] - ETA: 0s - loss: 4.1211 - mae: 1.6202</span><br><span class="line"><span class="number">800</span>/<span class="number">800</span> [==============================] - <span class="number">0</span>s <span class="number">162</span>us/sample - loss: <span class="number">4.0166</span> - mae: <span class="number">1.6045</span></span><br><span class="line">Epoch <span class="number">200</span>/<span class="number">200</span></span><br><span class="line"></span><br><span class="line"> <span class="number">20</span>/<span class="number">800</span> [..............................] - ETA: <span class="number">0</span>s - loss: <span class="number">4.0931</span> - mae: <span class="number">1.7218</span></span><br><span class="line">380/800 [=============&gt;................] - ETA: 0s - loss: 3.9471 - mae: 1.6048</span><br><span class="line">700/800 [=========================&gt;....] - ETA: 0s - loss: 3.8557 - mae: 1.5794</span><br><span class="line"><span class="number">800</span>/<span class="number">800</span> [==============================] - <span class="number">0</span>s <span class="number">160</span>us/sample - loss: <span class="number">4.0185</span> - mae: <span class="number">1.6047</span></span><br><span class="line">w= [[<span class="number">1.99929214</span>]</span><br><span class="line"> [<span class="number">-0.96500361</span>]]</span><br><span class="line">b= [<span class="number">3.04800749</span>]</span><br></pre></td></tr></table></figure></div><h5 id="2-、继承Model基类构建自定义模型"><a href="#2-、继承Model基类构建自定义模型" class="headerlink" title="(2)、继承Model基类构建自定义模型"></a>(2)、继承Model基类构建自定义模型</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 要使用CPU则在代码最上面加上下面两行代码</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.environ[<span class="string">"CUDA_VISIBLE_DEVICES"</span>] = <span class="string">"-1"</span></span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras <span class="keyword">import</span> models,layers,optimizers,losses,metrics</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#打印时间分割线</span></span><br><span class="line"><span class="meta">@tf.function</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printbar</span><span class="params">()</span>:</span></span><br><span class="line">    ts = tf.timestamp()</span><br><span class="line">    today_ts = ts%(<span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span>)</span><br><span class="line"></span><br><span class="line">    hour = tf.cast(today_ts//<span class="number">3600</span>+<span class="number">8</span>,tf.int32)%tf.constant(<span class="number">24</span>)</span><br><span class="line">    minite = tf.cast((today_ts%<span class="number">3600</span>)//<span class="number">60</span>,tf.int32)</span><br><span class="line">    second = tf.cast(tf.floor(today_ts%<span class="number">60</span>),tf.int32)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">timeformat</span><span class="params">(m)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> tf.strings.length(tf.strings.format(<span class="string">"&#123;&#125;"</span>,m))==<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span>(tf.strings.format(<span class="string">"0&#123;&#125;"</span>,m))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span>(tf.strings.format(<span class="string">"&#123;&#125;"</span>,m))</span><br><span class="line"></span><br><span class="line">    timestring = tf.strings.join([timeformat(hour),timeformat(minite),</span><br><span class="line">                timeformat(second)],separator = <span class="string">":"</span>)</span><br><span class="line">    tf.print(<span class="string">"=========="</span>*<span class="number">8</span>,end = <span class="string">""</span>)</span><br><span class="line">    tf.print(timestring)</span><br><span class="line">    </span><br><span class="line"><span class="comment">#样本数量</span></span><br><span class="line">n = <span class="number">800</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成测试用数据集</span></span><br><span class="line">X = tf.random.uniform([n,<span class="number">2</span>],minval=<span class="number">-10</span>,maxval=<span class="number">10</span>) </span><br><span class="line">w0 = tf.constant([[<span class="number">2.0</span>],[<span class="number">-1.0</span>]])</span><br><span class="line">b0 = tf.constant(<span class="number">3.0</span>)</span><br><span class="line"></span><br><span class="line">Y = X@w0 + b0 + tf.random.normal([n,<span class="number">1</span>],mean = <span class="number">0.0</span>,stddev= <span class="number">2.0</span>)  <span class="comment"># @表示矩阵乘法,增加正态扰动</span></span><br><span class="line"></span><br><span class="line">ds_train = tf.data.Dataset.from_tensor_slices((X[<span class="number">0</span>:n*<span class="number">3</span>//<span class="number">4</span>,:],Y[<span class="number">0</span>:n*<span class="number">3</span>//<span class="number">4</span>,:])) \</span><br><span class="line">     .shuffle(buffer_size = <span class="number">1000</span>).batch(<span class="number">20</span>) \</span><br><span class="line">     .prefetch(tf.data.experimental.AUTOTUNE) \</span><br><span class="line">     .cache()</span><br><span class="line"></span><br><span class="line">ds_valid = tf.data.Dataset.from_tensor_slices((X[n*<span class="number">3</span>//<span class="number">4</span>:,:],Y[n*<span class="number">3</span>//<span class="number">4</span>:,:])) \</span><br><span class="line">     .shuffle(buffer_size = <span class="number">1000</span>).batch(<span class="number">20</span>) \</span><br><span class="line">     .prefetch(tf.data.experimental.AUTOTUNE) \</span><br><span class="line">     .cache()</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">tf.keras.backend.clear_session()</span><br><span class="line"><span class="comment"># 自定义模型</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyModel</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(MyModel, self).__init__()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">build</span><span class="params">(self,input_shape)</span>:</span></span><br><span class="line">        self.dense1 = layers.Dense(<span class="number">1</span>)   </span><br><span class="line">        super(MyModel,self).build(input_shape)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">call</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        y = self.dense1(x)</span><br><span class="line">        <span class="keyword">return</span>(y)</span><br><span class="line"></span><br><span class="line">model = MyModel()</span><br><span class="line">model.build(input_shape =(<span class="literal">None</span>,<span class="number">2</span>))</span><br><span class="line">model.summary()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">### 自定义训练循环(专家教程)</span></span><br><span class="line">optimizer = optimizers.Adam()</span><br><span class="line">loss_func = losses.MeanSquaredError()</span><br><span class="line"></span><br><span class="line">train_loss = tf.keras.metrics.Mean(name=<span class="string">'train_loss'</span>)</span><br><span class="line">train_metric = tf.keras.metrics.MeanAbsoluteError(name=<span class="string">'train_mae'</span>)</span><br><span class="line"></span><br><span class="line">valid_loss = tf.keras.metrics.Mean(name=<span class="string">'valid_loss'</span>)</span><br><span class="line">valid_metric = tf.keras.metrics.MeanAbsoluteError(name=<span class="string">'valid_mae'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@tf.function</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train_step</span><span class="params">(model, features, labels)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> tf.GradientTape() <span class="keyword">as</span> tape:</span><br><span class="line">        predictions = model(features)</span><br><span class="line">        loss = loss_func(labels, predictions)</span><br><span class="line">    gradients = tape.gradient(loss, model.trainable_variables)</span><br><span class="line">    optimizer.apply_gradients(zip(gradients, model.trainable_variables))</span><br><span class="line"></span><br><span class="line">    train_loss.update_state(loss)</span><br><span class="line">    train_metric.update_state(labels, predictions)</span><br><span class="line"></span><br><span class="line"><span class="meta">@tf.function</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">valid_step</span><span class="params">(model, features, labels)</span>:</span></span><br><span class="line">    predictions = model(features)</span><br><span class="line">    batch_loss = loss_func(labels, predictions)</span><br><span class="line">    valid_loss.update_state(batch_loss)</span><br><span class="line">    valid_metric.update_state(labels, predictions)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@tf.function</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train_model</span><span class="params">(model,ds_train,ds_valid,epochs)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> tf.range(<span class="number">1</span>,epochs+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> features, labels <span class="keyword">in</span> ds_train:</span><br><span class="line">            train_step(model,features,labels)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> features, labels <span class="keyword">in</span> ds_valid:</span><br><span class="line">            valid_step(model,features,labels)</span><br><span class="line"></span><br><span class="line">        logs = <span class="string">'Epoch=&#123;&#125;,Loss:&#123;&#125;,MAE:&#123;&#125;,Valid Loss:&#123;&#125;,Valid MAE:&#123;&#125;'</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>  epoch%<span class="number">100</span> ==<span class="number">0</span>:</span><br><span class="line">            printbar()</span><br><span class="line">            tf.print(tf.strings.format(logs,</span><br><span class="line">            (epoch,train_loss.result(),train_metric.result(),valid_loss.result(),valid_metric.result())))</span><br><span class="line">            tf.print(<span class="string">"w="</span>,model.layers[<span class="number">0</span>].kernel)</span><br><span class="line">            tf.print(<span class="string">"b="</span>,model.layers[<span class="number">0</span>].bias)</span><br><span class="line">            tf.print(<span class="string">""</span>)</span><br><span class="line"></span><br><span class="line">        train_loss.reset_states()</span><br><span class="line">        valid_loss.reset_states()</span><br><span class="line">        train_metric.reset_states()</span><br><span class="line">        valid_metric.reset_states()</span><br><span class="line"></span><br><span class="line">train_model(model,ds_train,ds_valid,<span class="number">400</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#### 运行结果</span></span><br><span class="line">Model: <span class="string">"my_model"</span></span><br><span class="line">_________________________________________________________________</span><br><span class="line">Layer (type)                 Output Shape              Param <span class="comment">#   </span></span><br><span class="line">=================================================================</span><br><span class="line">dense (Dense)                multiple                  <span class="number">3</span>         </span><br><span class="line">=================================================================</span><br><span class="line">Total params: <span class="number">3</span></span><br><span class="line">Trainable params: <span class="number">3</span></span><br><span class="line">Non-trainable params: <span class="number">0</span></span><br><span class="line">_________________________________________________________________</span><br><span class="line">================================================================================<span class="number">18</span>:<span class="number">17</span>:<span class="number">08</span></span><br><span class="line">Epoch=<span class="number">100</span>,Loss:<span class="number">67.9662247</span>,MAE:<span class="number">6.36445856</span>,Valid Loss:<span class="number">65.3885117</span>,Valid MAE:<span class="number">6.17629</span></span><br><span class="line">w= [[<span class="number">1.65662384</span>]</span><br><span class="line"> [<span class="number">-1.01629746</span>]]</span><br><span class="line">b= [<span class="number">1.92026019</span>]</span><br><span class="line"></span><br><span class="line">================================================================================<span class="number">18</span>:<span class="number">17</span>:<span class="number">16</span></span><br><span class="line">Epoch=<span class="number">200</span>,Loss:<span class="number">36.144165</span>,MAE:<span class="number">4.0302186</span>,Valid Loss:<span class="number">35.4477425</span>,Valid MAE:<span class="number">4.01481533</span></span><br><span class="line">w= [[<span class="number">1.99435031</span>]</span><br><span class="line"> [<span class="number">-1.00531375</span>]]</span><br><span class="line">b= [<span class="number">3.02523756</span>]</span><br><span class="line"></span><br><span class="line">================================================================================<span class="number">18</span>:<span class="number">17</span>:<span class="number">25</span></span><br><span class="line">Epoch=<span class="number">300</span>,Loss:<span class="number">25.3425236</span>,MAE:<span class="number">3.20795441</span>,Valid Loss:<span class="number">25.308445</span>,Valid MAE:<span class="number">3.25203133</span></span><br><span class="line">w= [[<span class="number">1.99592912</span>]</span><br><span class="line"> [<span class="number">-1.00504756</span>]]</span><br><span class="line">b= [<span class="number">3.08958364</span>]</span><br><span class="line"></span><br><span class="line">================================================================================<span class="number">18</span>:<span class="number">17</span>:<span class="number">34</span></span><br><span class="line">Epoch=<span class="number">400</span>,Loss:<span class="number">19.9554043</span>,MAE:<span class="number">2.79780984</span>,Valid Loss:<span class="number">20.2524834</span>,Valid MAE:<span class="number">2.87172508</span></span><br><span class="line">w= [[<span class="number">1.99595356</span>]</span><br><span class="line"> [<span class="number">-1.00504148</span>]]</span><br><span class="line">b= [<span class="number">3.08971953</span>]</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> TensorFlow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TensorFlow2.X学习笔记(1)--TensorFlow核心概念</title>
      <link href="/2020/04/29/TensorFlow2-X%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1-TensorFlow%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/"/>
      <url>/2020/04/29/TensorFlow2-X%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1-TensorFlow%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p>该系列笔记来自于对<a href="https://lyhue1991.github.io/eat_tensorflow2_in_30_days" target="_blank" rel="noopener">https://lyhue1991.github.io/eat_tensorflow2_in_30_days</a> 文档的学习，感谢大神的文档！</p></blockquote><p>  <code>TensorFlow</code>™ 是一个采用 <strong>数据流图</strong>（data flow graphs），用于数值计算的开源软件库。节点（Nodes）在图中表示数学操作，图中的线（edges）则表示在节点间相互联系的多维数据数组，即张量（tensor）。它灵活的架构让你可以<strong>在多种平台上展开计算</strong>，例如台式计算机中的一个或多个CPU（或GPU），服务器，移动设备等等。TensorFlow 最初由Google大脑小组（隶属于Google机器智能研究机构）的研究员和工程师们开发出来，<strong>用于机器学习和深度神经网络</strong>方面的研究，但这个系统的通用性使其也可<strong>广泛用于其他计算领域</strong>。</p><p>TensorFlow的<code>主要优点</code>：</p><ul><li>灵活性：支持底层数值计算，C++自定义操作符</li><li>可移植性：从服务器到PC到手机，从CPU到GPU到TPU</li><li>分布式计算：分布式并行计算，可指定操作符对应计算设备</li></ul><h4 id="1、张量数据结构"><a href="#1、张量数据结构" class="headerlink" title="1、张量数据结构"></a>1、张量数据结构</h4><p><code>TensorFlow程序</code> = <code>张量数据结构</code> + <code>计算图算法语言</code></p><p>张量和计算图是 TensorFlow的核心概念。</p><p>Tensorflow的基本数据结构是张量Tensor。张量即多维数组。Tensorflow的张量和numpy中的array很类似。</p><p>从行为特性来看，有两种类型的张量，常量constant和变量Variable.</p><p><code>常量</code>的值在计算图中不可以被重新赋值，<code>变量</code>可以在计算图中用<code>assign</code>等算子重新赋值。</p><h5 id="（1）常量张量"><a href="#（1）常量张量" class="headerlink" title="（1）常量张量"></a>（1）常量张量</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">i = tf.constant(<span class="number">1</span>) <span class="comment"># tf.int32 类型常量</span></span><br><span class="line">l = tf.constant(<span class="number">1</span>,dtype = tf.int64) <span class="comment"># tf.int64 类型常量</span></span><br><span class="line">f = tf.constant(<span class="number">1.23</span>) <span class="comment">#tf.float32 类型常量</span></span><br><span class="line">d = tf.constant(<span class="number">3.14</span>,dtype = tf.double) <span class="comment"># tf.double 类型常量</span></span><br><span class="line">s = tf.constant(<span class="string">"hello world"</span>) <span class="comment"># tf.string类型常量</span></span><br><span class="line">b = tf.constant(<span class="literal">True</span>) <span class="comment">#tf.bool类型常量</span></span><br></pre></td></tr></table></figure></div><p><code>标量</code>为<code>0维</code>张量，<code>向量</code>为<code>1维</code>张量，<code>矩阵</code>为<code>2维</code>张量。</p><p><code>彩色图像</code>有rgb三个通道，可以表示为<code>3维</code>张量。</p><p><code>视频</code>还有时间维，可以表示为<code>4维</code>张量。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">scalar = tf.constant(<span class="literal">True</span>)  <span class="comment">#标量，0维张量</span></span><br><span class="line">vector = tf.constant([<span class="number">1.0</span>,<span class="number">2.0</span>,<span class="number">3.0</span>,<span class="number">4.0</span>]) <span class="comment">#向量，1维张量</span></span><br><span class="line">matrix = tf.constant([[<span class="number">1.0</span>,<span class="number">2.0</span>],[<span class="number">3.0</span>,<span class="number">4.0</span>]]) <span class="comment">#矩阵, 2维张量</span></span><br><span class="line">tensor3 = tf.constant([[[<span class="number">1.0</span>,<span class="number">2.0</span>],[<span class="number">3.0</span>,<span class="number">4.0</span>]],[[<span class="number">5.0</span>,<span class="number">6.0</span>],[<span class="number">7.0</span>,<span class="number">8.0</span>]]])  <span class="comment"># 3维张量</span></span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#可以用tf.cast改变张量的数据类型。</span></span><br><span class="line">h = tf.constant([<span class="number">123</span>,<span class="number">456</span>],dtype = tf.int32)</span><br><span class="line">f = tf.cast(h,tf.float32)</span><br><span class="line"></span><br><span class="line"><span class="comment">#可以用numpy方法将tensorflow中的张量转化成numpy中的张量。</span></span><br><span class="line">y = tf.constant([[<span class="number">1.0</span>,<span class="number">2.0</span>],[<span class="number">3.0</span>,<span class="number">4.0</span>]])</span><br><span class="line">y.numpy() <span class="comment">#转换成np.array</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#可以用shape方法查看张量的尺寸。</span></span><br><span class="line">y.shape</span><br></pre></td></tr></table></figure></div><h5 id="（2）变量张量"><a href="#（2）变量张量" class="headerlink" title="（2）变量张量"></a>（2）变量张量</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 常量值不可以改变，常量的重新赋值相当于创造新的内存空间</span></span><br><span class="line">c = tf.constant([<span class="number">1.0</span>,<span class="number">2.0</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 变量的值可以改变，可以通过assign, assign_add等方法给变量重新赋值</span></span><br><span class="line">v = tf.Variable([<span class="number">1.0</span>,<span class="number">2.0</span>],name = <span class="string">"v"</span>)</span><br><span class="line">v.assign_add([<span class="number">1.0</span>,<span class="number">1.0</span>])</span><br></pre></td></tr></table></figure></div><h4 id="2、三种计算图"><a href="#2、三种计算图" class="headerlink" title="2、三种计算图"></a>2、三种计算图</h4><p><code>静态计算图</code>，<code>动态计算图</code>，以及<code>Autograph</code>.</p><blockquote><p>在TensorFlow2.0时代，采用的是动态计算图，即每使用一个算子后，该算子会被动态加入到隐含的默认计算图中立即执行得到结果，而无需开启Session。</p></blockquote><p>使用动态计算图即Eager Excution的好处是方便调试程序，它会让TensorFlow代码的表现和Python原生代码的表现一样，写起来就像写numpy一样，各种日志打印，控制流全部都是可以使用的。</p><p>使用动态计算图的缺点是运行效率相对会低一些。因为使用动态图会有许多次Python进程和TensorFlow的C++进程之间的通信。而静态计算图构建完成之后几乎全部在TensorFlow内核上使用C++代码执行，效率更高。此外静态图会对计算步骤进行一定的优化，剪去和结果无关的计算步骤。</p><p>如果需要在TensorFlow2.0中使用静态图，可以使用@tf.function装饰器将普通Python函数转换成对应的TensorFlow计算图构建代码。运行该函数就相当于在TensorFlow1.0中用Session执行代码。使用tf.function构建静态图的方式叫做 Autograph.</p><h5 id="1-静态计算图"><a href="#1-静态计算图" class="headerlink" title="(1)静态计算图"></a>(1)静态计算图</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在TensorFlow1.0中，使用静态计算图分两步，第一步定义计算图，第二步在会话中执行计算图。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义计算图</span></span><br><span class="line">g = tf.Graph()</span><br><span class="line"><span class="keyword">with</span> g.as_default():</span><br><span class="line">    <span class="comment">#placeholder为占位符，执行会话时候指定填充对象</span></span><br><span class="line">    x = tf.placeholder(name=<span class="string">'x'</span>, shape=[], dtype=tf.string)  </span><br><span class="line">    y = tf.placeholder(name=<span class="string">'y'</span>, shape=[], dtype=tf.string)</span><br><span class="line">    z = tf.string_join([x,y],name = <span class="string">'join'</span>,separator=<span class="string">' '</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#执行计算图</span></span><br><span class="line"><span class="keyword">with</span> tf.Session(graph = g) <span class="keyword">as</span> sess:</span><br><span class="line">    print(sess.run(fetches = z,feed_dict = &#123;x:<span class="string">"hello"</span>,y:<span class="string">"world"</span>&#125;))</span><br></pre></td></tr></table></figure></div><p><strong>TensorFlow2.0 怀旧版静态计算图</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#TensorFlow2.0为了确保对老版本tensorflow项目的兼容性，在tf.compat.v1子模块中保留了对TensorFlow1.0那种静态计算图构建风格的支持。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line">g = tf.compat.v1.Graph()</span><br><span class="line"><span class="keyword">with</span> g.as_default():</span><br><span class="line">    x = tf.compat.v1.placeholder(name=<span class="string">'x'</span>, shape=[], dtype=tf.string)</span><br><span class="line">    y = tf.compat.v1.placeholder(name=<span class="string">'y'</span>, shape=[], dtype=tf.string)</span><br><span class="line">    z = tf.strings.join([x,y],name = <span class="string">"join"</span>,separator = <span class="string">" "</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> tf.compat.v1.Session(graph = g) <span class="keyword">as</span> sess:</span><br><span class="line">    <span class="comment"># fetches的结果非常像一个函数的返回值，而feed_dict中的占位符相当于函数的参数序列。</span></span><br><span class="line">    result = sess.run(fetches = z,feed_dict = &#123;x:<span class="string">"hello"</span>,y:<span class="string">"world"</span>&#125;)</span><br><span class="line">    print(result)</span><br></pre></td></tr></table></figure></div><h5 id="2-动态计算图"><a href="#2-动态计算图" class="headerlink" title="(2)动态计算图"></a>(2)动态计算图</h5><blockquote><p>动态计算图已经不区分计算图的定义和执行了，而是定义后立即执行。因此称之为 <code>Eager Excution</code>.Eager这个英文单词的原意是”迫不及待的”，也就是立即执行的意思。(但是动态计算图运行效率比较低！)</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 动态计算图在每个算子处都进行构建，构建后立即执行</span></span><br><span class="line"></span><br><span class="line">x = tf.constant(<span class="string">"hello"</span>)</span><br><span class="line">y = tf.constant(<span class="string">"world"</span>)</span><br><span class="line">z = tf.strings.join([x,y],separator=<span class="string">" "</span>)</span><br></pre></td></tr></table></figure></div><h5 id="3-TensorFlow2-0的Autograph"><a href="#3-TensorFlow2-0的Autograph" class="headerlink" title="(3)TensorFlow2.0的Autograph"></a>(3)TensorFlow2.0的Autograph</h5><blockquote><p>在TensorFlow2.0中，如果采用Autograph的方式使用计算图，第一步定义计算图变成了定义函数，第二步执行计算图变成了调用函数。</p></blockquote><blockquote><p>实践中，我们一般会先用动态计算图调试代码，然后在需要提高性能的的地方利用<code>@tf.function</code>切换成Autograph获得更高的效率。</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以用@tf.function装饰器将普通Python函数转换成和TensorFlow1.0对应的静态计算图构建代码。</span></span><br><span class="line"><span class="comment"># 使用autograph构建静态图</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@tf.function</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">strjoin</span><span class="params">(x,y)</span>:</span></span><br><span class="line">    z =  tf.strings.join([x,y],separator = <span class="string">" "</span>)</span><br><span class="line">    tf.print(z)</span><br><span class="line">    <span class="keyword">return</span> z</span><br><span class="line"></span><br><span class="line">result = strjoin(tf.constant(<span class="string">"hello"</span>),tf.constant(<span class="string">"world"</span>))</span><br><span class="line"></span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure></div><h4 id="3、自动微分机制"><a href="#3、自动微分机制" class="headerlink" title="3、自动微分机制"></a>3、自动微分机制</h4><blockquote><p>神经网络通常依赖反向传播求梯度来更新网络参数，求梯度过程通常是一件非常复杂而容易出错的事情。而深度学习框架可以帮助我们自动地完成这种求梯度运算。Tensorflow一般使用梯度磁带<code>tf.GradientTape</code>来记录正向运算过程，然后反播磁带自动得到梯度值。这种利用tf.GradientTape求微分的方法叫做Tensorflow的自动微分机制。</p></blockquote><h5 id="（1）利用梯度磁带求导数"><a href="#（1）利用梯度磁带求导数" class="headerlink" title="（1）利用梯度磁带求导数"></a>（1）利用梯度磁带求导数</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span><br><span class="line"></span><br><span class="line"><span class="comment"># f(x) = a*x**2 + b*x + c的导数</span></span><br><span class="line"></span><br><span class="line">x = tf.Variable(<span class="number">0.0</span>,name = <span class="string">"x"</span>,dtype = tf.float32)</span><br><span class="line">a = tf.constant(<span class="number">1.0</span>)</span><br><span class="line">b = tf.constant(<span class="number">-2.0</span>)</span><br><span class="line">c = tf.constant(<span class="number">1.0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> tf.GradientTape() <span class="keyword">as</span> tape:</span><br><span class="line">    y = a*tf.pow(x,<span class="number">2</span>) + b*x + c</span><br><span class="line"></span><br><span class="line">dy_dx = tape.gradient(y,x)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对常量张量也可以求导，需要增加watch</span></span><br><span class="line"><span class="keyword">with</span> tf.GradientTape() <span class="keyword">as</span> tape:</span><br><span class="line">    tape.watch([a,b,c])</span><br><span class="line">    y = a*tf.pow(x,<span class="number">2</span>) + b*x + c</span><br><span class="line">dy_dx,dy_da,dy_db,dy_dc = tape.gradient(y,[x,a,b,c])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以求二阶导数</span></span><br><span class="line"><span class="keyword">with</span> tf.GradientTape() <span class="keyword">as</span> tape2:</span><br><span class="line">    <span class="keyword">with</span> tf.GradientTape() <span class="keyword">as</span> tape1:   </span><br><span class="line">        y = a*tf.pow(x,<span class="number">2</span>) + b*x + c</span><br><span class="line">    dy_dx = tape1.gradient(y,x)   </span><br><span class="line">dy2_dx2 = tape2.gradient(dy_dx,x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以在autograph中使用</span></span><br><span class="line"><span class="meta">@tf.function</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x)</span>:</span>   </span><br><span class="line">    a = tf.constant(<span class="number">1.0</span>)</span><br><span class="line">    b = tf.constant(<span class="number">-2.0</span>)</span><br><span class="line">    c = tf.constant(<span class="number">1.0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 自变量转换成tf.float32</span></span><br><span class="line">    x = tf.cast(x,tf.float32)</span><br><span class="line">    <span class="keyword">with</span> tf.GradientTape() <span class="keyword">as</span> tape:</span><br><span class="line">        tape.watch(x)</span><br><span class="line">        y = a*tf.pow(x,<span class="number">2</span>)+b*x+c</span><br><span class="line">    dy_dx = tape.gradient(y,x) </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>((dy_dx,y))</span><br></pre></td></tr></table></figure></div><h5 id="（2）利用梯度磁带和优化器求最小值"><a href="#（2）利用梯度磁带和优化器求最小值" class="headerlink" title="（2）利用梯度磁带和优化器求最小值"></a>（2）利用梯度磁带和优化器求最小值</h5><h6 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h6><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 求f(x) = a*x**2 + b*x + c的最小值</span></span><br><span class="line"><span class="comment"># 使用optimizer.apply_gradients</span></span><br><span class="line"></span><br><span class="line">x = tf.Variable(<span class="number">0.0</span>,name = <span class="string">"x"</span>,dtype = tf.float32)</span><br><span class="line">a = tf.constant(<span class="number">1.0</span>)</span><br><span class="line">b = tf.constant(<span class="number">-2.0</span>)</span><br><span class="line">c = tf.constant(<span class="number">1.0</span>)</span><br><span class="line"></span><br><span class="line">optimizer = tf.keras.optimizers.SGD(learning_rate=<span class="number">0.01</span>)</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">1000</span>):</span><br><span class="line">    <span class="keyword">with</span> tf.GradientTape() <span class="keyword">as</span> tape:</span><br><span class="line">        y = a*tf.pow(x,<span class="number">2</span>) + b*x + c</span><br><span class="line">    dy_dx = tape.gradient(y,x)</span><br><span class="line">    optimizer.apply_gradients(grads_and_vars=[(dy_dx,x)])</span><br><span class="line"></span><br><span class="line">tf.print(<span class="string">"y ="</span>,y,<span class="string">"; x ="</span>,x)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">y = <span class="number">0</span> ; x = <span class="number">0.999998569</span></span><br></pre></td></tr></table></figure></div><h6 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h6><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 求f(x) = a*x**2 + b*x + c的最小值</span></span><br><span class="line"><span class="comment"># 使用optimizer.minimize</span></span><br><span class="line"><span class="comment"># optimizer.minimize相当于先用tape求gradient,再apply_gradient</span></span><br><span class="line"></span><br><span class="line">x = tf.Variable(<span class="number">0.0</span>,name = <span class="string">"x"</span>,dtype = tf.float32)</span><br><span class="line"></span><br><span class="line"><span class="comment">#注意f()无参数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">()</span>:</span>   </span><br><span class="line">    a = tf.constant(<span class="number">1.0</span>)</span><br><span class="line">    b = tf.constant(<span class="number">-2.0</span>)</span><br><span class="line">    c = tf.constant(<span class="number">1.0</span>)</span><br><span class="line">    y = a*tf.pow(x,<span class="number">2</span>)+b*x+c</span><br><span class="line">    <span class="keyword">return</span>(y)</span><br><span class="line"></span><br><span class="line">optimizer = tf.keras.optimizers.SGD(learning_rate=<span class="number">0.01</span>)   </span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">1000</span>):</span><br><span class="line">    optimizer.minimize(f,[x])   </span><br><span class="line"></span><br><span class="line">tf.print(<span class="string">"y ="</span>,f(),<span class="string">"; x ="</span>,x)</span><br><span class="line"></span><br><span class="line">y = <span class="number">0</span> ; x = <span class="number">0.999998569</span></span><br></pre></td></tr></table></figure></div><h6 id="方式三"><a href="#方式三" class="headerlink" title="方式三"></a>方式三</h6><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在autograph中完成最小值求解</span></span><br><span class="line"><span class="comment"># 使用optimizer.apply_gradients</span></span><br><span class="line"></span><br><span class="line">x = tf.Variable(<span class="number">0.0</span>,name = <span class="string">"x"</span>,dtype = tf.float32)</span><br><span class="line">optimizer = tf.keras.optimizers.SGD(learning_rate=<span class="number">0.01</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@tf.function</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">minimizef</span><span class="params">()</span>:</span></span><br><span class="line">    a = tf.constant(<span class="number">1.0</span>)</span><br><span class="line">    b = tf.constant(<span class="number">-2.0</span>)</span><br><span class="line">    c = tf.constant(<span class="number">1.0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> tf.range(<span class="number">1000</span>): <span class="comment">#注意autograph时使用tf.range(1000)而不是range(1000)</span></span><br><span class="line">        <span class="keyword">with</span> tf.GradientTape() <span class="keyword">as</span> tape:</span><br><span class="line">            y = a*tf.pow(x,<span class="number">2</span>) + b*x + c</span><br><span class="line">        dy_dx = tape.gradient(y,x)</span><br><span class="line">        optimizer.apply_gradients(grads_and_vars=[(dy_dx,x)])</span><br><span class="line"></span><br><span class="line">    y = a*tf.pow(x,<span class="number">2</span>) + b*x + c</span><br><span class="line">    <span class="keyword">return</span> y</span><br><span class="line"></span><br><span class="line">tf.print(minimizef())</span><br><span class="line">tf.print(x)</span><br></pre></td></tr></table></figure></div><h6 id="方式四"><a href="#方式四" class="headerlink" title="方式四"></a>方式四</h6><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在autograph中完成最小值求解</span></span><br><span class="line"><span class="comment"># 使用optimizer.minimize</span></span><br><span class="line"></span><br><span class="line">x = tf.Variable(<span class="number">0.0</span>,name = <span class="string">"x"</span>,dtype = tf.float32)</span><br><span class="line">optimizer = tf.keras.optimizers.SGD(learning_rate=<span class="number">0.01</span>)   </span><br><span class="line"></span><br><span class="line"><span class="meta">@tf.function</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">()</span>:</span>   </span><br><span class="line">    a = tf.constant(<span class="number">1.0</span>)</span><br><span class="line">    b = tf.constant(<span class="number">-2.0</span>)</span><br><span class="line">    c = tf.constant(<span class="number">1.0</span>)</span><br><span class="line">    y = a*tf.pow(x,<span class="number">2</span>)+b*x+c</span><br><span class="line">    <span class="keyword">return</span>(y)</span><br><span class="line"></span><br><span class="line"><span class="meta">@tf.function</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train</span><span class="params">(epoch)</span>:</span>  </span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> tf.range(epoch):  </span><br><span class="line">        optimizer.minimize(f,[x])</span><br><span class="line">    <span class="keyword">return</span>(f())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">tf.print(train(<span class="number">1000</span>))</span><br><span class="line">tf.print(x)</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> TensorFlow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深度学习之人脸识别模型--FaceNet</title>
      <link href="/2020/04/17/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E4%B9%8B%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB%E6%A8%A1%E5%9E%8B-FaceNet/"/>
      <url>/2020/04/17/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E4%B9%8B%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB%E6%A8%A1%E5%9E%8B-FaceNet/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="一、FaceNet模型"><a href="#一、FaceNet模型" class="headerlink" title="一、FaceNet模型"></a>一、FaceNet模型</h3><h4 id="1-、FaceNet源码仓库，本地代码存放在facenet-master文件夹下面"><a href="#1-、FaceNet源码仓库，本地代码存放在facenet-master文件夹下面" class="headerlink" title="(1)、FaceNet源码仓库，本地代码存放在facenet-master文件夹下面"></a>(1)、FaceNet源码仓库，本地代码存放在facenet-master文件夹下面</h4><p>​            <a href="https://github.com/davidsandberg/facenet" target="_blank" rel="noopener">https://github.com/davidsandberg/facenet</a></p><h4 id="2-、FaceNet源码解读（网友解读版一），代码存放在understand-facenet文件夹下"><a href="#2-、FaceNet源码解读（网友解读版一），代码存放在understand-facenet文件夹下" class="headerlink" title="(2)、FaceNet源码解读（网友解读版一），代码存放在understand_facenet文件夹下"></a>(2)、FaceNet源码解读（网友解读版一），代码存放在understand_facenet文件夹下</h4><p>​            <a href="https://blog.csdn.net/u013044310/article/details/79556099" target="_blank" rel="noopener">https://blog.csdn.net/u013044310/article/details/79556099</a><br>​            <a href="https://github.com/boyliwensheng/understand_facenet（配套源码地址）" target="_blank" rel="noopener">https://github.com/boyliwensheng/understand_facenet（配套源码地址）</a></p><h4 id="3-、FaceNet源码解读（网友解读版二），代码存放在facenet-master文件夹下"><a href="#3-、FaceNet源码解读（网友解读版二），代码存放在facenet-master文件夹下" class="headerlink" title="(3)、FaceNet源码解读（网友解读版二），代码存放在facenet-master文件夹下"></a>(3)、FaceNet源码解读（网友解读版二），代码存放在facenet-master文件夹下</h4><p>​            <a href="https://blog.csdn.net/huangshaoyin/article/details/81034551" target="_blank" rel="noopener">https://blog.csdn.net/huangshaoyin/article/details/81034551</a></p><h4 id="4-、triplet-reid源码地址"><a href="#4-、triplet-reid源码地址" class="headerlink" title="(4)、triplet-reid源码地址"></a>(4)、triplet-reid源码地址</h4><p>​            <a href="https://github.com/VisualComputingInstitute/triplet-reid" target="_blank" rel="noopener">https://github.com/VisualComputingInstitute/triplet-reid</a></p><h4 id="5-、FaceNet源码解读-网友解读版三-，（2）是在借鉴此作者的博客，"><a href="#5-、FaceNet源码解读-网友解读版三-，（2）是在借鉴此作者的博客，" class="headerlink" title="(5)、FaceNet源码解读(网友解读版三)，（2）是在借鉴此作者的博客，"></a>(5)、FaceNet源码解读(网友解读版三)，（2）是在借鉴此作者的博客，</h4><ul><li>本篇博客也提供了各种人脸数据集的介绍和<code>预模型</code>的下载<pre><code>https://blog.csdn.net/MrCharles/article/details/80360461</code></pre></li></ul><h3 id="二、人脸匹配数据准备"><a href="#二、人脸匹配数据准备" class="headerlink" title="二、人脸匹配数据准备"></a>二、人脸匹配数据准备</h3><h4 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h4><ul><li>tensorflow==1.7</li><li>scipy</li><li>scikit-learn</li><li>opencv-python</li><li>h5py</li><li>matplotlib</li><li>Pillow</li><li>requests</li><li>psutil</li></ul><h4 id="数据集"><a href="#数据集" class="headerlink" title="数据集"></a>数据集</h4><ul><li>LFW  下载地址：<a href="http://vis-www.cs.umass.edu/lfw/#views" target="_blank" rel="noopener">http://vis-www.cs.umass.edu/lfw/#views</a>  谷歌网盘（需要梯子）：<a href="https://drive.google.com/drive/u/0/folders/0B7EVK8r0v71pQ3NzdzRhVUhSams" target="_blank" rel="noopener">https://drive.google.com/drive/u/0/folders/0B7EVK8r0v71pQ3NzdzRhVUhSams</a></li><li>Celeba 下载地址：<a href="http://mmlab.ie.cuhk.edu.hk/projects/CelebA.html" target="_blank" rel="noopener">http://mmlab.ie.cuhk.edu.hk/projects/CelebA.html</a></li><li>VGGface2</li><li>CASIA-WebFace</li><li>CASIA-faceV5</li><li>更多人脸数据集请看：<a href="https://www.cnblogs.com/ansang/p/8137413.html" target="_blank" rel="noopener">https://www.cnblogs.com/ansang/p/8137413.html</a></li></ul><h4 id="数据格式"><a href="#数据格式" class="headerlink" title="数据格式"></a>数据格式</h4><ul><li><p>文件夹名/文件夹名_文件名</p></li><li><p>同一个热的图片放在相同文件夹</p></li></ul><h4 id="Pre-trained-models"><a href="#Pre-trained-models" class="headerlink" title="Pre-trained models"></a>Pre-trained models</h4><ul><li><a href="https://blog.csdn.net/MrCharles/article/details/80360461" target="_blank" rel="noopener">https://blog.csdn.net/MrCharles/article/details/80360461</a>  （一）中的第五点</li></ul><p><a href="https://ae01.alicdn.com/kf/Hbea52004ac754ea7a7883812f23fade2N.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://ae01.alicdn.com/kf/Hbea52004ac754ea7a7883812f23fade2N.png" class="lazyload"></a></p><p>模型下载链接：<a href="https://pan.baidu.com/s/1aiSq7wGpdHIe6MUKPnXgrA" target="_blank" rel="noopener">https://pan.baidu.com/s/1aiSq7wGpdHIe6MUKPnXgrA</a> 密码：4dcn</p><blockquote><p>20170512-110547（MS-Celeb-1M数据集训练的模型文件，微软人脸识别数据库，名人榜选择前100万名人，搜索引擎采集每个名人100张人脸图片。预训练模型准确率0.993+-0.004）</p></blockquote><h4 id="Inception-ResNet-v1-模型图"><a href="#Inception-ResNet-v1-模型图" class="headerlink" title="Inception ResNet v1 模型图"></a>Inception ResNet v1 模型图</h4><a href="https://ae01.alicdn.com/kf/Hd053b820ced845f58090b433d513c8f3o.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img style="zoom:80%;" data-src="https://ae01.alicdn.com/kf/Hd053b820ced845f58090b433d513c8f3o.png" class="lazyload"></a><h3 id="三、一些问题"><a href="#三、一些问题" class="headerlink" title="三、一些问题"></a>三、一些问题</h3><h4 id="1、解决出现ModuleNotFoundError-No-module-named-39-facenet-39-异常"><a href="#1、解决出现ModuleNotFoundError-No-module-named-39-facenet-39-异常" class="headerlink" title="1、解决出现ModuleNotFoundError: No module named &#39;facenet&#39;异常"></a>1、解决出现<code>ModuleNotFoundError: No module named &#39;facenet&#39;</code>异常</h4><ul><li>a.在cmd（需要管理员权限）命令行键入：set PYTHONPATH=…\facenet\src, 例如笔者的是:set PYTHONPATH=D:\Python\Work\face-system\face-net\facenet-master\src</li><li>b.在 计算机–&gt;属性–&gt;高级系统设置–&gt;环境变量 中,新建PYTHONPATH,键入 D:\Python\Work\face-system\face-net\facenet-master\src</li><li>c.如果使用pycharm，请记得重启pycharm</li></ul><h4 id="2、重新裁剪LFM图片数据集的大小"><a href="#2、重新裁剪LFM图片数据集的大小" class="headerlink" title="2、重新裁剪LFM图片数据集的大小"></a>2、重新裁剪LFM图片数据集的大小</h4><blockquote><p>程序中神经网络使用的是谷歌的“inception resnet v1”网络模型，这个模型的输入时160x160的图像，而我们下载的LFW数据集是250x250限像素的图像，所以需要进行图片的预处理。</p></blockquote><ul><li>原本数据集放在raw文件夹下面，新裁剪的图片放在ifw_160文件夹下面</li></ul><p>data/lfw/raw ：D:\Python\Work\face-system\face-net\facenet-master\data\ifw\raw<br>data/lfw/lfw_160：D:\Python\Work\face-system\face-net\facenet-master\data\ifw\ifw_160</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 运行脚本，记得将图片文件夹修改为自己的文件夹目录</span></span><br><span class="line">python src\align\align_dataset_mtcnn.py data/lfw/raw data/lfw/lfw_160 --image_size 160 --margin 32</span><br></pre></td></tr></table></figure></div><ul><li>pycharm中运行记得修改成下面这样</li></ul><p><a href="https://ae01.alicdn.com/kf/H8bfbd1bb2f2b474681a4a92b42731c65U.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://ae01.alicdn.com/kf/H8bfbd1bb2f2b474681a4a92b42731c65U.png" class="lazyload"></a></p><h4 id="3、评估预训练模型的准确率"><a href="#3、评估预训练模型的准确率" class="headerlink" title="3、评估预训练模型的准确率"></a>3、评估预训练模型的准确率</h4><h5 id="1）、模型下载"><a href="#1）、模型下载" class="headerlink" title="1）、模型下载"></a>1）、模型下载</h5><blockquote><p>facenet提供了两个预训练模型，分别是基于CASIA-WebFace和MS-Celeb-1M人脸库训练的，不过需要去谷歌网盘下载，这里给其中一个模型的百度网盘的链接：</p></blockquote><p><a href="https://pan.baidu.com/s/1LLPIitZhXVI_V3ifZ10XNg#list/path=%2F" target="_blank" rel="noopener">https://pan.baidu.com/s/1LLPIitZhXVI_V3ifZ10XNg#list/path=%2F</a> 密码: 12mh</p><blockquote><p>模型放在data文件夹下，没有就创建</p></blockquote><h5 id="2）、运行脚本"><a href="#2）、运行脚本" class="headerlink" title="2）、运行脚本"></a>2）、运行脚本</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 运行脚本,同样的，目录改为自己的</span></span><br><span class="line">data\lfw\lfw_160：D:\\Python\\Work\\face-system\\face-net\\facenet-master\\data\\ifw\\ifw_160</span><br><span class="line">src\models\20180408-102900：D:\\Python\\Work\\face-system\\face-net\\facenet-master\\data\\models\\20180408-102900</span><br><span class="line"></span><br><span class="line">Python src\validate_on_lfw.py data\lfw\lfw_160 src\models\20180408-102900</span><br></pre></td></tr></table></figure></div><ul><li>安装网络上面的做法会出现错误，是应为data/pairs.txt读取不到，所以需要在运行脚本上面加上`–lfw_pairs=txt的地址<br><a href="https://ae01.alicdn.com/kf/H9f8ff6240a024da4821d07c405654677G.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://ae01.alicdn.com/kf/H9f8ff6240a024da4821d07c405654677G.png" class="lazyload"></a></li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">运行脚本,同样的，目录改为自己的</span><br><span class="line"></span><br><span class="line">data\lfw\lfw_160：D:\\Python\\Work\\face-system\\face-net\\facenet-master\\data\\ifw\\ifw_160</span><br><span class="line">src\models\20180408-102900：D:\\Python\\Work\\face-system\\face-net\\facenet-master\\data\\models\\20180408-102900</span><br><span class="line">data/pairs.txt：D:\\Python\\Work\\face-system\\face-net\\facenet-master\\data\\pairs.txt</span><br><span class="line"></span><br><span class="line">Python src\validate_on_lfw.py data\lfw\lfw_160 src\models\20180408-102900 --lfw_pairs=data/pairs.txt</span><br></pre></td></tr></table></figure></div><h5 id="3-、TensorFlow版本导致报错"><a href="#3-、TensorFlow版本导致报错" class="headerlink" title="3)、TensorFlow版本导致报错"></a>3)、TensorFlow版本导致报错</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2020-04-17 00:27:11.307949: W tensorflow/core/graph/graph_constructor.cc:1272] Importing a graph with a lower producer version 24 into an existing graph with producer version 27. Shape inference will have run different parts of the graph with different producer versions.</span><br><span class="line">Traceback (most recent call last):</span><br></pre></td></tr></table></figure></div><ul><li><p>解决方案</p><p>1.把Tensorflow换为1.7版本的；</p><p>2.在<code>facenet.py</code>代码中找到<code>create_input_pipeline</code> 再添加一行语句<code>with tf.name_scope(&quot;tempscope&quot;):</code> 就可以完美解决（貌似Tensorflow 1.10及以上版本才修复这个bug）。</p><p><a href="https://ae01.alicdn.com/kf/H2eb7b8dc5d984ecca4f52703467fb45b0.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://ae01.alicdn.com/kf/H2eb7b8dc5d984ecca4f52703467fb45b0.png" class="lazyload"></a></p></li><li><p>运行结果，可以看出，模型的精度高达99.7%</p><a href="https://ae01.alicdn.com/kf/Hbe49c52d5942488fbed1296a0514254cW.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img style="zoom: 80%;" data-src="https://ae01.alicdn.com/kf/Hbe49c52d5942488fbed1296a0514254cW.png" class="lazyload"></a></li></ul><h4 id="4、人脸对比程序运行"><a href="#4、人脸对比程序运行" class="headerlink" title="4、人脸对比程序运行"></a>4、人脸对比程序运行</h4><blockquote><p>FaceNet可以对比两张人脸图片，可以得出他们的经过网络映射之后的欧式距离，相同的人脸的距离越小。</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 参数：第一个参数为预模型的地址，第二个和第三个参数为图片的地址</span></span><br><span class="line">python src\compare.py </span><br><span class="line">D:\\Python\\Work\\face-system\\face-net\\facenet-master\\data\\models\\20180408-102900</span><br><span class="line">D:\\Python\\Work\\face-system\\face-net\\facenet-master\\data\\ifw\\ifw_160\\Aaron_Eckhart\\Aaron_Eckhart_0001.png</span><br><span class="line">D:\\Python\\Work\\face-system\\face-net\\facenet-master\\data\\ifw\\ifw_160\\Aaron_Guiel\\Aaron_Guiel_0001.png</span><br></pre></td></tr></table></figure></div><ul><li><p>pycharm中运行记得修改成下面这样:<br><a href="https://ae01.alicdn.com/kf/Ha03a9c0a688b4b7fa4352fe0ab5f59270.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://ae01.alicdn.com/kf/Ha03a9c0a688b4b7fa4352fe0ab5f59270.png" class="lazyload"></a></p></li><li><p>运行结果如下：</p></li></ul><p><a href="https://ae01.alicdn.com/kf/H1ee064785b9a455b88ec83ccd54999d06.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://ae01.alicdn.com/kf/H1ee064785b9a455b88ec83ccd54999d06.png" class="lazyload"></a></p><h4 id="5、GPU内存溢出问题，已经解决"><a href="#5、GPU内存溢出问题，已经解决" class="headerlink" title="5、GPU内存溢出问题，已经解决"></a>5、GPU内存溢出问题，已经解决</h4><blockquote><p>在<code>detect_face.py</code>中加入下面的配置，防止出现GPU内存不足报错，放在代码靠前的位置</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">config = tf.ConfigProto(allow_soft_placement=<span class="literal">True</span>)</span><br><span class="line">gpu_options = tf.GPUOptions(per_process_gpu_memory_fraction=<span class="number">0.5</span>) <span class="comment">#此处调整GPU的利用率</span></span><br><span class="line">config.gpu_options.allow_growth = <span class="literal">True</span></span><br></pre></td></tr></table></figure></div><h3 id="四、相关函数"><a href="#四、相关函数" class="headerlink" title="四、相关函数"></a>四、相关函数</h3><h4 id="1、主要函数"><a href="#1、主要函数" class="headerlink" title="1、主要函数"></a>1、主要函数</h4><ul><li>align/ ：用于人脸检测与人脸对齐的神经网络</li><li>facenet ：用于人脸映射的神经网络</li><li>util/plot_learning_curves.m:这是用来在训练softmax模型的时候用matlab显示训练过程的程序</li></ul><h4 id="2、facenet-contributed-相关函数："><a href="#2、facenet-contributed-相关函数：" class="headerlink" title="2、facenet/contributed/相关函数："></a>2、facenet/contributed/相关函数：</h4><h5 id="1）、基于mtcnn与facenet的人脸聚类"><a href="#1）、基于mtcnn与facenet的人脸聚类" class="headerlink" title="1）、基于mtcnn与facenet的人脸聚类"></a>1）、基于mtcnn与facenet的人脸聚类</h5><blockquote><p>代码：<code>facenet/contributed/cluster.py</code>（<code>facenet/contributed/clustering.py</code>实现了相似的功能，只是没有<code>mtcnn</code>进行检测这一步）</p></blockquote><p>主要功能：</p><ul><li><p>① 使用<code>mtcnn</code>进行人脸检测并对齐与裁剪</p></li><li><p>② 对裁剪的人脸使用<code>facenet</code>进行<code>embedding</code></p></li><li><p>③ 对<code>embedding</code>的特征向量使用欧式距离进行聚类</p></li></ul><h5 id="2）、基于mtcnn与facenet的人脸识别（输入单张图片判断这人是谁）"><a href="#2）、基于mtcnn与facenet的人脸识别（输入单张图片判断这人是谁）" class="headerlink" title="2）、基于mtcnn与facenet的人脸识别（输入单张图片判断这人是谁）"></a>2）、基于mtcnn与facenet的人脸识别（输入单张图片判断这人是谁）</h5><blockquote><p>代码：<code>facenet/contributed/predict.py</code></p></blockquote><p>主要功能：</p><ul><li><p>① 使用<code>mtcnn</code>进行人脸检测并对齐与裁剪</p></li><li><p>② 对裁剪的人脸使用<code>facenet</code>进行<code>embedding</code></p></li><li><p>③ 执行<code>predict.py</code>进行人脸识别（需要训练好的svm模型）</p></li></ul><h5 id="3）、以numpy数组的形式输出人脸聚类和图像标签"><a href="#3）、以numpy数组的形式输出人脸聚类和图像标签" class="headerlink" title="3）、以numpy数组的形式输出人脸聚类和图像标签"></a>3）、以numpy数组的形式输出人脸聚类和图像标签</h5><p>代码：<code>facenet/contributed/export_embeddings.py</code></p><p>主要功能：</p><ul><li><p>① 需要对数据进行对齐与裁剪做为输入数据</p></li><li><p>② 输出<code>embeddings.npy</code>；<code>labels.npy</code>；<code>label_strings.npy</code></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
          <category> 人脸识别 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> TensorFlow </tag>
            
            <tag> FaceNet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java常用的设计模式</title>
      <link href="/2020/04/01/Java%E5%B8%B8%E7%94%A8%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/04/01/Java%E5%B8%B8%E7%94%A8%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="一、变种Builder模式（构造者模式）"><a href="#一、变种Builder模式（构造者模式）" class="headerlink" title="一、变种Builder模式（构造者模式）"></a>一、变种Builder模式（构造者模式）</h3><h4 id="1、构造者模式包含如下角色"><a href="#1、构造者模式包含如下角色" class="headerlink" title="1、构造者模式包含如下角色"></a>1、构造者模式包含如下角色</h4><ul><li>Builder：抽象建造者</li><li>ConcreteBuilder：具体建造者</li><li>Director：指挥者</li><li>Product：产品角色</li></ul><h4 id="2、对Builer模式使用方法的总结："><a href="#2、对Builer模式使用方法的总结：" class="headerlink" title="2、对Builer模式使用方法的总结："></a>2、对Builer模式使用方法的总结：</h4><blockquote><p>对于习惯使用get、set方法的人来说，构造者模式多此一举，但是用起来是真的香啊。 🤣 看看代码多么优雅呢！</p></blockquote><ul><li>（1）、外部类的构造函数私有，且参数为静态内部类；</li><li>（2）、静态内部类拥有外部类相同的属；</li><li>（3）、为每一个属性，写一个方法，返回的是Builer；</li><li>（4）、最后一个方法是build方法，用于构建一个外部类；</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 详情可以看《effective java》这本书</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//必要参数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//可选参数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="keyword">private</span> String desc;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(Builder builder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = builder.id;</span><br><span class="line">        <span class="keyword">this</span>.name = builder.name;</span><br><span class="line">        <span class="keyword">this</span>.age = builder.age;</span><br><span class="line">        <span class="keyword">this</span>.sex = builder.sex;</span><br><span class="line">        <span class="keyword">this</span>.phone = builder.phone;</span><br><span class="line">        <span class="keyword">this</span>.address = builder.address;</span><br><span class="line">        <span class="keyword">this</span>.desc = builder.desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1、在要构建类的内部，创建一个静态内部类Builder；</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 2、静态内部类的属性要与构建类的属性一致；</span></span><br><span class="line">    </span><br><span class="line">        <span class="comment">//必要参数</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> id;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//可选参数</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">        <span class="keyword">private</span> String sex;</span><br><span class="line">        <span class="keyword">private</span> String phone;</span><br><span class="line">        <span class="keyword">private</span> String address;</span><br><span class="line">        <span class="keyword">private</span> String desc;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3、构建类的构造参数是静态内部类，使用静态内部类的变量为构建类逐一赋值；</span></span><br><span class="line">    </span><br><span class="line">        <span class="comment">//初始构造器，强制设置必要参数</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Builder</span><span class="params">(<span class="keyword">int</span> id, String name)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.id = id;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">sex</span><span class="params">(String sex)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.sex = sex;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">phone</span><span class="params">(String phone)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.phone = phone;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">address</span><span class="params">(String address)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.address = address;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">desc</span><span class="params">(String desc)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.desc = desc;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4、静态内部类提供参数的setter方法，并且返回值是当前Builder对象；</span></span><br><span class="line">    </span><br><span class="line">        <span class="comment">// Person调用builder方法，返回Builder对象</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Person <span class="title">builder</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Person(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Person&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">", sex='"</span> + sex + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", phone='"</span> + phone + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", address='"</span> + address + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", desc='"</span> + desc + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//测试</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person person = <span class="keyword">new</span> Person.Builder(<span class="number">1</span>,<span class="string">"michong"</span>).sex(<span class="string">"男"</span>).builder();</span><br><span class="line">        System.out.println(person.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="二、单例模式"><a href="#二、单例模式" class="headerlink" title="二、单例模式"></a>二、单例模式</h3><blockquote><p>当需要控制一个类的实例只能有一个，而且客户只能从一个全局访问点访问它时，可以选用单例模式，这些功能恰好是单例模式要解决的问题。</p></blockquote><h4 id="五种实现方式"><a href="#五种实现方式" class="headerlink" title="五种实现方式"></a>五种实现方式</h4><h5 id="1、懒汉式"><a href="#1、懒汉式" class="headerlink" title="1、懒汉式"></a>1、懒汉式</h5><blockquote><p>先判断，再生成对象</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 懒汉式单例实现方式</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Administrator</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义一个变量来存储创建好的实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 私有化构造方法，可以在内部控制创建实例的数目</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义一个方法为客户端提供类实例</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 判断存储实例的变量是否有值</span></span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果没有，就创建一个类实例，并把值赋给存储类实例的变量</span></span><br><span class="line">            instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h5 id="2、饿汉式"><a href="#2、饿汉式" class="headerlink" title="2、饿汉式"></a>2、饿汉式</h5><blockquote><p>二话不说，直接生成对象</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 饿汉式单例</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Administrator</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义一个变量来存储创建好的类实例，直接在这里创建类实例，只能创建一次</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton2 instance = <span class="keyword">new</span> Singleton2();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 私有化构造方法，可以在内部控制创建实例的数目</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton2 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h5 id="3、双重加锁"><a href="#3、双重加锁" class="headerlink" title="3、双重加锁"></a>3、双重加锁</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton3</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对保存实例的变量添加volatile的修饰</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton3 instance = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton3 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 先检查实例是否存在，如果不存在才金如意下面的模块</span></span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 同步块，线程安全得创建实例</span></span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton3<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">                <span class="comment">// 再次检查实例是否存在，如果不存在才真正地创建实例</span></span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> Singleton3();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h5 id="4、静态内部类"><a href="#4、静态内部类" class="headerlink" title="4、静态内部类"></a>4、静态内部类</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用静态内部类实现单例模式</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Administrator</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton4</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 没有绑定关系，而且只有被调用到时才会装载，从而实现延迟加载</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> Administrator</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHolder</span> </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 静态初始化器，由JVM来保证线程安全</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> Singleton4 instance = <span class="keyword">new</span> Singleton4();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton4 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonHolder.instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h5 id="5、枚举"><a href="#5、枚举" class="headerlink" title="5、枚举"></a>5、枚举</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用枚举来实现单例</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Administrator</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Singleton5 &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义 一个枚举的元素，它就代表了Singleton的实例</span></span><br><span class="line">    instance;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.err.println(Singleton5.instance.hashCode());</span><br><span class="line">        System.err.println(Singleton5.instance.hashCode());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="三、简单工厂模式"><a href="#三、简单工厂模式" class="headerlink" title="三、简单工厂模式"></a>三、简单工厂模式</h3><h4 id="1、定义"><a href="#1、定义" class="headerlink" title="1、定义"></a>1、定义</h4><blockquote><p>提供一个<code>创建对象实例</code>的功能，而无须关心其具体实现。被创建的类型可以是<code>接口</code>、<code>抽象类</code>，也可以是<code>具体类</code></p></blockquote><h4 id="2、选择的时机"><a href="#2、选择的时机" class="headerlink" title="2、选择的时机"></a>2、选择的时机</h4><ul><li>完全封装隔离具体实现，让外部只能通过接口来操作封装体</li><li>想要把对创建对象的职责集中管理和控制</li></ul><h4 id="3、示例代码"><a href="#3、示例代码" class="headerlink" title="3、示例代码"></a>3、示例代码</h4><h5 id="Api"><a href="#Api" class="headerlink" title="Api"></a>Api</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 接口的定义，该接口可以 通过简单工厂创建</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Api</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 具体功能方法的 定义</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> s 需要的参数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">(String s)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h5 id="ImplA"><a href="#ImplA" class="headerlink" title="ImplA"></a>ImplA</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 接口具体实现A</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImplA</span> <span class="keyword">implements</span> <span class="title">Api</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 实现功能的代码</span></span><br><span class="line">        System.out.println(<span class="string">"ImplA s="</span> + s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h5 id="ImplB"><a href="#ImplB" class="headerlink" title="ImplB"></a>ImplB</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 接口具体实现B</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Administrator</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImplB</span> <span class="keyword">implements</span> <span class="title">Api</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 实现功能的代码</span></span><br><span class="line">        System.out.println(<span class="string">"ImplA s="</span> + s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h5 id="Factoty"><a href="#Factoty" class="headerlink" title="Factoty"></a>Factoty</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 工厂类，用来创建Api对象</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Administrator</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Factory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Factory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Factory <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> FactoryHolder.factory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 具体创建Api对象的方法</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> condition</span></span><br><span class="line"><span class="comment">     *            从外部传入的参数条件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 创建好的APi对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Api <span class="title">createApi</span><span class="params">(<span class="keyword">int</span> condition)</span> </span>&#123;</span><br><span class="line">        Api api = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (condition == <span class="number">1</span>) &#123;</span><br><span class="line">            api = <span class="keyword">new</span> ImplA();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (condition == <span class="number">2</span>) &#123;</span><br><span class="line">            api = <span class="keyword">new</span> ImplB();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> api;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">FactoryHolder</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Factory factory = <span class="keyword">new</span> Factory();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h5 id="Client"><a href="#Client" class="headerlink" title="Client"></a>Client</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 客户端，使用Api接口</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Administrator</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 通过简单工厂来获取接口对象</span></span><br><span class="line">        Api api = Factory.getInstance().createApi(<span class="number">1</span>);</span><br><span class="line">        api.operation(<span class="string">"正在使用简单工厂~"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="四、工厂方法模式"><a href="#四、工厂方法模式" class="headerlink" title="四、工厂方法模式"></a>四、工厂方法模式</h3><h4 id="1、定义-1"><a href="#1、定义-1" class="headerlink" title="1、定义"></a>1、定义</h4><blockquote><p>定义一个用于创建对象的借口，让子类决定实例化哪一个类，FactoryMethod使一个类的实例化延迟到子类。</p></blockquote><h4 id="2、结构"><a href="#2、结构" class="headerlink" title="2、结构"></a>2、结构</h4><p><code>Product</code>:定义工厂方法所创建的对象的接口，也就是实际需要使用的对象的接口。</p><p><code>ConcreteProduct</code>:具体的Product接口的实现对象。</p><p><code>Creator</code>:创建器，声明工厂方法，工厂方法通常会返回一个Product类的实例对象，而且多是抽象方法</p><p><code>ConcreteCreator</code>:具体的创建器对象，覆盖实现Creator定义的工厂方法，返回具体的Product实例</p><h4 id="3、示例代码-1"><a href="#3、示例代码-1" class="headerlink" title="3、示例代码"></a>3、示例代码</h4><h5 id="Product"><a href="#Product" class="headerlink" title="Product"></a>Product</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 工厂方法所创建的对象的接口</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Administrator</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h5 id="ConcreteProduct"><a href="#ConcreteProduct" class="headerlink" title="ConcreteProduct"></a>ConcreteProduct</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 具体的product对象</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Administrator</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteProduct</span> <span class="keyword">implements</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h5 id="Creator"><a href="#Creator" class="headerlink" title="Creator"></a>Creator</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建器，声明工厂方法</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Administrator</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Creator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建Product的工厂方法</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> Product <span class="title">factoryMethod</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实现某些功能的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">someOperation</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通常在这些方法实现需要调用工厂方法来获取Product对象</span></span><br><span class="line">        Product product = factoryMethod();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h5 id="ConcreteCreator"><a href="#ConcreteCreator" class="headerlink" title="ConcreteCreator"></a>ConcreteCreator</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteCreator</span> <span class="keyword">extends</span> <span class="title">Creator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Product <span class="title">factoryMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ConcreteProduct();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="五、抽象工厂模式（Abstract-Factory-Pattern）"><a href="#五、抽象工厂模式（Abstract-Factory-Pattern）" class="headerlink" title="五、抽象工厂模式（Abstract Factory Pattern）"></a>五、抽象工厂模式（Abstract Factory Pattern）</h3><h4 id="1、定义-2"><a href="#1、定义-2" class="headerlink" title="1、定义"></a>1、定义</h4><blockquote><p>提供一个创建一系列相关或相互依赖对象的接口，而无须指定它们具体的类。抽象工厂模式又称为Kit模式，属于对象创建型模式。</p></blockquote><h4 id="2、模式结构"><a href="#2、模式结构" class="headerlink" title="2、模式结构"></a>2、模式结构</h4><ul><li><code>AbstractFactory</code>：抽象工厂</li><li><code>ConcreteFactory</code>：具体工厂</li><li><code>AbstractProduct</code>：抽象产品</li><li><code>Product</code>：具体产品<br><a href="https://file.buildworld.cn/img/20200331231328.png" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="https://file.buildworld.cn/img/20200331231328.png" class="lazyload"></a></li></ul><h3 id="六、其他"><a href="#六、其他" class="headerlink" title="六、其他"></a>六、其他</h3><p><a href="https://www.runoob.com/design-pattern/design-pattern-tutorial.html" target="_blank" rel="noopener">更多的设计模式请看菜鸟教程</a></p>]]></content>
      
      
      <categories>
          
          <category> 面试笔试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python进阶(一)</title>
      <link href="/2020/03/14/Python%E8%BF%9B%E9%98%B6-%E4%B8%80/"/>
      <url>/2020/03/14/Python%E8%BF%9B%E9%98%B6-%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h4 id="1、args-和-kwargs"><a href="#1、args-和-kwargs" class="headerlink" title="1、args 和 *kwargs"></a>1、<em>args 和 *</em>kwargs</h4><h5 id="args"><a href="#args" class="headerlink" title="*args"></a>*args</h5><blockquote><p> *args 是⽤来发送⼀个⾮键值对的可变数量的参数列表给⼀个函数.</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_var_args</span><span class="params">(f_arg, *argv)</span>:</span></span><br><span class="line">    print(<span class="string">"first normal arg:"</span>, f_arg)</span><br><span class="line">    <span class="keyword">for</span> arg <span class="keyword">in</span> argv:</span><br><span class="line">        print(<span class="string">"another arg through *argv:"</span>, arg)</span><br><span class="line">test_var_args(<span class="string">'yasoob'</span>, <span class="string">'python'</span>, <span class="string">'eggs'</span>, <span class="string">'test'</span>)</span><br><span class="line"></span><br><span class="line">这会产⽣如下输出:</span><br><span class="line">first normal arg: yasoob</span><br><span class="line">another arg through *argv: python</span><br><span class="line">another arg through *argv: eggs</span><br><span class="line">another arg through *argv: test</span><br></pre></td></tr></table></figure></div><h5 id="kwargs"><a href="#kwargs" class="headerlink" title="**kwargs"></a>**kwargs</h5><blockquote><p> <strong>**kwargs 允许你将不定长度的键值对, 作为参数传递给⼀个函数。 如果你想要在⼀个函数⾥处理带名字的参数, 你应该使⽤</strong> **kwargs。比如参数是字典</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">def greet_me(**kwargs):</span><br><span class="line">    for key,value in kwargs.items():</span><br><span class="line">        print (&quot;&#123;0&#125; &#x3D;&#x3D; &#123;1&#125;&quot;.format(key,value))</span><br><span class="line"></span><br><span class="line">greet_me(name&#x3D;&#39;michong&#39;,age&#x3D;10)        </span><br><span class="line"></span><br><span class="line">输出</span><br><span class="line">name &#x3D;&#x3D; michong</span><br><span class="line">age &#x3D;&#x3D; 10</span><br></pre></td></tr></table></figure></div><blockquote><p>标准参数与<em>args、*</em>kwargs在使⽤时的顺序</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">demo_func(fargs, *args, **kwargs)</span><br></pre></td></tr></table></figure></div><h4 id="2、调试-Debugging"><a href="#2、调试-Debugging" class="headerlink" title="2、调试(Debugging)"></a>2、调试(Debugging)</h4><h5 id="pdb-set-trace-方法"><a href="#pdb-set-trace-方法" class="headerlink" title="pdb.set_trace()方法"></a>pdb.set_trace()方法</h5><blockquote><p>这个方法在jupter Notebook中也可以使用，这个方法使用的时候直接放在需要打断点的地方</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pdb</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_bread</span><span class="params">()</span>:</span></span><br><span class="line">    pdb.set_trace()</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"I don't have time"</span></span><br><span class="line">print(make_bread())</span><br></pre></td></tr></table></figure></div><h5 id="debugger模式下的命令"><a href="#debugger模式下的命令" class="headerlink" title="debugger模式下的命令"></a>debugger模式下的命令</h5><ul><li>c: 继续执⾏</li><li>w: 显⽰当前正在执⾏的代码⾏的上下⽂信息</li><li>a: 打印当前函数的参数列表</li><li>s: 执⾏当前代码⾏，并停在第⼀个能停的地⽅（相当于单步进⼊）</li><li>n: 继续执⾏到当前函数的下⼀⾏，或者当前⾏直接返回（单步跳过）</li></ul><h4 id="3、Generator-生成器"><a href="#3、Generator-生成器" class="headerlink" title="3、Generator 生成器"></a>3、Generator 生成器</h4><h5 id="可迭代对象-Iterable"><a href="#可迭代对象-Iterable" class="headerlink" title="可迭代对象(Iterable)"></a>可迭代对象(Iterable)</h5><blockquote><p>对象中定义了可以返回一个迭代器的<strong>iter</strong>方法，或者定义了可以⽀持下标索引的<strong>getitem</strong>⽅法，它就是一个可迭代对象</p></blockquote><h5 id="迭代器-Iterator"><a href="#迭代器-Iterator" class="headerlink" title="迭代器(Iterator)"></a>迭代器(Iterator)</h5><blockquote><p>任意定义了next或者<strong>next</strong>发放，它就是一个迭代器</p></blockquote><h5 id="迭代-Iteration"><a href="#迭代-Iteration" class="headerlink" title="迭代(Iteration)"></a>迭代(Iteration)</h5><blockquote><p>循环遍历的过程叫迭代</p></blockquote><h5 id="⽣成器-Generators"><a href="#⽣成器-Generators" class="headerlink" title="⽣成器(Generators)"></a>⽣成器(Generators)</h5><blockquote><p>它也是一中迭代器，使用yield生成一个值</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">def generator_function():</span><br><span class="line">    for i in range(10):</span><br><span class="line">        yield i</span><br><span class="line">for item in generator_function():</span><br><span class="line">    print(item)</span><br><span class="line">    </span><br><span class="line">输出：</span><br><span class="line">    # Output: 0</span><br><span class="line">    # 1</span><br><span class="line">    # 2</span><br><span class="line">    # 3</span><br><span class="line">    # 4</span><br><span class="line">    # 5</span><br><span class="line">    # 6</span><br><span class="line">    # 7</span><br><span class="line">    # 8</span><br><span class="line">    # 9</span><br></pre></td></tr></table></figure></div><h4 id="4、Map，Filter-和-Reduce"><a href="#4、Map，Filter-和-Reduce" class="headerlink" title="4、Map，Filter 和 Reduce"></a>4、Map，Filter 和 Reduce</h4><h5 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h5><h6 id="遍历元素"><a href="#遍历元素" class="headerlink" title="遍历元素"></a>遍历元素</h6><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">items &#x3D; [1, 2, 3, 4, 5]</span><br><span class="line">squared &#x3D; list(map(lambda x: x**2, items))</span><br></pre></td></tr></table></figure></div><h6 id="遍历方法"><a href="#遍历方法" class="headerlink" title="遍历方法"></a>遍历方法</h6><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">def multiply(x):</span><br><span class="line">    return (x*x)</span><br><span class="line">def add(x):</span><br><span class="line">    return (x+x)</span><br><span class="line">funcs &#x3D; [multiply, add]</span><br><span class="line">for i in range(5):</span><br><span class="line">    value &#x3D; map(lambda x: x(i), funcs)</span><br><span class="line">    print(list(value))</span><br><span class="line"># 译者注：上⾯print时，加了list转换，是为了python2&#x2F;3的兼容性</span><br><span class="line"># 在python2中map直接返回列表，但在python3中返回迭代器</span><br><span class="line"># 因此为了兼容python3, 需要list转换⼀下</span><br><span class="line"></span><br><span class="line"># Output:</span><br><span class="line"># [0, 0]</span><br><span class="line"># [1, 2]</span><br><span class="line"># [4, 4]</span><br><span class="line"># [9, 6]</span><br><span class="line"># [16, 8]</span><br></pre></td></tr></table></figure></div><h5 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h5><blockquote><p>filter过滤列表中的元素，并且返回⼀个由所有符合要求的元素所构成的列<br>表，符合要求即函数映射到该元素时返回值为True. </p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">number_list &#x3D; range(-5,5)</span><br><span class="line">list(filter(lambda x:x%2&#x3D;&#x3D;0 , number_list))</span><br><span class="line"></span><br><span class="line">output</span><br><span class="line">    [-4, -2, 0, 2, 4]</span><br></pre></td></tr></table></figure></div><h5 id="Reduce"><a href="#Reduce" class="headerlink" title="Reduce"></a>Reduce</h5><blockquote><p>对一个列表进行计算并返回结果，可以使用Reduce函数</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#下面执行的是列表里面所有的元素相互相加的功能</span><br><span class="line">from functools import reduce</span><br><span class="line">reduce((lambda x, y:x+y),[1,2,3,4])</span><br><span class="line"></span><br><span class="line">output：</span><br><span class="line">    10</span><br></pre></td></tr></table></figure></div><h4 id="5、set数据结构"><a href="#5、set数据结构" class="headerlink" title="5、set数据结构"></a>5、set数据结构</h4><h5 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">some_list &#x3D; [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;b&#39;, &#39;d&#39;, &#39;m&#39;, &#39;n&#39;, &#39;n&#39;]</span><br><span class="line">duplicates &#x3D; set([x for x in some_list if some_list.count(x) &gt; 1])</span><br><span class="line">print(duplicates)</span><br><span class="line"></span><br><span class="line">##输出: set([&#39;b&#39;, &#39;n&#39;])</span><br></pre></td></tr></table></figure></div><h5 id="交集"><a href="#交集" class="headerlink" title="交集"></a>交集</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">valid &#x3D; set([&#39;yellow&#39;,&#39;red&#39;,&#39;blue&#39;,&#39;green&#39;,&#39;black&#39;])</span><br><span class="line">input_set &#x3D; set([&#39;red&#39;,&#39;brown&#39;])</span><br><span class="line">print(input_set.intersection(valid))</span><br><span class="line"></span><br><span class="line">output:</span><br><span class="line">&#123;&#39;red&#39;&#125;</span><br></pre></td></tr></table></figure></div><h5 id="差集"><a href="#差集" class="headerlink" title="差集"></a>差集</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">valid &#x3D; set([&#39;yellow&#39;,&#39;red&#39;,&#39;blue&#39;,&#39;green&#39;,&#39;black&#39;])</span><br><span class="line">input_set &#x3D; set([&#39;red&#39;,&#39;brown&#39;])</span><br><span class="line">print(input_set.difference(valid))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">output：</span><br><span class="line">&#123;&#39;brown&#39;&#125;</span><br></pre></td></tr></table></figure></div><h5 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h5><h6 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h6><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s.add( x )</span><br><span class="line"></span><br><span class="line">s.update( x ) ##也可以添加元素，且参数可以是列表</span><br></pre></td></tr></table></figure></div><h6 id="移除元素"><a href="#移除元素" class="headerlink" title="移除元素"></a>移除元素</h6><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">s.remove( x ) ##将元素 x 从集合 s 中移除，如果元素不存在，则会发生错误。</span><br><span class="line">s.discard( x ) ##此外还有一个方法也是移除集合中的元素，且如果元素不存在，不会发生错误。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s.discard( x ) ##此外还有一个方法也是移除集合中的元素，且如果元素不存在，不会发生错误。</span><br><span class="line"></span><br><span class="line">s.pop()  ##随机删除集合中的一个元素</span><br></pre></td></tr></table></figure></div><h6 id="计算集合元素个数"><a href="#计算集合元素个数" class="headerlink" title="计算集合元素个数"></a>计算集合元素个数</h6><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">len(s)</span><br></pre></td></tr></table></figure></div><h6 id="清空集合"><a href="#清空集合" class="headerlink" title="清空集合"></a>清空集合</h6><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s.clear()</span><br></pre></td></tr></table></figure></div><h6 id="集合内置方法完整列表"><a href="#集合内置方法完整列表" class="headerlink" title="集合内置方法完整列表"></a>集合内置方法完整列表</h6><p><a href="http://myfile.buildworld.cn/360%E6%88%AA%E5%9B%BE18430709535842.png" data-fancybox="group" data-caption="集合内置方法完整列表" class="fancybox"><img alt="集合内置方法完整列表" title="集合内置方法完整列表" data-src="http://myfile.buildworld.cn/360%E6%88%AA%E5%9B%BE18430709535842.png" class="lazyload"></a></p>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python版本的OpenCV安装</title>
      <link href="/2020/03/05/Python%E7%89%88%E6%9C%AC%E7%9A%84OpenCV%E5%AE%89%E8%A3%85/"/>
      <url>/2020/03/05/Python%E7%89%88%E6%9C%AC%E7%9A%84OpenCV%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="第一步、安装Anaconda"><a href="#第一步、安装Anaconda" class="headerlink" title="第一步、安装Anaconda"></a>第一步、安装Anaconda</h3><p><a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/" target="_blank" rel="noopener">https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/</a></p><h3 id="第二步、-创建虚拟环境"><a href="#第二步、-创建虚拟环境" class="headerlink" title="第二步、 创建虚拟环境"></a>第二步、 创建虚拟环境</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create --name opencv-env python=3.7</span><br></pre></td></tr></table></figure></div><h3 id="第三步、激活虚拟环境，也就是进入到虚拟环境中去"><a href="#第三步、激活虚拟环境，也就是进入到虚拟环境中去" class="headerlink" title="第三步、激活虚拟环境，也就是进入到虚拟环境中去"></a>第三步、激活虚拟环境，也就是进入到虚拟环境中去</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">activate opencv-env</span><br></pre></td></tr></table></figure></div><h3 id="第四步、安装opencv-contrib"><a href="#第四步、安装opencv-contrib" class="headerlink" title="第四步、安装opencv+contrib"></a>第四步、安装opencv+contrib</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install numpy scipy matplotlib scikit-learn jupyter</span><br><span class="line">pip install opencv-contrib-python</span><br></pre></td></tr></table></figure></div><h3 id="第五步、测试"><a href="#第五步、测试" class="headerlink" title="第五步、测试"></a>第五步、测试</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line">cv2.__version__</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> 人工智能 </category>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> OpenCV </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建Typecho博客</title>
      <link href="/2020/03/04/%E6%90%AD%E5%BB%BATypecho%E5%8D%9A%E5%AE%A2/"/>
      <url>/2020/03/04/%E6%90%AD%E5%BB%BATypecho%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h3><p><a href="http://typecho.org/" target="_blank" rel="noopener">typecho官网</a><br><a href="http://lab.qqdie.com/docs/#/" target="_blank" rel="noopener">开发文档</a></p><blockquote><p>其实对于大多数人来说，我们不必关系typecho网站的开发，主要是项目的部署和主题的更换。</p></blockquote><blockquote><p>对于我来说，我大学的时候就开始写博客了，开始的CSDN,wordpress到后来的hexo,再到gridea，因为手头有服务器和域名，所以就干脆整一个typecho了  ，WordPress主要太大了，使用起来感觉很臃肿，就抛弃了。</p></blockquote><h3 id="二、使用"><a href="#二、使用" class="headerlink" title="二、使用"></a>二、使用</h3><h4 id="1、部署"><a href="#1、部署" class="headerlink" title="1、部署"></a>1、部署</h4><blockquote><p>如果手头有闲置的服务器，环境也没有配置的话，我建议使用phpstudy环境，一键搭建Nginx+Php+MySQL环境</p></blockquote><p><a href="https://www.xp.cn/linux.html" target="_blank" rel="noopener">phpstudy官网地址</a></p><blockquote><p>Centos一键安装，注意系统要求没有安装过docker环境  </p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y wget &amp;&amp; wget -O install.sh https://download.xp.cn/install.sh &amp;&amp; sh install.sh</span><br></pre></td></tr></table></figure></div><p><code>简直傻瓜式有木有</code></p><p><a href="https://ae01.alicdn.com/kf/H563e8c7e6111451f95264075fe157751K.png#vwid=1915&vhei=959" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://ae01.alicdn.com/kf/H563e8c7e6111451f95264075fe157751K.png#vwid=1915&vhei=959" class="lazyload"></a></p><h4 id="2、主题美化"><a href="#2、主题美化" class="headerlink" title="2、主题美化"></a>2、主题美化</h4><blockquote><p>接下来就是主题的修改，推荐下面的网址，不仅有各种主题，还有好用的插件</p></blockquote><p><a href="https://typecho.me/" target="_blank" rel="noopener" title="typecho主题网站">typecho主题网站</a></p><blockquote><p>本文的主题来自<a href="https://blog.imalan.cn/archives/247/" target="_blank" rel="noopener">https://blog.imalan.cn/archives/247/</a> ，强烈推荐 👍   github地址：<a href="https://github.com/AlanDecode/Typecho-Theme-VOID" target="_blank" rel="noopener">https://github.com/AlanDecode/Typecho-Theme-VOID</a> </p></blockquote><blockquote><p>另外推荐几个网站</p></blockquote><p><a href="https://qqdie.com/" target="_blank" rel="noopener">https://qqdie.com/</a></p><h4 id="3、常用插件"><a href="#3、常用插件" class="headerlink" title="3、常用插件"></a>3、常用插件</h4><table><thead><tr><th>名称</th><th>描述</th><th>项目地址</th></tr></thead><tbody><tr><td>APlayer for Typecho(Meting)</td><td>在 Typecho 中使用 APlayer 播放在线音乐吧～</td><td><a href="https://github.com/MoePlayer/APlayer-Typecho" target="_blank" rel="noopener">https://github.com/MoePlayer/APlayer-Typecho</a></td></tr><tr><td>DoubanBoard</td><td>在博客上展示你的豆瓣书单与豆瓣影单</td><td>详细介绍 <a href="https://blog.imalan.cn/archives/168/" target="_blank" rel="noopener">https://blog.imalan.cn/archives/168/</a></td></tr><tr><td>EditorMD</td><td>增强Markdown编写</td><td>详细介绍 <a href="https://blog.imalan.cn/archives/168/" target="_blank" rel="noopener">https://blog.imalan.cn/archives/168/</a></td></tr><tr><td>Qiniu File</td><td>将 Typecho 的附件上传至七牛云存储中。</td><td><a href="https://lichaoxi.com/" target="_blank" rel="noopener">https://lichaoxi.com/</a></td></tr><tr><td>DPlayer</td><td>将 Typecho 的附件上传至七牛云存储中。</td><td><a href="https://plugins.typecho.me/plugins/qiniu-file.html" target="_blank" rel="noopener">https://plugins.typecho.me/plugins/qiniu-file.html</a></td></tr><tr><td>KaTeX4Typecho</td><td>数学公式展示</td><td><a href="https://github.com/vc12345679/KaTeX4Typecho" target="_blank" rel="noopener">https://github.com/vc12345679/KaTeX4Typecho</a></td></tr><tr><td>YoduPlayer</td><td>一款清爽的BGM播放器,需要您的主题支持pjax或者instantclick才能保证页面切换依旧播放</td><td><a href="https://qqdie.com/archives/typecho-yoduplayer.html" target="_blank" rel="noopener">https://qqdie.com/archives/typecho-yoduplayer.html</a></td></tr></tbody></table><blockquote><p>更多插件请看下面网址</p></blockquote><p><a href="https://qqdie.com/plugins/" target="_blank" rel="noopener">https://qqdie.com/plugins/</a><br><a href="https://plugins.typecho.me/" target="_blank" rel="noopener">https://plugins.typecho.me/</a></p><h3 id="三、常见的问题"><a href="#三、常见的问题" class="headerlink" title="三、常见的问题"></a>三、常见的问题</h3><h4 id="1、网站开启SSL"><a href="#1、网站开启SSL" class="headerlink" title="1、网站开启SSL"></a>1、网站开启SSL</h4><ul><li>首先在网站根目录找到<code>config.inc.php</code>，添加代码</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 开启HTTPS */</span></span><br><span class="line">define(<span class="string">'__TYPECHO_SECURE__'</span>,<span class="keyword">true</span>);</span><br></pre></td></tr></table></figure></div><ul><li>其次在phpstudy站点设置中开启SSL,SSL证书需要自己去申请，但是phpstudy中有免费的SSL，还可以自动设置脚本在SSL过期前自动申请SSL</li></ul><p><a href="https://ae01.alicdn.com/kf/Hcd540c702407448986313199dd5e859dq.png#vwid=825&vhei=702" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://ae01.alicdn.com/kf/Hcd540c702407448986313199dd5e859dq.png#vwid=825&vhei=702" class="lazyload"></a></p><h4 id="2、typecho如果使用MySQL，默认不支持emoji的"><a href="#2、typecho如果使用MySQL，默认不支持emoji的" class="headerlink" title="2、typecho如果使用MySQL，默认不支持emoji的"></a>2、typecho如果使用MySQL，默认不支持emoji的</h4><ul><li>首先将typecho使用的数据格式设置成 <code>utf8mb4_unicode_ci</code></li><li>然后进入该数据执行下面的sql语句<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> typecho_comments <span class="keyword">convert</span> <span class="keyword">to</span> <span class="built_in">character</span> <span class="keyword">set</span> utf8mb4 <span class="keyword">collate</span> utf8mb4_general_ci;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> typecho_contents <span class="keyword">convert</span> <span class="keyword">to</span> <span class="built_in">character</span> <span class="keyword">set</span> utf8mb4 <span class="keyword">collate</span> utf8mb4_general_ci;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> typecho_fields <span class="keyword">convert</span> <span class="keyword">to</span> <span class="built_in">character</span> <span class="keyword">set</span> utf8mb4 <span class="keyword">collate</span> utf8mb4_general_ci;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> typecho_metas <span class="keyword">convert</span> <span class="keyword">to</span> <span class="built_in">character</span> <span class="keyword">set</span> utf8mb4 <span class="keyword">collate</span> utf8mb4_general_ci;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> typecho_options <span class="keyword">convert</span> <span class="keyword">to</span> <span class="built_in">character</span> <span class="keyword">set</span> utf8mb4 <span class="keyword">collate</span> utf8mb4_general_ci;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> typecho_relationships <span class="keyword">convert</span> <span class="keyword">to</span> <span class="built_in">character</span> <span class="keyword">set</span> utf8mb4 <span class="keyword">collate</span> utf8mb4_general_ci;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> typecho_users <span class="keyword">convert</span> <span class="keyword">to</span> <span class="built_in">character</span> <span class="keyword">set</span> utf8mb4 <span class="keyword">collate</span> utf8mb4_general_ci;</span><br></pre></td></tr></table></figure></div></li><li>网站根目录数据库配置文件<code>config.inc.php</code>,修改一下</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 定义数据库参数 */</span></span><br><span class="line">$db = <span class="keyword">new</span> Typecho_Db(<span class="string">'Pdo_Mysql'</span>, <span class="string">'typecho_'</span>);</span><br><span class="line">$db-&gt;addServer(<span class="keyword">array</span> (</span><br><span class="line">  ...</span><br><span class="line">  <span class="string">'charset'</span> =&gt; <span class="string">'utf8mb4'</span>,  <span class="comment">// 修改编码为 utf8mb4</span></span><br><span class="line">  ...</span><br><span class="line">), Typecho_Db::READ | Typecho_Db::WRITE);</span><br><span class="line">Typecho_Db::set($db);</span><br></pre></td></tr></table></figure></div><ul><li>OK👌</li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typecho </tag>
            
            <tag> 博客开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python开发之Pandas的使用</title>
      <link href="/2019/09/20/Python%E5%BC%80%E5%8F%91%E4%B9%8BPandas%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/09/20/Python%E5%BC%80%E5%8F%91%E4%B9%8BPandas%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h4 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h4><ul><li><p>Pandas 是 Python 中的数据操纵和分析软件包，它是基于Numpy去开发的，所以Pandas的数据处理速度也很快，而且Numpy中的有些函数在Pandas中也能使用，方法也类似。</p></li><li><p>Pandas 为 Python 带来了两个新的数据结构，即 Pandas Series(可类比于表格中的某一列)和 Pandas DataFrame(可类比于表格)。借助这两个数据结构，我们能够轻松直观地处理带标签数据和关系数据。</p></li></ul><h4 id="二、创建Pandas-Series"><a href="#二、创建Pandas-Series" class="headerlink" title="二、创建Pandas Series"></a>二、创建Pandas Series</h4><blockquote><p>可以使用 pd.Series(data, index) 命令创建 Pandas Series，其中data表示输入数据， index 为对应数据的索引，除此之外，我们还可以添加参数dtype来设置该列的数据类型。</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd <span class="comment">#约定俗成的简称</span></span><br><span class="line">pd.Series(data = [<span class="number">30</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">5</span>], index = [<span class="string">'eggs'</span>, <span class="string">'apples'</span>, <span class="string">'milk'</span>, <span class="string">'bread'</span>],dtype=float)</span><br><span class="line"></span><br><span class="line">out:</span><br><span class="line">eggs      <span class="number">30.0</span></span><br><span class="line">apples     <span class="number">6.0</span></span><br><span class="line">milk       <span class="number">7.0</span></span><br><span class="line">bread      <span class="number">5.0</span></span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure></div><blockquote><p>data除了可以输入列表之外，还可以输入字典，或者是直接一个标量。</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pd.Series(data=&#123;<span class="string">'name'</span>:<span class="string">'michong'</span>,<span class="string">'age'</span>:<span class="number">18</span>&#125;)</span><br><span class="line"></span><br><span class="line">out:</span><br><span class="line">name    michong</span><br><span class="line">age          <span class="number">18</span></span><br><span class="line">dtype: object</span><br></pre></td></tr></table></figure></div><h4 id="三、访问和删除Series中的元素"><a href="#三、访问和删除Series中的元素" class="headerlink" title="三、访问和删除Series中的元素"></a>三、访问和删除Series中的元素</h4><h5 id="1、访问"><a href="#1、访问" class="headerlink" title="1、访问"></a>1、访问</h5><blockquote><p>一种类似于从列表中按照索引访问数据，一种类似于从字典中按照key来访问value。</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">s = pd.Series(data=<span class="number">8</span>,index=[<span class="string">'apple'</span>,<span class="string">'milk'</span>,<span class="string">'bread'</span>])</span><br><span class="line"></span><br><span class="line">s[<span class="number">0</span>]</span><br><span class="line">out:</span><br><span class="line">    <span class="number">8</span></span><br><span class="line"></span><br><span class="line">s[<span class="string">'apple'</span>]</span><br><span class="line">out:</span><br><span class="line">    <span class="number">8</span></span><br><span class="line">    </span><br><span class="line">s.loc[<span class="string">'apple'</span>]</span><br><span class="line">s.iloc[<span class="number">1</span>]</span><br></pre></td></tr></table></figure></div><h5 id="2、修改"><a href="#2、修改" class="headerlink" title="2、修改"></a>2、修改</h5><blockquote><p>修改完记得重新赋值即可</p></blockquote><h5 id="3、删除"><a href="#3、删除" class="headerlink" title="3、删除"></a>3、删除</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s.drop([<span class="string">'apple'</span>])</span><br><span class="line">out:</span><br><span class="line">    milk     <span class="number">8</span></span><br><span class="line">    bread    <span class="number">8</span></span><br><span class="line">    dtype: int64</span><br></pre></td></tr></table></figure></div><blockquote><p>.drop()函数并不会修改原来的数据，如果你想要修改原数据的话，可以选择添加参数inplace = True或者是用原数据替换s = s.drop(label)</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s.drop([<span class="string">'apple'</span>],inplace=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure></div><h4 id="四、DataFrame的使用"><a href="#四、DataFrame的使用" class="headerlink" title="四、DataFrame的使用"></a>四、DataFrame的使用</h4><h5 id="1、创建DataFrame"><a href="#1、创建DataFrame" class="headerlink" title="1、创建DataFrame"></a>1、创建DataFrame</h5><blockquote><p>pd.DataFrame(data, index, columns)</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data是数据，可以输入ndarray，或者是字典（字典中可以包含Series或arrays或），或者是DataFrame；</span><br><span class="line"></span><br><span class="line">index是索引，输入列表，如果没有设置该参数，会默认以<span class="number">0</span>开始往下计数；</span><br><span class="line"></span><br><span class="line">columns是列名，输入列表，如果没有设置该参数，会默认以<span class="number">0</span>开始往右计数；</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">d &#x3D; [[1,2],[3,4]]</span><br><span class="line">df &#x3D; pd.DataFrame(data&#x3D;d,index&#x3D;[&#39;a&#39;,&#39;b&#39;],columns&#x3D;[&#39;one&#39;,&#39;two&#39;])</span><br><span class="line">df</span><br><span class="line"></span><br><span class="line">out:</span><br><span class="line">    onetwo</span><br><span class="line">    a12</span><br><span class="line">    b34</span><br></pre></td></tr></table></figure></div><h5 id="2、访问DataFrame中的元素"><a href="#2、访问DataFrame中的元素" class="headerlink" title="2、访问DataFrame中的元素"></a>2、访问DataFrame中的元素</h5><ul><li>访问单行<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">df.loc[<span class="string">'a'</span>]</span><br><span class="line">df.iloc[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">out:</span><br><span class="line">    one    <span class="number">1</span></span><br><span class="line">    two    <span class="number">2</span></span><br><span class="line">    Name: a, dtype: int64</span><br></pre></td></tr></table></figure></div></li><li>访问多行</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">df.loc[[<span class="string">'a'</span>,<span class="string">'b'</span>]]</span><br><span class="line">df.iloc[[<span class="number">0</span>,<span class="number">1</span>]]</span><br><span class="line"></span><br><span class="line">out:</span><br><span class="line">    onetwo</span><br><span class="line">    a<span class="number">1</span><span class="number">2</span></span><br><span class="line">    b<span class="number">3</span><span class="number">4</span></span><br></pre></td></tr></table></figure></div><ul><li>访问某一列</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">df.one</span><br><span class="line">df[<span class="string">'one'</span>]</span><br><span class="line">df.iloc[:,<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">out：</span><br><span class="line">    a    <span class="number">1</span></span><br><span class="line">    b    <span class="number">3</span></span><br><span class="line">    Name: one, dtype: int64</span><br></pre></td></tr></table></figure></div><ul><li>访问多列</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">df[[<span class="string">'one'</span>,<span class="string">'two'</span>]]</span><br><span class="line">df.iloc[:,<span class="number">0</span>:<span class="number">2</span>] <span class="comment">#0-2,不包含2，即第三列</span></span><br><span class="line"></span><br><span class="line">out:</span><br><span class="line">    onetwo</span><br><span class="line">    a<span class="number">1</span><span class="number">2</span></span><br><span class="line">    b<span class="number">3</span><span class="number">4</span></span><br></pre></td></tr></table></figure></div><ul><li>访问某一个元素</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">df.iloc[<span class="number">0</span>,<span class="number">1</span>]    <span class="comment">#先访问行再访问列</span></span><br><span class="line">df[<span class="string">'two'</span>][<span class="string">'a'</span>]  <span class="comment">#先访问列再访问行</span></span><br><span class="line"></span><br><span class="line">out:</span><br><span class="line">    <span class="number">2</span></span><br></pre></td></tr></table></figure></div><h5 id="3、删除、增加元素"><a href="#3、删除、增加元素" class="headerlink" title="3、删除、增加元素"></a>3、删除、增加元素</h5><blockquote><p>使用.drop函数删除元素，默认为删除行，添加参数axis = 1来删除列。</p></blockquote><ul><li>删除行</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">df.drop([<span class="string">'a'</span>])</span><br><span class="line">    out:</span><br><span class="line">        onetwo</span><br><span class="line">    b<span class="number">3</span><span class="number">4</span></span><br></pre></td></tr></table></figure></div><ul><li>删除列</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">df.drop(<span class="string">'one'</span>,axis=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">out:</span><br><span class="line">    two</span><br><span class="line">    a<span class="number">2</span></span><br><span class="line">    b<span class="number">4</span></span><br></pre></td></tr></table></figure></div><p>==值得注意的是，drop函数不会修改原数据，如果想直接对原数据进行修改的话，可以选择添加参数inplace = True或用原变量名重新赋值替换。==</p><ul><li>增加元素<blockquote><p>一种是append()，另外一种是insert()</p></blockquote></li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">df.insert(<span class="number">2</span>,<span class="string">'T'</span>,<span class="number">8</span>) <span class="comment">#新生成一个列，列名称是T</span></span><br><span class="line"></span><br><span class="line">out:</span><br><span class="line">    onetwoT</span><br><span class="line">    a<span class="number">1</span><span class="number">2</span><span class="number">8</span></span><br><span class="line">    b<span class="number">3</span><span class="number">4</span><span class="number">8</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">df.insert(<span class="number">2</span>,<span class="string">'F'</span>,[<span class="number">9</span>,<span class="number">10</span>]) <span class="comment">#设定F列下的每一行的值</span></span><br><span class="line">out：</span><br><span class="line">        onetwoFT</span><br><span class="line">    a<span class="number">1</span><span class="number">2</span><span class="number">9</span><span class="number">8</span></span><br><span class="line">    b<span class="number">3</span><span class="number">4</span><span class="number">10</span><span class="number">8</span></span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">data2 &#x3D; pd.DataFrame([[8,9,10,11],[6,7,8,9]],</span><br><span class="line">                     columns&#x3D;[&#39;one&#39;,&#39;two&#39;,&#39;F&#39;,&#39;T&#39;]</span><br><span class="line">                    ,index&#x3D;[&#39;c&#39;,&#39;d&#39;])</span><br><span class="line">df.append(data2,ignore_index&#x3D;True)</span><br><span class="line"></span><br><span class="line">out:</span><br><span class="line">    onetwoFT</span><br><span class="line">    01298</span><br><span class="line">    134108</span><br><span class="line">    2891011</span><br><span class="line">    36789</span><br></pre></td></tr></table></figure></div><h5 id="4、重命名"><a href="#4、重命名" class="headerlink" title="4、重命名"></a>4、重命名</h5><ul><li>修改列的名称<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">df.rename(columns=&#123;<span class="string">'one'</span>:<span class="string">'第一列'</span>&#125;)</span><br><span class="line">out:</span><br><span class="line">        第一列twoFT</span><br><span class="line">    a<span class="number">1</span>   <span class="number">2</span><span class="number">9</span><span class="number">8</span></span><br><span class="line">    b<span class="number">3</span>   <span class="number">4</span><span class="number">10</span><span class="number">8</span></span><br></pre></td></tr></table></figure></div></li><li>修改行的名称</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">df.rename(index=&#123;<span class="string">'a'</span>:<span class="string">'第一行'</span>&#125;)</span><br><span class="line">out:</span><br><span class="line">            onetwo   F   T</span><br><span class="line">    第一行 <span class="number">1</span>  <span class="number">2</span>   <span class="number">9</span> <span class="number">8</span></span><br><span class="line">    b    <span class="number">3</span> <span class="number">4</span>   <span class="number">10</span><span class="number">8</span></span><br></pre></td></tr></table></figure></div><h5 id="5、更改索引"><a href="#5、更改索引" class="headerlink" title="5、更改索引"></a>5、更改索引</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">可以使用函数set_index(index_label)，将数据集的index设置为index_label。</span><br><span class="line"></span><br><span class="line">除此之外，还可以使用函数reset_index()重置数据集的index为0开始计数的数列。</span><br></pre></td></tr></table></figure></div><h5 id="6、缺失值-NaN-处理"><a href="#6、缺失值-NaN-处理" class="headerlink" title="6、缺失值(NaN)处理"></a>6、缺失值(NaN)处理</h5><ul><li>查找NaN</li></ul><blockquote><p>可以使用isnull()和notnull()函数来查看数据集中是否存在缺失数据，在该函数后面添加sum()函数来对缺失数量进行统计。除此之外，还可以使用count()函数对非NaN数据进行统计计数。</p></blockquote><ul><li>删除NaN – df.dropna()<blockquote><p>dropna()函数还有一个参数是how，当how = all时，只会删除全部数据都为NaN的列或行。</p></blockquote></li></ul><p>==不修改原来的数据==</p><ul><li>替换NaN</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">df.fillna(<span class="number">0</span>)</span><br><span class="line">out:</span><br><span class="line">        <span class="number">0</span>   <span class="number">1</span>   F T one    two</span><br><span class="line">a<span class="number">0.0</span> <span class="number">0.0</span><span class="number">9.0</span> <span class="number">8.0</span><span class="number">1.0</span> <span class="number">2.0</span></span><br><span class="line">b<span class="number">0.0</span> <span class="number">0.0</span>    <span class="number">10.0</span>    <span class="number">8.0</span> <span class="number">3.0</span>    <span class="number">4.0</span></span><br><span class="line"><span class="number">0</span><span class="number">5.0</span> <span class="number">6.0</span><span class="number">0.0</span> <span class="number">0.0</span><span class="number">0.0</span><span class="number">0.0</span></span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">使用fillna()函数可以替换NaN为某一值。其参数如下：</span><br><span class="line">    value：用来替换NaN的值</span><br><span class="line">    </span><br><span class="line">    method：常用有两种，一种是ffill前向填充，一种是backfill后向填充</span><br><span class="line">    </span><br><span class="line">    axis：0为行，1为列</span><br><span class="line">    </span><br><span class="line">    inplace：是否替换原数据，默认为False</span><br><span class="line">    </span><br><span class="line">    limit：接受int类型的输入，可以限定替换前多少个NaN</span><br></pre></td></tr></table></figure></div><h4 id="五、数据分析流程及Pandas应用"><a href="#五、数据分析流程及Pandas应用" class="headerlink" title="五、数据分析流程及Pandas应用"></a>五、数据分析流程及Pandas应用</h4><h5 id="1、打开文件"><a href="#1、打开文件" class="headerlink" title="1、打开文件"></a>1、打开文件</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#打开csv文件</span></span><br><span class="line">pd.read_csv(<span class="string">'filename'</span>)</span><br><span class="line"><span class="comment">#打开excel文件</span></span><br><span class="line">pd.read_excel(<span class="string">'filename'</span>)</span><br><span class="line"><span class="comment">#处理中文字符的tsv文件</span></span><br><span class="line">pd.read_csv(<span class="string">'filename'</span>,sep = <span class="string">'\t'</span>,encoding = <span class="string">'utf-8'</span>)</span><br></pre></td></tr></table></figure></div><h5 id="2、查看数据"><a href="#2、查看数据" class="headerlink" title="2、查看数据"></a>2、查看数据</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看前五行</span></span><br><span class="line">df.head()</span><br><span class="line"><span class="comment">#查看尾五行</span></span><br><span class="line">df.tail()</span><br><span class="line"><span class="comment">#查看随机一行</span></span><br><span class="line">df.sample()</span><br></pre></td></tr></table></figure></div><h5 id="3、查看数据信息"><a href="#3、查看数据信息" class="headerlink" title="3、查看数据信息"></a>3、查看数据信息</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看数据集行数和列数</span></span><br><span class="line">df.shape</span><br><span class="line"><span class="comment">#查看数据集信息（列名、数据类型、每列的数据量——可以看出数据缺失情况）</span></span><br><span class="line">df.info()</span><br><span class="line"><span class="comment">#查看数据集基本统计信息</span></span><br><span class="line">df.describe()</span><br><span class="line"><span class="comment">#查看数据集列名</span></span><br><span class="line">df.columns</span><br><span class="line"><span class="comment">#查看数据集数据缺失情况 </span></span><br><span class="line">df.isnull().sum()</span><br><span class="line"><span class="comment">#查看缺失列数据</span></span><br><span class="line">df[df[<span class="string">'col_name'</span>].isnull()]</span><br><span class="line"><span class="comment">#查看数据集数据重复情况</span></span><br><span class="line">sum(df.duplicated())</span><br><span class="line"><span class="comment">#查看重复数据</span></span><br><span class="line">df[df.duplicated()]</span><br><span class="line"><span class="comment">#查看某列分类统计情况</span></span><br><span class="line">df[<span class="string">'col_name'</span>].value_counts()</span><br><span class="line"><span class="comment">#查看某列唯一值</span></span><br><span class="line">df[<span class="string">'col_name'</span>].unique()</span><br><span class="line"><span class="comment">#查看某列唯一值数量</span></span><br><span class="line">df[<span class="string">'col_name'</span>].nunique()</span><br><span class="line"><span class="comment">#以某列对数据集进行排序</span></span><br><span class="line">df.sort_values(by = <span class="string">'col_name'</span>,ascending = <span class="literal">False</span>)<span class="comment">#False为由大至小</span></span><br></pre></td></tr></table></figure></div><h5 id="4、数据筛选"><a href="#4、数据筛选" class="headerlink" title="4、数据筛选"></a>4、数据筛选</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#提取某行</span></span><br><span class="line">df.iloc[row_index]</span><br><span class="line">df.loc[<span class="string">'row_name'</span>]</span><br><span class="line"><span class="comment">#提取某几行</span></span><br><span class="line">df.iloc[row_index_1:row_index_2]</span><br><span class="line"><span class="comment">#提取某列</span></span><br><span class="line">df[<span class="string">'col_name'</span>]</span><br><span class="line"><span class="comment">#提取某几列</span></span><br><span class="line">df[[<span class="string">'col_name_1'</span>,<span class="string">'col_name_2'</span>]]</span><br><span class="line"><span class="comment">#提取某行某列的值</span></span><br><span class="line">df.iloc[row_index,col_index]</span><br><span class="line">df.loc[<span class="string">'row_name'</span>,<span class="string">'col_name'</span>]</span><br><span class="line"><span class="comment">#筛选某列中满足某条件的数据</span></span><br><span class="line">df[df[<span class="string">'col_name'</span>] == value]<span class="comment">#等于某值的数据，同理满足所有比较运算符</span></span><br><span class="line">df.query(<span class="string">'col_name == value'</span>)<span class="comment">#代码效果同上</span></span><br><span class="line">df[(df[<span class="string">'col_name_1'</span>] &gt;= value_1) &amp; (df[<span class="string">'col_name_2'</span>] != value_2)]<span class="comment">#与&amp;，或|</span></span><br><span class="line">df.query(<span class="string">'(col_name_1 &gt;= value_lower) &amp; (col_name_2 &lt;= value_upper)'</span>)</span><br><span class="line">df.groupby(<span class="string">'col_name'</span>).groups <span class="comment">#按col_name列进行分组，聚类</span></span><br></pre></td></tr></table></figure></div><h5 id="5、数据清理"><a href="#5、数据清理" class="headerlink" title="5、数据清理"></a>5、数据清理</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#删除某行</span></span><br><span class="line">df.drop([<span class="string">'row_name'</span>],inplace = <span class="literal">True</span>)<span class="comment">#若添加inplace = True，修改后的数据会覆盖原始数据</span></span><br><span class="line"><span class="comment">#删除某列</span></span><br><span class="line">df.drop([<span class="string">'col_name'</span>],axis = <span class="number">1</span>)</span><br><span class="line"><span class="comment">#缺失值的处理</span></span><br><span class="line">df.fillna(mean_value)<span class="comment">#替换缺失值</span></span><br><span class="line">df.dropna()<span class="comment">#删除包含缺失值的行</span></span><br><span class="line">df.dropna(axis = <span class="number">1</span>, how = <span class="string">'all'</span>)<span class="comment">#只删除所有数据缺失的列</span></span><br><span class="line"><span class="comment">#删除重复值</span></span><br><span class="line">drop_duplicates(inplace = <span class="literal">True</span>)</span><br><span class="line"><span class="comment">#更改某行/列/位置数据</span></span><br><span class="line">用iloc或者loc直接替换修改即可</span><br><span class="line"><span class="comment">#更改数据类型</span></span><br><span class="line">df[<span class="string">'datetime_col'</span>] = pd.to_datetime(df[<span class="string">'datetime_col'</span>])</span><br><span class="line">df[<span class="string">'col_name'</span>].astype(str)<span class="comment">#还可以是int/float...</span></span><br><span class="line"><span class="comment">#更改列名</span></span><br><span class="line">df.rename(columns=&#123;<span class="string">'A'</span>:<span class="string">'a'</span>, <span class="string">'C'</span>:<span class="string">'c'</span>&#125;, inplace = <span class="literal">True</span>)</span><br><span class="line"><span class="comment">#apply函数</span></span><br><span class="line"><span class="comment">#讲function应用在col_name列，此方法比用for循环快得多得多</span></span><br><span class="line">df[<span class="string">'col_name'</span>].apply(function)</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> 人工智能 </category>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Pandas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python开发之numpy的使用</title>
      <link href="/2019/09/19/Python%E5%BC%80%E5%8F%91%E4%B9%8Bnumpy%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/09/19/Python%E5%BC%80%E5%8F%91%E4%B9%8Bnumpy%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h4 id="一、注意几点"><a href="#一、注意几点" class="headerlink" title="一、注意几点"></a>一、注意几点</h4><ul><li><p>NumPy 数组在创建时有固定的大小，不同于Python列表（可以动态增长）。更改ndarray的大小将创建一个新的数组并删除原始数据。</p></li><li><p>NumPy 数组中的元素都需要具有相同的数据类型，因此在存储器中将具有相同的大小。数组的元素如果也是数组（可以是 Python 的原生 array，也可以是 ndarray）的情况下，则构成了多维数组。</p></li><li><p>NumPy 数组便于对大量数据进行高级数学和其他类型的操作。通常，这样的操作比使用Python的内置序列可能更有效和更少的代码执行。</p></li></ul><h5 id="二、numpy的使用"><a href="#二、numpy的使用" class="headerlink" title="二、numpy的使用"></a>二、numpy的使用</h5><h5 id="1、创建ndarray"><a href="#1、创建ndarray" class="headerlink" title="1、创建ndarray"></a>1、创建ndarray</h5><ul><li>由python list创建<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1维数组</span></span><br><span class="line">a = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])  </span><br><span class="line">print(type(a), a.shape, a[<span class="number">0</span>], a[<span class="number">1</span>], a[<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">out:</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">numpy</span>.<span class="title">ndarray</span>'&gt; <span class="params">(<span class="number">3</span>,)</span> 1 2 3</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"># 重新赋值</span></span><br><span class="line">a[0] = 5                 </span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line">out:</span><br><span class="line">[<span class="number">5</span> <span class="number">2</span> <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2维数组</span></span><br><span class="line">b = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]])   </span><br><span class="line">print(b)</span><br><span class="line"></span><br><span class="line">out:</span><br><span class="line">[[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]</span><br><span class="line"> [<span class="number">4</span> <span class="number">5</span> <span class="number">6</span>]]</span><br><span class="line"></span><br><span class="line">print(b[<span class="number">0</span>, <span class="number">0</span>], b[<span class="number">0</span>, <span class="number">1</span>], b[<span class="number">1</span>, <span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">out:</span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">4</span></span><br></pre></td></tr></table></figure></div></li><li>由numpy内置函数创建</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建2x2的全0数组</span></span><br><span class="line">a = np.zeros((<span class="number">2</span>,<span class="number">2</span>))  </span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line">out:</span><br><span class="line">[[ <span class="number">0.</span>  <span class="number">0.</span>]</span><br><span class="line"> [ <span class="number">0.</span>  <span class="number">0.</span>]]</span><br><span class="line"></span><br><span class="line"> <span class="comment"># 创建1x2的全1数组</span></span><br><span class="line">b = np.ones((<span class="number">1</span>,<span class="number">2</span>))  </span><br><span class="line">print(b)</span><br><span class="line"></span><br><span class="line">out:</span><br><span class="line">[[ <span class="number">1.</span>  <span class="number">1.</span>]]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建2x2定值为7的数组</span></span><br><span class="line">c = np.full((<span class="number">2</span>,<span class="number">2</span>), <span class="number">7</span>) </span><br><span class="line">print(c)</span><br><span class="line"></span><br><span class="line">out:</span><br><span class="line">[[<span class="number">7</span> <span class="number">7</span>]</span><br><span class="line"> [<span class="number">7</span> <span class="number">7</span>]]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建2x2的单位矩阵（对角元素为1）</span></span><br><span class="line">d = np.eye(<span class="number">2</span>)        </span><br><span class="line">print(d)</span><br><span class="line"></span><br><span class="line">out:</span><br><span class="line">[[ <span class="number">1.</span>  <span class="number">0.</span>]</span><br><span class="line"> [ <span class="number">0.</span>  <span class="number">1.</span>]]</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建一个对角线为10,20,30,50的对角矩阵</span></span><br><span class="line">d_1 = np.diag([<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">50</span>]) </span><br><span class="line">print(d_1)</span><br><span class="line"></span><br><span class="line">out:</span><br><span class="line">[[<span class="number">10</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>]</span><br><span class="line"> [ <span class="number">0</span> <span class="number">20</span> <span class="number">0</span> <span class="number">0</span>]</span><br><span class="line"> [ <span class="number">0</span> <span class="number">0</span> <span class="number">30</span> <span class="number">0</span>]</span><br><span class="line"> [ <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">50</span>]]</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建一个一维的0-14的数组</span></span><br><span class="line">e = np.arange(<span class="number">15</span>)   </span><br><span class="line">print(e)</span><br><span class="line"></span><br><span class="line">out:</span><br><span class="line">[ <span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span>  <span class="number">9</span> <span class="number">10</span> <span class="number">11</span> <span class="number">12</span> <span class="number">13</span> <span class="number">14</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建一个一维的4-9的数组</span></span><br><span class="line">e_1 = np.arange(<span class="number">4</span>,<span class="number">10</span>)  </span><br><span class="line">print(e_1)</span><br><span class="line"></span><br><span class="line">out:</span><br><span class="line">[<span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建一个一维的1-13且以间隔为3的数组</span></span><br><span class="line">e_2 = np.arange(<span class="number">1</span>,<span class="number">14</span>,<span class="number">3</span>)  </span><br><span class="line">print(e_2)</span><br><span class="line"></span><br><span class="line">out:</span><br><span class="line">[ <span class="number">1</span> <span class="number">4</span> <span class="number">7</span> <span class="number">10</span> <span class="number">13</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建一个一维的范围在0-10，长度为6的数组</span></span><br><span class="line">f = np.linspace(<span class="number">0</span>,<span class="number">10</span>,<span class="number">6</span>)  </span><br><span class="line">print(f)</span><br><span class="line"></span><br><span class="line">out:</span><br><span class="line"><span class="comment">#各个元素的间隔相等，为(10-0)/(6-1) = 2，若不想包含末尾的10，可以添加参数endpoint = False</span></span><br><span class="line">[ <span class="number">0.</span>,  <span class="number">2.</span>,  <span class="number">4.</span>,  <span class="number">6.</span>,  <span class="number">8.</span>, <span class="number">10.</span>]  </span><br><span class="line"></span><br><span class="line"><span class="comment">#把arange创建的一维数组转换为3行4列的二维数组</span></span><br><span class="line">g = np.arange(<span class="number">12</span>).reshape(<span class="number">3</span>,<span class="number">4</span>)  </span><br><span class="line">print(g)                        </span><br><span class="line"></span><br><span class="line">out:</span><br><span class="line"><span class="comment">#注意：使用reshape转换前后的数据量应该相同，12 = 3x4</span></span><br><span class="line">[[ <span class="number">0</span>,  <span class="number">1</span>,  <span class="number">2</span>,  <span class="number">3</span>],              </span><br><span class="line"> [ <span class="number">4</span>,  <span class="number">5</span>,  <span class="number">6</span>,  <span class="number">7</span>],</span><br><span class="line"> [ <span class="number">8</span>,  <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>]]              </span><br><span class="line"></span><br><span class="line"><span class="comment"># 2x2的随机数组(矩阵),取值范围在[0.0,1.0)（包含0，不包含1）</span></span><br><span class="line">h = np.random.random((<span class="number">2</span>,<span class="number">2</span>)) </span><br><span class="line">print(e)</span><br><span class="line"></span><br><span class="line">out:</span><br><span class="line">[[ <span class="number">0.72776966</span>  <span class="number">0.94164821</span>]</span><br><span class="line"> [ <span class="number">0.04652655</span>  <span class="number">0.2316599</span> ]]</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建一个取值范围在[4,15)，2行2列的随机整数矩阵</span></span><br><span class="line">i = np.random.randint(<span class="number">4</span>,<span class="number">15</span>,size = (<span class="number">2</span>,<span class="number">2</span>))  </span><br><span class="line">print(i)</span><br><span class="line"></span><br><span class="line">out:</span><br><span class="line">[[<span class="number">6</span>, <span class="number">5</span>],</span><br><span class="line"> [<span class="number">5</span>, <span class="number">9</span>]]</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建一个从均值为0，标准差为0.1的正态分布中随机抽样的3x3矩阵</span></span><br><span class="line">j = np.random.normal(<span class="number">0</span>,<span class="number">0.1</span>,size = (<span class="number">3</span>,<span class="number">3</span>))  </span><br><span class="line">print(j)</span><br><span class="line"></span><br><span class="line">out:</span><br><span class="line">[[<span class="number">-0.20783767</span>, <span class="number">-0.12406401</span>, <span class="number">-0.11775284</span>],</span><br><span class="line"> [ <span class="number">0.02037018</span>,  <span class="number">0.02898423</span>, <span class="number">-0.02548213</span>],</span><br><span class="line"> [<span class="number">-0.0149878</span> ,  <span class="number">0.05277648</span>,  <span class="number">0.08332239</span>]]</span><br></pre></td></tr></table></figure></div><h5 id="2、访问-amp-更改"><a href="#2、访问-amp-更改" class="headerlink" title="2、访问&amp;更改"></a>2、访问&amp;更改</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#访问某一元素，这里可以自己多尝试</span></span><br><span class="line"><span class="comment">#访问一维数组的某一元素，中括号内填写index</span></span><br><span class="line">print(np.arange(<span class="number">6</span>)[<span class="number">3</span>]) </span><br><span class="line">out:<span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#访问二维数组的某一元素，中括号内填写[行,列]</span></span><br><span class="line">print(np.arange(<span class="number">6</span>).reshape(<span class="number">3</span>,<span class="number">2</span>)[<span class="number">1</span>,<span class="number">1</span>]) </span><br><span class="line">out:<span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#访问三位数组中的某一元素，中括号内[组，行，列]</span></span><br><span class="line">print(np.arange(<span class="number">12</span>).reshape(<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>)[<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>]) </span><br><span class="line">out:<span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#更改某一元素，用 = 进行赋值和替换即可</span></span><br><span class="line">a = np.arange(<span class="number">6</span>)</span><br><span class="line">a[<span class="number">3</span>] = <span class="number">7</span>      <span class="comment">#先访问，再重新赋值</span></span><br><span class="line">print(a)</span><br><span class="line">[<span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">7</span> <span class="number">4</span> <span class="number">5</span>]</span><br></pre></td></tr></table></figure></div><h5 id="3、删除"><a href="#3、删除" class="headerlink" title="3、删除"></a>3、删除</h5><blockquote><p>这里需要注意的是axis这个参数，在2维数据中，axis = 0表示选择行，axis = 1表示选择列，但不能机械的认为0就表示行，1就表示列，注意前提2维数据中。</p></blockquote><blockquote><p>在三维数据中，axis = 0表示组，1表示行，2表示列。这是为什么呢？提示一下，三位数组的shape中组、行和列是怎样排序的？</p></blockquote><p>==如果要修改a的值，需要重新赋值==</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">a = np.arange(<span class="number">6</span>).reshape(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">np.delete(a,[<span class="number">0</span>],axis = <span class="number">0</span>)</span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line">array([[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">       [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]])  <span class="comment">#原数据并未更改</span></span><br><span class="line"></span><br><span class="line">a = np.delete(a,[<span class="number">0</span>],axis = <span class="number">0</span>)  <span class="comment">#重新赋值</span></span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line">array([[<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]])   <span class="comment">#原数据已更改</span></span><br></pre></td></tr></table></figure></div><h5 id="4、添加"><a href="#4、添加" class="headerlink" title="4、添加"></a>4、添加</h5><blockquote><p>往ndarray中增加元素的办法跟python list也很类似，常用的有两种：</p></blockquote><ul><li>一种是添加（append），就是将新增的元素添加到ndarray的尾部</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法为：np.append(ndarray, elements, axis)</span><br></pre></td></tr></table></figure></div><ul><li>一种是插入（insert），可以让新增元素插入到指定位置</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">语法为：np.insert(ndarray, index, elements, axis)</span><br><span class="line"></span><br><span class="line">参数中就多了一个index，指示的是插入新元素的位置。</span><br></pre></td></tr></table></figure></div><h5 id="5、ndarray切片"><a href="#5、ndarray切片" class="headerlink" title="5、ndarray切片"></a>5、ndarray切片</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a[:,:<span class="number">-1</span>]   去除最后一列</span><br><span class="line">a[:,<span class="number">-1</span>]    只保留最后一列</span><br></pre></td></tr></table></figure></div><ul><li>一个常用的切片</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">以列的形式获取最后一列数据：</span><br><span class="line"></span><br><span class="line">a[:,<span class="number">3</span>:]</span><br><span class="line"></span><br><span class="line">out:</span><br><span class="line">array([[ <span class="number">3</span>],</span><br><span class="line">       [ <span class="number">7</span>],</span><br><span class="line">       [<span class="number">11</span>],</span><br><span class="line">       [<span class="number">15</span>]])</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">以一维数组的形式获取最后一列数据：</span><br><span class="line"></span><br><span class="line">a[:,<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line">out:</span><br><span class="line">array([ <span class="number">3</span>,  <span class="number">7</span>, <span class="number">11</span>, <span class="number">15</span>])</span><br></pre></td></tr></table></figure></div><h5 id="6、ndarray筛选"><a href="#6、ndarray筛选" class="headerlink" title="6、ndarray筛选"></a>6、ndarray筛选</h5><ul><li>选择ndarray的对角线</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">所用函数为np.diag(ndarray, k&#x3D;N)，其中参数k的取值决定了按照哪一条对角线选择数据。</span><br><span class="line"></span><br><span class="line">默认k &#x3D; 0，取主对角线；</span><br><span class="line"></span><br><span class="line">k &#x3D; 1时，取主对角线上面1行的元素；</span><br><span class="line"></span><br><span class="line">k &#x3D; -1时，取主对角线下面1行的元素。</span><br></pre></td></tr></table></figure></div><ul><li>提取ndarray中的唯一值</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看二维数组a中的唯一值</span></span><br><span class="line">a = [[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>],</span><br><span class="line">     [<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>],</span><br><span class="line">     [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>]]</span><br><span class="line">print(np.unique(a))    </span><br><span class="line">array([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看a中的唯一行（也就是没有重复的行）</span></span><br><span class="line">print(np.unique(a,axis = <span class="number">0</span>))  </span><br><span class="line">array([[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">       [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]])</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看a中的唯一列</span></span><br><span class="line">print(np.unique(a,axis = <span class="number">1</span>))  </span><br><span class="line">array([[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">       [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>],</span><br><span class="line">       [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>]])</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看a中第一行的唯一值</span></span><br><span class="line">print(np.unique(a[<span class="number">0</span>]))  </span><br><span class="line">array([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>])</span><br></pre></td></tr></table></figure></div><ul><li>通过布尔运算筛选</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X[X &gt; 10] #筛选数组X中大于10的数据</span><br></pre></td></tr></table></figure></div><h5 id="7、ndarray运算"><a href="#7、ndarray运算" class="headerlink" title="7、ndarray运算"></a>7、ndarray运算</h5><ul><li>集合运算</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">np.intersect1d(x,y) <span class="comment">#取x与y的交集</span></span><br><span class="line">np.setdiff1d(x,y)   <span class="comment">#取x与y的差集，返回的是在x中且没在y中的元素</span></span><br><span class="line">np.union1d(x,y)     <span class="comment">#取x与y的并集</span></span><br></pre></td></tr></table></figure></div><ul><li>算术运算</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">我们可以通过+、-、*、&#x2F;或np.add、np.substract、np.multiply 、np.divide来对两个矩阵进行元素级的加减乘除运算，因为是元素级的运算，所以两个矩阵的shape必须要一致或者是可广播(Broadcast)。</span><br><span class="line"></span><br><span class="line">这里所谓的可广播，就是指虽然A和B两个矩阵的shape不一致，但是A可以拆分为整数个与B具有相同shape的矩阵，这样在进行元素级别的运算时，就会先将A进行拆分，然后与B进行运算，结果再组合一起就可以。这里的A就是“可广播”矩阵。</span><br></pre></td></tr></table></figure></div><h5 id="8、ndarray排序"><a href="#8、ndarray排序" class="headerlink" title="8、ndarray排序"></a>8、ndarray排序</h5><blockquote><p>np.sort()和ndarray.sort()来对ndarray进行排序。</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">相同的是：</span><br><span class="line"></span><br><span class="line">二者都可以使用参数axis来决定依照哪个轴进行排序，axis &#x3D; 0时按照列排序，axis &#x3D; 1时按照行排序；</span><br><span class="line"></span><br><span class="line">不同的是：</span><br><span class="line"></span><br><span class="line">np.sort()不会更改原数组；ndarray.sort()会更改原数组</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> 人工智能 </category>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Numpy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenCV图像处理笔记（三）：霍夫变换、直方图、轮廓等综合应用</title>
      <link href="/2019/07/22/OpenCV%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E9%9C%8D%E5%A4%AB%E5%8F%98%E6%8D%A2%E3%80%81%E7%9B%B4%E6%96%B9%E5%9B%BE%E3%80%81%E8%BD%AE%E5%BB%93%E7%AD%89%E7%BB%BC%E5%90%88%E5%BA%94%E7%94%A8/"/>
      <url>/2019/07/22/OpenCV%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E9%9C%8D%E5%A4%AB%E5%8F%98%E6%8D%A2%E3%80%81%E7%9B%B4%E6%96%B9%E5%9B%BE%E3%80%81%E8%BD%AE%E5%BB%93%E7%AD%89%E7%BB%BC%E5%90%88%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h4 id="一、霍夫直线变换"><a href="#一、霍夫直线变换" class="headerlink" title="一、霍夫直线变换"></a>一、霍夫直线变换</h4><h5 id="1、霍夫直线变换"><a href="#1、霍夫直线变换" class="headerlink" title="1、霍夫直线变换"></a>1、霍夫直线变换</h5><ul><li>Hough Line Transform用来做直线检测</li><li>前提条件 – 边缘检测已经完成</li><li>平面空间到极坐标空间转换</li></ul><h5 id="2、霍夫直线变换介绍"><a href="#2、霍夫直线变换介绍" class="headerlink" title="2、霍夫直线变换介绍"></a>2、霍夫直线变换介绍</h5><ul><li>对于任意一条直线上的所有点来说</li><li>变换到极坐标中，从[0~360]空间，可以得到r的大小</li><li>属于同一条直线上点在极坐标空(r, theta)必然在一个点上有最强的信号出现，根据此反算到平面坐标中就可以得到直线上各点的像素坐标。从而得到直线</li></ul><h5 id="3、相关API"><a href="#3、相关API" class="headerlink" title="3、相关API"></a>3、相关API</h5><ul><li>标准的霍夫变换 cv::HoughLines从平面坐标转换到霍夫空间，最终输出是               表示极坐标空间</li><li>霍夫变换直线概率 cv::HoughLinesP最终输出是直线的两个点</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cv::HoughLinesP(</span><br><span class="line">InputArray src, <span class="comment">// 输入图像，必须8-bit的灰度图像</span></span><br><span class="line">OutputArray lines, <span class="comment">// 输出的极坐标来表示直线</span></span><br><span class="line"><span class="keyword">double</span> rho, <span class="comment">// 生成极坐标时候的像素扫描步长</span></span><br><span class="line"><span class="keyword">double</span> theta, <span class="comment">//生成极坐标时候的角度步长，一般取值CV_PI/180</span></span><br><span class="line"><span class="keyword">int</span> threshold, <span class="comment">// 阈值，只有获得足够交点的极坐标点才被看成是直线</span></span><br><span class="line"><span class="keyword">double</span> minLineLength=<span class="number">0</span>;<span class="comment">// 最小直线长度</span></span><br><span class="line"><span class="keyword">double</span> maxLineGap=<span class="number">0</span>;<span class="comment">// 最大间隔</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></div><h5 id="实例代码"><a href="#实例代码" class="headerlink" title="实例代码"></a>实例代码</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">   Mat src, src_gray,dst;</span><br><span class="line">src = imread(<span class="string">"C:\\Users\\15646\\Pictures\\线条.jpg"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//边缘检测</span></span><br><span class="line">Canny(src, src_gray, <span class="number">150</span>, <span class="number">200</span>);</span><br><span class="line"><span class="comment">//灰度转彩色</span></span><br><span class="line">cvtColor(src_gray, dst, CV_GRAY2BGR);</span><br><span class="line"></span><br><span class="line"><span class="comment">//霍夫直线检测</span></span><br><span class="line"><span class="built_in">vector</span>&lt;Vec4f&gt; plines;</span><br><span class="line">HoughLinesP(src_gray, plines, <span class="number">1</span>, CV_PI / <span class="number">180.0</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">10</span>);</span><br><span class="line">Scalar color = Scalar(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; plines.<span class="built_in">size</span>(); i++)</span><br><span class="line">&#123;</span><br><span class="line">Vec4f hline = plines[i];</span><br><span class="line"><span class="built_in">line</span>(dst, Point(hline[i], hline[<span class="number">1</span>]), Point(hline[<span class="number">2</span>], hline[<span class="number">3</span>]), color,<span class="number">3</span>, LINE_AA);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">imshow(<span class="string">"dst img"</span>, dst);</span><br></pre></td></tr></table></figure></div><h4 id="二、霍夫圆检测"><a href="#二、霍夫圆检测" class="headerlink" title="二、霍夫圆检测"></a>二、霍夫圆检测</h4><h5 id="1、原理"><a href="#1、原理" class="headerlink" title="1、原理"></a>1、原理</h5><p><a href="http://myfile.buildworld.cn/%E9%9C%8D%E5%A4%AB%E5%9C%86%E6%A3%80%E6%B5%8B%E5%8E%9F%E7%90%86.png" data-fancybox="group" data-caption="原理" class="fancybox"><img alt="原理" title="原理" data-src="http://myfile.buildworld.cn/%E9%9C%8D%E5%A4%AB%E5%9C%86%E6%A3%80%E6%B5%8B%E5%8E%9F%E7%90%86.png" class="lazyload"></a><br><a href="http://myfile.buildworld.cn/%E9%9C%8D%E5%A4%AB%E5%9C%86%E6%A3%80%E6%B5%8B%E5%8E%9F%E7%90%862.png" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="http://myfile.buildworld.cn/%E9%9C%8D%E5%A4%AB%E5%9C%86%E6%A3%80%E6%B5%8B%E5%8E%9F%E7%90%862.png" class="lazyload"></a></p><h5 id="2、相关API-cv-HoughCircles"><a href="#2、相关API-cv-HoughCircles" class="headerlink" title="2、相关API cv::HoughCircles"></a>2、相关API cv::HoughCircles</h5><ul><li>因为霍夫圆检测对噪声比较敏感，所以首先要对图像做中值滤波。</li><li>基于效率考虑，Opencv中实现的霍夫变换圆检测是基于图像梯度的实现，分为两步：<ol><li>检测边缘，发现可能的圆心<ol start="2"><li>基于第一步的基础上从候选圆心开始计算最佳半径大小</li></ol></li></ol></li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">HoughCircles(</span><br><span class="line">InputArray <span class="built_in">image</span>, <span class="comment">// 输入图像 ,必须是8位的单通道灰度图像</span></span><br><span class="line">OutputArray circles, <span class="comment">// 输出结果，发现的圆信息</span></span><br><span class="line">Int method, <span class="comment">// 方法 - HOUGH_GRADIENT</span></span><br><span class="line">Double dp, <span class="comment">// dp = 1; </span></span><br><span class="line">Double mindist, <span class="comment">// 10 最短距离-可以分辨是两个圆的，否则认为是同心圆- src_gray.rows/8</span></span><br><span class="line">Double param1, <span class="comment">// canny edge detection low threshold</span></span><br><span class="line">Double param2, <span class="comment">// 中心点累加器阈值 – 候选圆心</span></span><br><span class="line">Int minradius, <span class="comment">// 最小半径</span></span><br><span class="line">Int maxradius<span class="comment">//最大半径 </span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></div><h5 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">Mat src, dst;</span><br><span class="line">src = imread(<span class="string">"C:\\Users\\Administrator\\Pictures\\霍夫圆检测4.jpg"</span>);</span><br><span class="line">imshow(<span class="string">"src img"</span>, src);</span><br><span class="line"></span><br><span class="line"><span class="comment">//中值滤波转灰度</span></span><br><span class="line">Mat mediaImg;</span><br><span class="line">medianBlur(src, mediaImg, <span class="number">3</span>);</span><br><span class="line">cvtColor(mediaImg, mediaImg, CV_BGR2GRAY);</span><br><span class="line">GaussianBlur(mediaImg,mediaImg, Size(<span class="number">5</span>, <span class="number">5</span>), <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//霍夫圆检测</span></span><br><span class="line"><span class="built_in">vector</span>&lt;Vec3f&gt; pcircle;</span><br><span class="line">HoughCircles(mediaImg, pcircle, CV_HOUGH_GRADIENT, <span class="number">1</span>, <span class="number">10</span>, <span class="number">100</span>, <span class="number">30</span>, <span class="number">5</span>, <span class="number">50</span>);</span><br><span class="line">src.copyTo(dst);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; pcircle.<span class="built_in">size</span>(); i++)</span><br><span class="line">&#123;</span><br><span class="line">Vec3f cc = pcircle[i];</span><br><span class="line"><span class="comment">//圆形标注</span></span><br><span class="line"><span class="built_in">circle</span>(dst, Point(cc[<span class="number">0</span>], cc[<span class="number">1</span>]), cc[<span class="number">2</span>], Scalar(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), <span class="number">2</span>, LINE_AA);</span><br><span class="line"><span class="comment">//圆心标注</span></span><br><span class="line"><span class="built_in">circle</span>(dst, Point(cc[<span class="number">0</span>], cc[<span class="number">1</span>]), <span class="number">2</span>, Scalar(<span class="number">198</span>, <span class="number">50</span>, <span class="number">255</span>), <span class="number">2</span>, LINE_AA);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">imshow(<span class="string">"hough img"</span>, dst);</span><br></pre></td></tr></table></figure></div><h4 id="三、像素重映射"><a href="#三、像素重映射" class="headerlink" title="三、像素重映射"></a>三、像素重映射</h4><h5 id="1、原理-1"><a href="#1、原理-1" class="headerlink" title="1、原理"></a>1、原理</h5><blockquote><p>简单点说就是把输入图像中各个像素按照一定的规则映射到另外一张图像的对应位置上去，形成一张新的图像。</p></blockquote><h5 id="2、API介绍cv-remap"><a href="#2、API介绍cv-remap" class="headerlink" title="2、API介绍cv::remap"></a>2、API介绍cv::remap</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Remap(</span><br><span class="line">InputArray src,<span class="comment">// 输入图像</span></span><br><span class="line">OutputArray dst,<span class="comment">// 输出图像</span></span><br><span class="line">InputArray  map1,<span class="comment">// x 映射表 CV_32FC1/CV_32FC2</span></span><br><span class="line">InputArray map2,<span class="comment">// y 映射表</span></span><br><span class="line"><span class="keyword">int</span> interpolation,<span class="comment">// 选择的插值方法，常见线性插值，可选择立方等</span></span><br><span class="line"><span class="keyword">int</span> borderMode,<span class="comment">// BORDER_CONSTANT</span></span><br><span class="line"><span class="keyword">const</span> Scalar borderValue<span class="comment">// color </span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></div><h5 id="示例代码-1"><a href="#示例代码-1" class="headerlink" title="示例代码"></a>示例代码</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/opencv.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line">Mat src, dst, map_x, map_y;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* OUTPUT_TITLE = <span class="string">"remap demo"</span>;</span><br><span class="line"><span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update_map</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span> </span>&#123;</span><br><span class="line">src = imread(<span class="string">"C:\\Users\\Administrator\\Pictures\\girl2.jpg"</span>);</span><br><span class="line"><span class="keyword">if</span> (!src.data) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"could not load image...\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">char</span> input_win[] = <span class="string">"input image"</span>;</span><br><span class="line">namedWindow(input_win, CV_WINDOW_AUTOSIZE);</span><br><span class="line">namedWindow(OUTPUT_TITLE, CV_WINDOW_AUTOSIZE);</span><br><span class="line">imshow(input_win, src);</span><br><span class="line"></span><br><span class="line">map_x.create(src.<span class="built_in">size</span>(), CV_32FC1);</span><br><span class="line">map_y.create(src.<span class="built_in">size</span>(), CV_32FC1);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> c = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">c = waitKey(<span class="number">500</span>);</span><br><span class="line"><span class="comment">//按住esc退出</span></span><br><span class="line"><span class="keyword">if</span> ((<span class="keyword">char</span>)c == <span class="number">27</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//键盘输入1,2,3,4</span></span><br><span class="line">index = c % <span class="number">4</span>;</span><br><span class="line">update_map();</span><br><span class="line">remap(src, dst, map_x, map_y, INTER_LINEAR, BORDER_CONSTANT, Scalar(<span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>));</span><br><span class="line">imshow(OUTPUT_TITLE, dst);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update_map</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> row = <span class="number">0</span>; row &lt; src.rows; row++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> col = <span class="number">0</span>; col &lt; src.cols; col++) &#123;</span><br><span class="line"><span class="keyword">switch</span> (index) &#123;</span><br><span class="line"><span class="comment">//缩小一半</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line"><span class="keyword">if</span> (col &gt;(src.cols * <span class="number">0.25</span>) &amp;&amp; col &lt;= (src.cols*<span class="number">0.75</span>) &amp;&amp; row &gt;(src.rows*<span class="number">0.25</span>) &amp;&amp; row &lt;= (src.rows*<span class="number">0.75</span>)) &#123;</span><br><span class="line">map_x.at&lt;<span class="keyword">float</span>&gt;(row, col) = <span class="number">2</span> * (col - (src.cols*<span class="number">0.25</span>));</span><br><span class="line">map_y.at&lt;<span class="keyword">float</span>&gt;(row, col) = <span class="number">2</span> * (row - (src.rows*<span class="number">0.25</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">map_x.at&lt;<span class="keyword">float</span>&gt;(row, col) = <span class="number">0</span>;</span><br><span class="line">map_y.at&lt;<span class="keyword">float</span>&gt;(row, col) = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="comment">//x方向对调</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">map_x.at&lt;<span class="keyword">float</span>&gt;(row, col) = (src.cols - col - <span class="number">1</span>);</span><br><span class="line">map_y.at&lt;<span class="keyword">float</span>&gt;(row, col) = row;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="comment">//y方向对调</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">map_x.at&lt;<span class="keyword">float</span>&gt;(row, col) = col;</span><br><span class="line">map_y.at&lt;<span class="keyword">float</span>&gt;(row, col) = (src.rows - row - <span class="number">1</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="comment">//x,y方向都对调</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">map_x.at&lt;<span class="keyword">float</span>&gt;(row, col) = (src.cols - col - <span class="number">1</span>);</span><br><span class="line">map_y.at&lt;<span class="keyword">float</span>&gt;(row, col) = (src.rows - row - <span class="number">1</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h4 id="四、直方图-histogram"><a href="#四、直方图-histogram" class="headerlink" title="四、直方图 (histogram)"></a>四、直方图 (histogram)</h4><h5 id="1、直方图均衡化概念"><a href="#1、直方图均衡化概念" class="headerlink" title="1、直方图均衡化概念"></a>1、直方图均衡化概念</h5><blockquote><p>图像直方图，是指对整个图像像在灰度范围内的像素值(0~255)统计出现频率次数，据此生成的直方图，称为图像直方图-直方图。直方图反映了图像灰度的分布情况。是图像的统计学特征。</p></blockquote><h5 id="2、直方图均衡化"><a href="#2、直方图均衡化" class="headerlink" title="2、直方图均衡化"></a>2、直方图均衡化</h5><blockquote><p>是一种提高图像对比度的方法，拉伸图像灰度值范围。</p></blockquote><blockquote><p>如何实现，通过上一课中的remap我们知道可以将图像灰度分布从一个分布映射到另外一个分布，然后在得到映射后的像素值即可。</p></blockquote><h5 id="3、直方图均衡化API说明cv-equalizeHist"><a href="#3、直方图均衡化API说明cv-equalizeHist" class="headerlink" title="3、直方图均衡化API说明cv::equalizeHist"></a>3、直方图均衡化API说明cv::equalizeHist</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">equalizeHist(</span><br><span class="line">InputArray src,<span class="comment">//输入图像，必须是8-bit的单通道图像</span></span><br><span class="line">OutputArray dst<span class="comment">// 输出结果</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></div><h5 id="4、直方图计算"><a href="#4、直方图计算" class="headerlink" title="4、直方图计算"></a>4、直方图计算</h5><ul><li>上述直方图概念是基于图像像素值，其实对图像梯度、每个像素的角度、等一切图像的属性值，我们都可以建立直方图。这个才是直方图的概念真正意义，不过是基于图像像素灰度直方图是最常见的。</li><li>直方图最常见的几个属性：<ul><li>dims 表示维度，对灰度图像来说只有一个通道值dims=1</li><li>bins 表示在维度中子区域大小划分，bins=256，划分为256个级别</li><li>range 表示值得范围，灰度值范围为[0~255]之间</li></ul></li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">split(<span class="comment">// 把多通道图像分为多个单通道图像</span></span><br><span class="line"><span class="keyword">const</span> Mat &amp;src, <span class="comment">//输入图像</span></span><br><span class="line">Mat* mvbegin）<span class="comment">// 输出的通道图像数组</span></span><br><span class="line"></span><br><span class="line">calcHist(</span><br><span class="line"> <span class="keyword">const</span> Mat* images,<span class="comment">//输入图像指针</span></span><br><span class="line"><span class="keyword">int</span> images,<span class="comment">// 图像数目</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span>* channels,<span class="comment">// 通道数</span></span><br><span class="line">InputArray mask,<span class="comment">// 输入mask，可选，不用</span></span><br><span class="line">OutputArray hist,<span class="comment">//输出的直方图数据</span></span><br><span class="line"><span class="keyword">int</span> dims,<span class="comment">// 维数</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span>* histsize,<span class="comment">// 直方图级数</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">float</span>* ranges,<span class="comment">// 值域范围</span></span><br><span class="line"><span class="keyword">bool</span> uniform,<span class="comment">// true by default</span></span><br><span class="line"><span class="keyword">bool</span> accumulate<span class="comment">// false by defaut</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></div><h5 id="4、直方图比较方法-概述"><a href="#4、直方图比较方法-概述" class="headerlink" title="4、直方图比较方法-概述"></a>4、直方图比较方法-概述</h5><blockquote><p>对输入的两张图像计算得到直方图H1与H2，归一化到相同的尺度空间<br>然后可以通过计算H1与H2的之间的距离得到两个直方图的相似程度进<br>而比较图像本身的相似程度。</p></blockquote><blockquote><p>Opencv提供的比较方法有四种：</p></blockquote><ul><li>Correlation 相关性比较(CV_COMP_CORREL)</li><li>Chi-Square 卡方比较(CV_COMP_CHISQR)</li><li>Intersection 十字交叉性(CV_COMP_INTERSECT)</li><li>Bhattacharyya distance 巴氏距离(CV_COMP_BHATTACHARYYA )<h5 id="相关API"><a href="#相关API" class="headerlink" title="相关API"></a>相关API</h5></li><li>首先把图像从RGB色彩空间转换到HSV色彩空间cvtColor</li><li>计算图像的直方图，然后归一化到[0~1]之间calcHist和normalize;</li><li>使用上述四种比较方法之一进行比较compareHist<h6 id="相关API-cv-compareHist"><a href="#相关API-cv-compareHist" class="headerlink" title="相关API cv::compareHist"></a>相关API cv::compareHist</h6></li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">compareHist(</span><br><span class="line">InputArray h1, &#x2F;&#x2F; 直方图数据，下同</span><br><span class="line">InputArray H2,</span><br><span class="line">int method&#x2F;&#x2F; 比较方法，上述四种方法之一</span><br><span class="line">)</span><br></pre></td></tr></table></figure></div><h6 id="示例代码-2"><a href="#示例代码-2" class="headerlink" title="示例代码"></a>示例代码</h6><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">Mat src, dst;</span><br><span class="line">src = imread(<span class="string">"C:\\Users\\15646\\Pictures\\刘亦菲.jpg"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//分通道显示</span></span><br><span class="line"><span class="built_in">vector</span>&lt;Mat&gt; bgr_planes;</span><br><span class="line">split(src, bgr_planes);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> histSize = <span class="number">256</span>;</span><br><span class="line"><span class="keyword">float</span> range[] = &#123; <span class="number">0</span>,<span class="number">256</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">float</span> *histRange = &#123; range &#125;;</span><br><span class="line">Mat b_hist, g_hist, r_hist;</span><br><span class="line">calcHist(&amp;bgr_planes[<span class="number">0</span>], <span class="number">1</span>, <span class="number">0</span>, Mat(), b_hist, <span class="number">1</span>, &amp;histSize, &amp;histRange, <span class="literal">true</span>, <span class="literal">false</span>);</span><br><span class="line">calcHist(&amp;bgr_planes[<span class="number">1</span>], <span class="number">1</span>, <span class="number">0</span>, Mat(), g_hist, <span class="number">1</span>, &amp;histSize, &amp;histRange, <span class="literal">true</span>, <span class="literal">false</span>);</span><br><span class="line">calcHist(&amp;bgr_planes[<span class="number">2</span>], <span class="number">1</span>, <span class="number">0</span>, Mat(), r_hist, <span class="number">1</span>, &amp;histSize, &amp;histRange, <span class="literal">true</span>, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//归一化</span></span><br><span class="line"><span class="keyword">int</span> hist_h = <span class="number">200</span>;</span><br><span class="line"><span class="keyword">int</span> hist_w = <span class="number">300</span>;</span><br><span class="line"><span class="keyword">int</span> bin_w = hist_w / histSize;</span><br><span class="line"><span class="function">Mat <span class="title">histImage</span><span class="params">(hist_w, hist_h, CV_8UC3, Scalar(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>))</span></span>;</span><br><span class="line">normalize(b_hist, b_hist, <span class="number">0</span>, hist_h, NORM_MINMAX, <span class="number">-1</span>, Mat());</span><br><span class="line">normalize(g_hist, g_hist, <span class="number">0</span>, hist_h, NORM_MINMAX, <span class="number">-1</span>, Mat());</span><br><span class="line">normalize(r_hist, r_hist, <span class="number">0</span>, hist_h, NORM_MINMAX, <span class="number">-1</span>, Mat());</span><br><span class="line"></span><br><span class="line"><span class="comment">//绘制直方图</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; histSize; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">line</span>(histImage, Point((i - <span class="number">1</span>)*bin_w, hist_h - cvRound(b_hist.at&lt;<span class="keyword">float</span>&gt;(i - <span class="number">1</span>))),</span><br><span class="line">Point((i)*bin_w, hist_h - cvRound(b_hist.at&lt;<span class="keyword">float</span>&gt;(i))), Scalar(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>), LINE_AA);</span><br><span class="line"><span class="built_in">line</span>(histImage, Point((i - <span class="number">1</span>)*bin_w, hist_h - cvRound(g_hist.at&lt;<span class="keyword">float</span>&gt;(i - <span class="number">1</span>))),</span><br><span class="line">Point((i)*bin_w, hist_h - cvRound(g_hist.at&lt;<span class="keyword">float</span>&gt;(i))), Scalar(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>), LINE_AA);</span><br><span class="line"><span class="built_in">line</span>(histImage, Point((i - <span class="number">1</span>)*bin_w, hist_h - cvRound(r_hist.at&lt;<span class="keyword">float</span>&gt;(i - <span class="number">1</span>))),</span><br><span class="line">Point((i)*bin_w, hist_h - cvRound(r_hist.at&lt;<span class="keyword">float</span>&gt;(i))), Scalar(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>), LINE_AA);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">imshow(<span class="string">"src img"</span>, histImage);</span><br></pre></td></tr></table></figure></div><h5 id="5、直方图反向投影-Back-Projection"><a href="#5、直方图反向投影-Back-Projection" class="headerlink" title="5、直方图反向投影(Back Projection)"></a>5、直方图反向投影(Back Projection)</h5><ul><li>反向投影是反映直方图模型在目标图像中的分布情况</li><li>简单点说就是用直方图模型去目标图像中寻找是否有相似的对象。通常用HSV色彩空间的HS两个通道直方图模型</li></ul><h6 id="反向投影-–-步骤"><a href="#反向投影-–-步骤" class="headerlink" title="反向投影 – 步骤"></a>反向投影 – 步骤</h6><ul><li>1.建立直方图模型</li><li>2.计算待测图像直方图并映射到模型中</li><li>3.从模型反向计算生成图像</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">加载图片imread</span><br><span class="line">将图像从RGB色彩空间转换到HSV色彩空间cvtColor</span><br><span class="line">计算直方图和归一化calcHist与normalize</span><br><span class="line">Mat与MatND其中Mat表示二维数组，MatND表示三维或者多维数据，此处均可以用Mat表示。</span><br><span class="line">计算反向投影图像 - calcBackProject</span><br><span class="line"></span><br><span class="line">Mat src, hsv, hue;</span><br><span class="line"><span class="keyword">int</span> bins = <span class="number">12</span>;</span><br><span class="line"><span class="built_in">string</span> src_img = <span class="string">"src img"</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Hist_Add_Backproject</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">void</span>*)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> * argv)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">src = imread(<span class="string">"C:\\Users\\15646\\Pictures\\lab\\test1.png"</span>);</span><br><span class="line">namedWindow(src_img, WINDOW_AUTOSIZE);</span><br><span class="line"></span><br><span class="line">cvtColor(src, hsv, CV_BGR2HSV);</span><br><span class="line">hue.create(hsv.<span class="built_in">size</span>(), hsv.depth());</span><br><span class="line"><span class="keyword">int</span> nchannels[] = &#123; <span class="number">0</span>,<span class="number">0</span> &#125;;</span><br><span class="line">mixChannels(&amp;hsv, <span class="number">1</span>, &amp;hue, <span class="number">1</span>, nchannels, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">createTrackbar(<span class="string">"Histogram Bins"</span>, src_img, &amp;bins, <span class="number">180</span>, Hist_Add_Backproject);</span><br><span class="line">Hist_Add_Backproject(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">imshow(src_img, src);</span><br><span class="line">waitKey(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Hist_Add_Backproject</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">void</span>*)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">float</span> range[] = &#123; <span class="number">0</span>,<span class="number">180</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">float</span> *histRanges = &#123; range &#125;;</span><br><span class="line">Mat h_hist;</span><br><span class="line">calcHist(&amp;hue, <span class="number">1</span>, <span class="number">0</span>, Mat(), h_hist, <span class="number">1</span>, &amp;bins, &amp;histRanges, <span class="literal">true</span>, <span class="literal">false</span>);</span><br><span class="line">normalize(h_hist, h_hist, <span class="number">0</span>, <span class="number">255</span>, NORM_MINMAX, <span class="number">-1</span>, Mat());</span><br><span class="line"></span><br><span class="line">Mat backPrjImage;</span><br><span class="line">calcBackProject(&amp;hue, <span class="number">1</span>, <span class="number">0</span>, h_hist, backPrjImage, &amp;histRanges, <span class="number">1</span>, <span class="literal">true</span>);</span><br><span class="line">imshow(<span class="string">"BackProj"</span>, backPrjImage);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> hist_h = <span class="number">400</span>;</span><br><span class="line"><span class="keyword">int</span> hist_w = <span class="number">400</span>;</span><br><span class="line"><span class="function">Mat <span class="title">histImage</span><span class="params">(hist_w, hist_h, CV_8UC3, Scalar(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>))</span></span>;</span><br><span class="line"><span class="keyword">int</span> bin_w = cvRound((<span class="keyword">double</span>)hist_w / bins);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; bins; i++)</span><br><span class="line">&#123;</span><br><span class="line">rectangle(histImage,</span><br><span class="line">Point((i - <span class="number">1</span>)*bin_w, (hist_h - cvRound(h_hist.at&lt;<span class="keyword">float</span>&gt;(i - <span class="number">1</span>)*(<span class="number">400</span> / <span class="number">255</span>)))),</span><br><span class="line">Point(i*bin_w, hist_h),</span><br><span class="line">Scalar(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), <span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">imshow(<span class="string">"Histogram"</span>, histImage);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h4 id="五、模板匹配-Template-Match"><a href="#五、模板匹配-Template-Match" class="headerlink" title="五、模板匹配(Template Match)"></a>五、模板匹配(Template Match)</h4><h5 id="1、模板匹配介绍"><a href="#1、模板匹配介绍" class="headerlink" title="1、模板匹配介绍"></a>1、模板匹配介绍</h5><ul><li>模板匹配就是在整个图像区域发现与给定子图像匹配的小块区域。</li><li>所以模板匹配首先需要一个模板图像T（给定的子图像）</li><li>另外需要一个待检测的图像-源图像S</li><li>工作方法，在带检测图像上，从左到右，从上向下计算模板图像与重叠子图像的匹配度，匹配程度越大，两者相同的可能性越大。</li></ul><h5 id="2、模板匹配介绍-–-匹配算法介绍"><a href="#2、模板匹配介绍-–-匹配算法介绍" class="headerlink" title="2、模板匹配介绍 – 匹配算法介绍"></a>2、模板匹配介绍 – 匹配算法介绍</h5><p><a href="http://myfile.buildworld.cn/%E6%A8%A1%E6%9D%BF%E5%8C%B9%E9%85%8D%E7%AE%97%E6%B3%95.jpg" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="http://myfile.buildworld.cn/%E6%A8%A1%E6%9D%BF%E5%8C%B9%E9%85%8D%E7%AE%97%E6%B3%95.jpg" class="lazyload"></a></p><h5 id="3、相关API介绍cv-matchTemplate"><a href="#3、相关API介绍cv-matchTemplate" class="headerlink" title="3、相关API介绍cv::matchTemplate"></a>3、相关API介绍cv::matchTemplate</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">matchTemplate(</span><br><span class="line">    InputArray <span class="built_in">image</span>,<span class="comment">// 源图像，必须是8-bit或者32-bit浮点数图像</span></span><br><span class="line">    </span><br><span class="line">    InputArray templ,<span class="comment">// 模板图像，类型与输入图像一致</span></span><br><span class="line">    </span><br><span class="line">    OutputArray result,<span class="comment">// 输出结果，必须是单通道32位浮点数，假设源图像WxH,模板图像wxh,</span></span><br><span class="line">                 则结果必须为W-w+<span class="number">1</span>, H-h+<span class="number">1</span>的大小。</span><br><span class="line">    <span class="keyword">int</span> method,<span class="comment">//使用的匹配方法</span></span><br><span class="line">    </span><br><span class="line">    InputArray mask=noArray()<span class="comment">//(optional)</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></div><h5 id="示例代码-3"><a href="#示例代码-3" class="headerlink" title="示例代码"></a>示例代码</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;opencv2\opencv.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line">Mat src, dst, temp;</span><br><span class="line"><span class="keyword">int</span> match_method = CV_TM_SQDIFF;</span><br><span class="line"><span class="keyword">int</span> max_track = <span class="number">5</span>;</span><br><span class="line"><span class="built_in">string</span> inputImg = <span class="string">"input img"</span>;</span><br><span class="line"><span class="built_in">string</span> outputImg = <span class="string">"output img"</span>;</span><br><span class="line"><span class="built_in">string</span> matchimg = <span class="string">"template match-demo"</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Match_Demo</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">void</span>*)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> * argv)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">src = imread(<span class="string">"C:\\Users\\15646\\Pictures\\雷军.jpg"</span>);</span><br><span class="line">temp = imread(<span class="string">"C:\\Users\\15646\\Pictures\\雷军头像.jpg"</span>);</span><br><span class="line"></span><br><span class="line">namedWindow(inputImg, CV_WINDOW_AUTOSIZE);</span><br><span class="line">namedWindow(outputImg, CV_WINDOW_AUTOSIZE);</span><br><span class="line">namedWindow(matchimg, CV_WINDOW_AUTOSIZE);</span><br><span class="line"></span><br><span class="line">imshow(inputImg, src);</span><br><span class="line">createTrackbar(<span class="string">"Macth Control"</span>, inputImg, &amp;match_method, max_track, Match_Demo);</span><br><span class="line"></span><br><span class="line">Match_Demo(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">waitKey(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Match_Demo</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">void</span>*)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">width</span> = src.cols - temp.cols + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">height</span> = src.rows - temp.rows + <span class="number">1</span>;</span><br><span class="line"><span class="function">Mat <span class="title">result</span><span class="params">(<span class="built_in">width</span>, <span class="built_in">height</span>, CV_32FC1)</span></span>;</span><br><span class="line"></span><br><span class="line">matchTemplate(src,temp,result,match_method,Mat());</span><br><span class="line">normalize(result, result, <span class="number">0</span>, <span class="number">1</span>, NORM_MINMAX, <span class="number">-1</span>, Mat());</span><br><span class="line"></span><br><span class="line">Point minLoc;</span><br><span class="line">Point maxLoc;</span><br><span class="line"><span class="keyword">double</span> <span class="built_in">min</span>, <span class="built_in">max</span>;</span><br><span class="line">src.copyTo(dst);</span><br><span class="line">Point tenLoc;</span><br><span class="line">minMaxLoc(result, &amp;<span class="built_in">min</span>, &amp;<span class="built_in">max</span>, &amp;minLoc, &amp;maxLoc, Mat());</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (match_method==CV_TM_SQDIFF || match_method == CV_TM_SQDIFF_NORMED)</span><br><span class="line">&#123;</span><br><span class="line">tenLoc = minLoc;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">tenLoc = maxLoc;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//绘制矩形</span></span><br><span class="line">rectangle(dst, Rect(tenLoc.x, tenLoc.y, temp.cols, temp.rows), Scalar(<span class="number">0</span>, <span class="number">0</span>, <span class="number">.255</span>), <span class="number">2</span>, <span class="number">8</span>);</span><br><span class="line">rectangle(result, Rect(tenLoc.x, tenLoc.y, temp.cols, temp.rows), Scalar(<span class="number">0</span>, <span class="number">0</span>, <span class="number">.255</span>), <span class="number">2</span>, <span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">imshow(outputImg, result);</span><br><span class="line">imshow(matchimg, dst);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h4 id="六、轮廓发现-find-contour-in-your-image"><a href="#六、轮廓发现-find-contour-in-your-image" class="headerlink" title="六、轮廓发现(find contour in your image)"></a>六、轮廓发现(find contour in your image)</h4><ul><li>轮廓发现是基于图像边缘提取的基础寻找对象轮廓的方法。</li><li>所以边缘提取的阈值选定会影响最终轮廓发现结果</li><li>API介绍<ul><li>findContours发现轮廓</li><li>drawContours绘制轮廓</li></ul></li></ul><h5 id="轮廓发现-find-contour"><a href="#轮廓发现-find-contour" class="headerlink" title="轮廓发现(find contour)"></a>轮廓发现(find contour)</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">在二值图像上发现轮廓使用API cv::findContours(</span><br><span class="line">InputOutputArray  binImg, &#x2F;&#x2F; 输入图像，非0的像素被看成1,0的像素值保持不变，8-bit</span><br><span class="line">     OutputArrayOfArrays  contours,&#x2F;&#x2F;  全部发现的轮廓对象</span><br><span class="line">    OutputArray,  hierachy&#x2F;&#x2F; 图该的拓扑结构，可选，该轮廓发现算法正是基于图像拓扑结构实现。</span><br><span class="line">    int mode, &#x2F;&#x2F;  轮廓返回的模式</span><br><span class="line">    int method,&#x2F;&#x2F; 发现方法</span><br><span class="line">    Point offset&#x3D;Point()&#x2F;&#x2F;  轮廓像素的位移，默认（0, 0）没有位移</span><br><span class="line">)</span><br></pre></td></tr></table></figure></div><h5 id="轮廓绘制-draw-contour"><a href="#轮廓绘制-draw-contour" class="headerlink" title="轮廓绘制(draw contour)"></a>轮廓绘制(draw contour)</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">在二值图像上发现轮廓使用API cv::findContours之后对发现的轮廓数据进行绘制显示</span><br><span class="line">drawContours(</span><br><span class="line">    InputOutputArray  binImg, <span class="comment">// 输出图像</span></span><br><span class="line">     OutputArrayOfArrays  contours,<span class="comment">//  全部发现的轮廓对象</span></span><br><span class="line">    Int contourIdx<span class="comment">// 轮廓索引号</span></span><br><span class="line">    <span class="keyword">const</span> Scalar &amp; color,<span class="comment">// 绘制时候颜色</span></span><br><span class="line">    <span class="keyword">int</span>  thickness,<span class="comment">// 绘制线宽</span></span><br><span class="line">    <span class="keyword">int</span>  lineType ,<span class="comment">// 线的类型LINE_8</span></span><br><span class="line">    InputArray hierarchy,<span class="comment">// 拓扑结构图</span></span><br><span class="line">    <span class="keyword">int</span> maxlevel,<span class="comment">// 最大层数， 0只绘制当前的，1表示绘制绘制当前及其内嵌的轮廓</span></span><br><span class="line">    Point offset=Point()<span class="comment">// 轮廓位移，可选</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></div><h5 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h5><ul><li>输入图像转为灰度图像cvtColor</li><li>使用Canny进行边缘提取，得到二值图像</li><li>使用findContours寻找轮廓</li><li>使用drawContours绘制轮廓</li></ul><h5 id="示例代码-4"><a href="#示例代码-4" class="headerlink" title="示例代码"></a>示例代码</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line">Mat src, dst;</span><br><span class="line"><span class="keyword">int</span> threshold_value = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">int</span> threshold_max = <span class="number">255</span>;</span><br><span class="line">RNG rng;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Demo_Countours</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">void</span>*)</span></span>;</span><br><span class="line"><span class="built_in">string</span> input_title = <span class="string">"input img"</span>;</span><br><span class="line"><span class="built_in">string</span> output_title = <span class="string">"output img"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> * argv)</span> </span>&#123;</span><br><span class="line">src = imread(<span class="string">"C:\\Users\\15646\\Pictures\\lab\\山羊.jfif"</span>);</span><br><span class="line">namedWindow(input_title, CV_WINDOW_AUTOSIZE);</span><br><span class="line">namedWindow(output_title, CV_WINDOW_AUTOSIZE);</span><br><span class="line">imshow(input_title, src);</span><br><span class="line"><span class="comment">//图像灰度化</span></span><br><span class="line">cvtColor(src, src, CV_BGR2GRAY);</span><br><span class="line"></span><br><span class="line">createTrackbar(<span class="string">"control img"</span>, output_title, &amp;threshold_value, threshold_max, Demo_Countours);</span><br><span class="line">Demo_Countours(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">waitKey(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Demo_Countours</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">void</span>*)</span> </span>&#123;</span><br><span class="line">Mat canny_output;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;Point&gt;&gt; contours;</span><br><span class="line"><span class="built_in">vector</span>&lt;Vec4i&gt;hierachy;</span><br><span class="line"><span class="comment">//图像边缘检测二值化</span></span><br><span class="line">Canny(src, canny_output, threshold_value, threshold_value * <span class="number">2</span>, <span class="number">3</span>, <span class="literal">false</span>);</span><br><span class="line"><span class="comment">//轮廓发现</span></span><br><span class="line">findContours(canny_output, contours, hierachy, RETR_TREE, CHAIN_APPROX_SIMPLE, Point(<span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">dst = Mat::zeros(src.<span class="built_in">size</span>(), CV_8UC3);</span><br><span class="line">rng(<span class="number">12345</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; contours.<span class="built_in">size</span>(); i++)</span><br><span class="line">&#123;</span><br><span class="line">Scalar color = Scalar(rng.uniform(<span class="number">0</span>, <span class="number">255</span>), rng.uniform(<span class="number">0</span>, <span class="number">255</span>), rng.uniform(<span class="number">0</span>, <span class="number">255</span>));</span><br><span class="line"><span class="comment">//轮廓绘制</span></span><br><span class="line">drawContours(dst, contours, i, color, <span class="number">2</span>, <span class="number">8</span>, hierachy, <span class="number">0</span>, Point(<span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">imshow(output_title, dst);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h4 id="七、凸包-Convex-Hull"><a href="#七、凸包-Convex-Hull" class="headerlink" title="七、凸包-Convex Hull"></a>七、凸包-Convex Hull</h4><h5 id="1、定义"><a href="#1、定义" class="headerlink" title="1、定义"></a>1、定义</h5><blockquote><p>什么是凸包(Convex Hull)，在一个多变形边缘或者内部任                     意两个点的连线都包含在多边形边界或者内部。</p></blockquote><h6 id="正式定义："><a href="#正式定义：" class="headerlink" title="正式定义："></a>正式定义：</h6><blockquote><p>包含点集合S中所有点的最小凸多边形称为凸包</p></blockquote><h5 id="2、概念介绍-Graham扫描算法"><a href="#2、概念介绍-Graham扫描算法" class="headerlink" title="2、概念介绍-Graham扫描算法"></a>2、概念介绍-Graham扫描算法</h5><ul><li>首先选择Y方向最低的点作为起始点p0</li><li>从p0开始极坐标扫描，依次添加p1….pn（排序顺序是根据极坐标的角度大小，逆时针方向）</li><li>对每个点pi来说，如果添加pi点到凸包中导致一个左转向（逆时针方法）则添加该点到凸包， 反之如果导致一个右转向（顺时针方向）删除该点从凸包中</li></ul><h5 id="3、API说明cv-convexHull"><a href="#3、API说明cv-convexHull" class="headerlink" title="3、API说明cv::convexHull"></a>3、API说明cv::convexHull</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">convexHull(</span><br><span class="line">    InputArray points,&#x2F;&#x2F; 输入候选点，来自findContours</span><br><span class="line">    OutputArray hull,&#x2F;&#x2F; 凸包</span><br><span class="line">    bool clockwise,&#x2F;&#x2F; default true, 顺时针方向</span><br><span class="line">    bool returnPoints）&#x2F;&#x2F; true 表示返回点个数，如果第二个参数是vector&lt;Point&gt;则自动忽略</span><br><span class="line">)</span><br></pre></td></tr></table></figure></div><h5 id="4、流程"><a href="#4、流程" class="headerlink" title="4、流程"></a>4、流程</h5><ul><li>首先把图像从RGB转为灰度</li><li>然后再转为二值图像</li><li>在通过发现轮廓得到候选点</li><li>凸包API调用</li><li>绘制显示。<h5 id="示例代码-5"><a href="#示例代码-5" class="headerlink" title="示例代码"></a>示例代码</h5></li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;opencv2\opencv.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line">Mat src,gray_src, dst;</span><br><span class="line"><span class="keyword">int</span> threshold_value = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">int</span> threshold_max = <span class="number">255</span>;</span><br><span class="line">RNG rng;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Demo_Countours</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">void</span>*)</span></span>;</span><br><span class="line"><span class="built_in">string</span> input_title = <span class="string">"input img"</span>;</span><br><span class="line"><span class="built_in">string</span> output_title = <span class="string">"output img"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> * argv)</span> </span>&#123;</span><br><span class="line">src = imread(<span class="string">"C:\\Users\\15646\\Pictures\\lab\\test2.png"</span>);</span><br><span class="line">namedWindow(input_title, CV_WINDOW_AUTOSIZE);</span><br><span class="line">namedWindow(output_title, CV_WINDOW_AUTOSIZE);</span><br><span class="line">imshow(input_title, src);</span><br><span class="line"><span class="comment">//图像灰度化</span></span><br><span class="line">cvtColor(src, gray_src, CV_BGR2GRAY);</span><br><span class="line"><span class="comment">//模糊</span></span><br><span class="line">blur(gray_src, gray_src, Size(<span class="number">3</span>, <span class="number">3</span>), Point(<span class="number">-1</span>, <span class="number">-1</span>), BORDER_DEFAULT);</span><br><span class="line"></span><br><span class="line">createTrackbar(<span class="string">"control img"</span>, output_title, &amp;threshold_value, threshold_max, Demo_Countours);</span><br><span class="line">Demo_Countours(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">waitKey(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Demo_Countours</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">void</span>*)</span> </span>&#123;</span><br><span class="line">Mat bin_output;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;Point&gt;&gt; contours;</span><br><span class="line"><span class="built_in">vector</span>&lt;Vec4i&gt;hierachy;</span><br><span class="line"><span class="comment">//设置阈值，阈值二值化</span></span><br><span class="line">threshold(gray_src, bin_output, threshold_value, threshold_max, THRESH_BINARY);</span><br><span class="line"><span class="comment">//发现轮廓</span></span><br><span class="line">findContours(bin_output, contours, hierachy, RETR_EXTERNAL, CHAIN_APPROX_SIMPLE, Point(<span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;Point&gt;&gt; <span class="title">convexs</span><span class="params">(contours.<span class="built_in">size</span>())</span></span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; contours.<span class="built_in">size</span>(); i++)</span><br><span class="line">&#123;</span><br><span class="line">convexHull(contours[i], convexs[i], <span class="literal">false</span>, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//绘制</span></span><br><span class="line">dst = Mat::zeros(src.<span class="built_in">size</span>(), CV_8UC3);</span><br><span class="line"><span class="built_in">vector</span>&lt;Vec4i&gt;empty(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; contours.<span class="built_in">size</span>(); i++)</span><br><span class="line">&#123;</span><br><span class="line">Scalar color = Scalar(rng.uniform(<span class="number">0</span>, <span class="number">255</span>), rng.uniform(<span class="number">0</span>, <span class="number">255</span>), rng.uniform(<span class="number">0</span>, <span class="number">255</span>));</span><br><span class="line">drawContours(dst, contours, i, color,<span class="number">2</span>, LINE_8, hierachy, <span class="number">0</span>, Point(<span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">drawContours(dst, convexs, i, color, <span class="number">2</span>, LINE_8, empty, <span class="number">0</span>, Point(<span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">imshow(output_title, dst);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h4 id="八、轮廓周围绘制矩形框和圆形框"><a href="#八、轮廓周围绘制矩形框和圆形框" class="headerlink" title="八、轮廓周围绘制矩形框和圆形框"></a>八、轮廓周围绘制矩形框和圆形框</h4><h5 id="1、轮廓周围绘制矩形-API"><a href="#1、轮廓周围绘制矩形-API" class="headerlink" title="1、轮廓周围绘制矩形 -API"></a>1、轮廓周围绘制矩形 -API</h5><ul><li>approxPolyDP(InputArray  curve, OutputArray approxCurve,  double  epsilon,  bool  closed)</li><li>cv::boundingRect(InputArray points)得到轮廓周围最小矩形左上交点坐标和右下角点坐标，绘制一个矩形</li><li>cv::minAreaRect(InputArray  points)得到一个旋转的矩形，返回旋转矩形</li></ul><h5 id="2、轮廓周围绘制圆和椭圆-API"><a href="#2、轮廓周围绘制圆和椭圆-API" class="headerlink" title="2、轮廓周围绘制圆和椭圆-API"></a>2、轮廓周围绘制圆和椭圆-API</h5><ul><li>cv::minEnclosingCircle(InputArray points, //得到最小区域圆形<ul><li>Point2f&amp; center, // 圆心位置</li><li>float&amp; radius)// 圆的半径</li></ul></li><li>cv::fitEllipse(InputArray  points)得到最小椭圆</li></ul><h5 id="3、流程"><a href="#3、流程" class="headerlink" title="3、流程"></a>3、流程</h5><ul><li>首先将图像变为二值图像</li><li>发现轮廓，找到图像轮廓</li><li>通过相关API在轮廓点上找到最小包含矩形和圆，旋转矩形与椭圆。</li><li>绘制它们。<h5 id="示例代码-6"><a href="#示例代码-6" class="headerlink" title="示例代码"></a>示例代码</h5></li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/opencv.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line">Mat src, gray_src, drawImg;</span><br><span class="line"><span class="keyword">int</span> threshold_v = <span class="number">170</span>;</span><br><span class="line"><span class="keyword">int</span> threshold_max = <span class="number">255</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* output_win = <span class="string">"rectangle-demo"</span>;</span><br><span class="line"><span class="function">RNG <span class="title">rng</span><span class="params">(<span class="number">12345</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Contours_Callback</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">void</span>*)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span> </span>&#123;</span><br><span class="line">src = imread(<span class="string">"C:\\Users\\15646\\Pictures\\lab\\热气球.jfif"</span>);</span><br><span class="line"><span class="keyword">if</span> (!src.data) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"could not load image...\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">cvtColor(src, gray_src, CV_BGR2GRAY);</span><br><span class="line">blur(gray_src, gray_src, Size(<span class="number">3</span>, <span class="number">3</span>), Point(<span class="number">-1</span>, <span class="number">-1</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* source_win = <span class="string">"input image"</span>;</span><br><span class="line">namedWindow(source_win, CV_WINDOW_AUTOSIZE);</span><br><span class="line">namedWindow(output_win, CV_WINDOW_AUTOSIZE);</span><br><span class="line">imshow(source_win, src);</span><br><span class="line"></span><br><span class="line">createTrackbar(<span class="string">"Threshold Value:"</span>, output_win, &amp;threshold_v, threshold_max, Contours_Callback);</span><br><span class="line">Contours_Callback(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">waitKey(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Contours_Callback</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">void</span>*)</span> </span>&#123;</span><br><span class="line">Mat binary_output;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;Point&gt;&gt; contours;</span><br><span class="line"><span class="built_in">vector</span>&lt;Vec4i&gt; hierachy;</span><br><span class="line">threshold(gray_src, binary_output, threshold_v, threshold_max, THRESH_BINARY);</span><br><span class="line"><span class="comment">//imshow("binary image", binary_output);</span></span><br><span class="line">findContours(binary_output, contours, hierachy, RETR_TREE, CHAIN_APPROX_SIMPLE, Point(<span class="number">-1</span>, <span class="number">-1</span>));</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;Point&gt;&gt; <span class="title">contours_ploy</span><span class="params">(contours.<span class="built_in">size</span>())</span></span>;</span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;Rect&gt; <span class="title">ploy_rects</span><span class="params">(contours.<span class="built_in">size</span>())</span></span>;</span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;Point2f&gt; <span class="title">ccs</span><span class="params">(contours.<span class="built_in">size</span>())</span></span>;</span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">float</span>&gt; <span class="title">radius</span><span class="params">(contours.<span class="built_in">size</span>())</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;RotatedRect&gt; <span class="title">minRects</span><span class="params">(contours.<span class="built_in">size</span>())</span></span>;</span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;RotatedRect&gt; <span class="title">myellipse</span><span class="params">(contours.<span class="built_in">size</span>())</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; contours.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">approxPolyDP(Mat(contours[i]), contours_ploy[i], <span class="number">3</span>, <span class="literal">true</span>);</span><br><span class="line">ploy_rects[i] = boundingRect(contours_ploy[i]);</span><br><span class="line">minEnclosingCircle(contours_ploy[i], ccs[i], radius[i]);</span><br><span class="line"><span class="keyword">if</span> (contours_ploy[i].<span class="built_in">size</span>() &gt; <span class="number">5</span>) &#123;</span><br><span class="line">myellipse[i] = fitEllipse(contours_ploy[i]);</span><br><span class="line">minRects[i] = minAreaRect(contours_ploy[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// draw it</span></span><br><span class="line">drawImg = Mat::zeros(src.<span class="built_in">size</span>(), src.type());</span><br><span class="line">Point2f pts[<span class="number">4</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> t = <span class="number">0</span>; t &lt; contours.<span class="built_in">size</span>(); t++) &#123;</span><br><span class="line">Scalar color = Scalar(rng.uniform(<span class="number">0</span>, <span class="number">255</span>), rng.uniform(<span class="number">0</span>, <span class="number">255</span>), rng.uniform(<span class="number">0</span>, <span class="number">255</span>));</span><br><span class="line"><span class="comment">//rectangle(drawImg, ploy_rects[t], color, 2, 8);</span></span><br><span class="line"><span class="comment">//circle(drawImg, ccs[t], radius[t], color, 2, 8);</span></span><br><span class="line"><span class="keyword">if</span> (contours_ploy[t].<span class="built_in">size</span>() &gt; <span class="number">5</span>) &#123;</span><br><span class="line">ellipse(drawImg, myellipse[t], color, <span class="number">1</span>, <span class="number">8</span>);</span><br><span class="line">minRects[t].points(pts);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> r = <span class="number">0</span>; r &lt; <span class="number">4</span>; r++) &#123;</span><br><span class="line"><span class="built_in">line</span>(drawImg, pts[r], pts[(r + <span class="number">1</span>) % <span class="number">4</span>], color, <span class="number">1</span>, <span class="number">8</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">imshow(output_win, drawImg);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h4 id="九、图像矩-Image-Moments"><a href="#九、图像矩-Image-Moments" class="headerlink" title="九、图像矩(Image Moments)"></a>九、图像矩(Image Moments)</h4><h5 id="1、概念"><a href="#1、概念" class="headerlink" title="1、概念"></a>1、概念</h5><p><a href="http://myfile.buildworld.cn/%E5%87%A0%E4%BD%95%E7%9F%A9.jpg" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="http://myfile.buildworld.cn/%E5%87%A0%E4%BD%95%E7%9F%A9.jpg" class="lazyload"></a></p><h5 id="2、图像中心Center-x0-y0"><a href="#2、图像中心Center-x0-y0" class="headerlink" title="2、图像中心Center(x0, y0)"></a>2、图像中心Center(x0, y0)</h5><html><a href="https://www.codecogs.com/eqnedit.php?latex=\dpi{200}&space;\large&space;x_{0}=\frac{m_{10}}{m_{00}}" target="_blank"><img title="\large x_{0}=\frac{m_{10}}{m_{00}}" data-src="https://latex.codecogs.com/gif.latex?\dpi{200}&space;\large&space;x_{0}=\frac{m_{10}}{m_{00}}" class="lazyload"></a></html><html><a href="https://www.codecogs.com/eqnedit.php?latex=\dpi{200}&space;\large&space;y_{0}=\frac{m_{01}}{m_{00}}" target="_blank"><img title="\large y_{0}=\frac{m_{01}}{m_{00}}" data-src="https://latex.codecogs.com/gif.latex?\dpi{200}&space;\large&space;y_{0}=\frac{m_{01}}{m_{00}}" class="lazyload"></a></html><h5 id="3、API介绍与使用-计算矩cv-moments"><a href="#3、API介绍与使用-计算矩cv-moments" class="headerlink" title="3、API介绍与使用-计算矩cv::moments"></a>3、API介绍与使用-计算矩cv::moments</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">moments(</span><br><span class="line">InputArray  array,&#x2F;&#x2F;输入数据</span><br><span class="line">bool   binaryImage&#x3D;false &#x2F;&#x2F; 是否为二值图像</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">contourArea(</span><br><span class="line">InputArray  contour,&#x2F;&#x2F;输入轮廓数据</span><br><span class="line">bool   oriented&#x2F;&#x2F; 默认false、返回绝对值)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">arcLength(</span><br><span class="line">InputArray  curve,&#x2F;&#x2F;输入曲线数据</span><br><span class="line">bool   closed&#x2F;&#x2F; 是否是封闭曲线)</span><br><span class="line">)</span><br></pre></td></tr></table></figure></div><h5 id="4、过程"><a href="#4、过程" class="headerlink" title="4、过程"></a>4、过程</h5><ul><li>提取图像边缘</li><li>发现轮廓</li><li>计算每个轮廓对象的矩</li><li>计算每个对象的中心、弧长、面积</li></ul><h5 id="示例代码-7"><a href="#示例代码-7" class="headerlink" title="示例代码"></a>示例代码</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;opencv2\opencv.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line">Mat src, dst,gray_src;</span><br><span class="line"><span class="keyword">int</span> threshold_value = <span class="number">80</span>;</span><br><span class="line"><span class="keyword">int</span> threshold_max = <span class="number">255</span>;</span><br><span class="line">RNG rng;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Demo_Countours</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">void</span>*)</span></span>;</span><br><span class="line"><span class="built_in">string</span> input_title = <span class="string">"input img"</span>;</span><br><span class="line"><span class="built_in">string</span> output_title = <span class="string">"output img"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> * argv)</span> </span>&#123;</span><br><span class="line">src = imread(<span class="string">"C:\\Users\\Administrator\\Pictures\\lab\\星球.jpg"</span>);</span><br><span class="line">namedWindow(input_title, CV_WINDOW_AUTOSIZE);</span><br><span class="line">namedWindow(output_title, CV_WINDOW_AUTOSIZE);</span><br><span class="line">imshow(input_title, src);</span><br><span class="line"><span class="comment">//图像灰度化</span></span><br><span class="line">cvtColor(src, gray_src, CV_BGR2GRAY);</span><br><span class="line"><span class="comment">//高斯模糊</span></span><br><span class="line">GaussianBlur(gray_src, gray_src, Size(<span class="number">3</span>, <span class="number">3</span>), <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">createTrackbar(<span class="string">"control img"</span>, output_title, &amp;threshold_value, threshold_max, Demo_Countours);</span><br><span class="line">Demo_Countours(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">waitKey(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Demo_Countours</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">void</span>*)</span> </span>&#123;</span><br><span class="line">Mat canny_out;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;Point&gt;&gt; contours;</span><br><span class="line"><span class="built_in">vector</span>&lt;Vec4i&gt;hierachy; </span><br><span class="line"></span><br><span class="line"><span class="comment">//边缘检测</span></span><br><span class="line">Canny(gray_src, canny_out, threshold_value, threshold_value * <span class="number">2</span>,<span class="number">3</span>, <span class="literal">false</span>);</span><br><span class="line"><span class="comment">//轮廓发现</span></span><br><span class="line">findContours(canny_out, contours, hierachy, RETR_TREE, CHAIN_APPROX_SIMPLE, Point(<span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;Moments&gt; <span class="title">contours_moments</span><span class="params">(contours.<span class="built_in">size</span>())</span></span>;</span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;Point2f&gt; <span class="title">ccs</span><span class="params">(contours.<span class="built_in">size</span>())</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; contours.<span class="built_in">size</span>(); i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//计算矩</span></span><br><span class="line">contours_moments[i] = moments(contours[i]);</span><br><span class="line"><span class="comment">//计算图像中心，获取中心坐标</span></span><br><span class="line">ccs[i] = Point(<span class="keyword">static_cast</span>&lt;<span class="keyword">float</span>&gt;(contours_moments[i].m10 / contours_moments[i].m00), <span class="keyword">static_cast</span>&lt;<span class="keyword">float</span>&gt;(contours_moments[i].m01 / contours_moments[i].m00));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Mat drawImg;</span><br><span class="line">src.copyTo(drawImg);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; contours.<span class="built_in">size</span>(); i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (contours[i].<span class="built_in">size</span>()&lt;<span class="number">30</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印面积和长度</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"contours %d  area :%.2f and length :%.2f \n"</span>, i, contourArea(contours[i]), arcLength(contours[i], <span class="literal">true</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//随机颜色</span></span><br><span class="line">Scalar color = Scalar(rng.uniform(<span class="number">0</span>, <span class="number">255</span>), rng.uniform(<span class="number">0</span>, <span class="number">255</span>), rng.uniform(<span class="number">0</span>, <span class="number">255</span>));</span><br><span class="line"><span class="comment">//轮廓绘制</span></span><br><span class="line">drawContours(drawImg, contours, i, color, <span class="number">2</span>, <span class="number">8</span>, hierachy, <span class="number">0</span>, Point(<span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line"><span class="comment">//画圆</span></span><br><span class="line"><span class="built_in">circle</span>(drawImg, ccs[i], <span class="number">2</span>, color, <span class="number">2</span>, <span class="number">8</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">imshow(output_title, drawImg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h4 id="十、点多边形测试"><a href="#十、点多边形测试" class="headerlink" title="十、点多边形测试"></a>十、点多边形测试</h4><h5 id="1、概念-1"><a href="#1、概念-1" class="headerlink" title="1、概念"></a>1、概念</h5><blockquote><p>测试一个点是否在给定的多边形内部，边缘或者外部</p></blockquote><h5 id="2、API介绍-cv-pointPolygonTest"><a href="#2、API介绍-cv-pointPolygonTest" class="headerlink" title="2、API介绍 cv::pointPolygonTest"></a>2、API介绍 cv::pointPolygonTest</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">pointPolygonTest(</span><br><span class="line">InputArray  contour,<span class="comment">// 输入的轮廓</span></span><br><span class="line">Point2f  pt, <span class="comment">// 测试点</span></span><br><span class="line"><span class="keyword">bool</span>  measureDist <span class="comment">// 是否返回距离值，如果是false，1表示在内面，0表示在边界上，-1表示在外部，true返回实际距离</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">返回数据是<span class="keyword">double</span>类型</span><br></pre></td></tr></table></figure></div><h5 id="3、步骤"><a href="#3、步骤" class="headerlink" title="3、步骤"></a>3、步骤</h5><ul><li>构建一张400x400大小的图片， Mat::Zero(400, 400, CV_8UC1)</li><li>画上一个六边形的闭合区域line</li><li>发现轮廓</li><li>对图像中所有像素点做点 多边形测试，得到距离，归一化后显示。</li></ul><h5 id="示例代码-8"><a href="#示例代码-8" class="headerlink" title="示例代码"></a>示例代码</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;opencv2\opencv.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line">Mat src, dst,gray_src;</span><br><span class="line"><span class="keyword">int</span> threshold_value = <span class="number">80</span>;</span><br><span class="line"><span class="keyword">int</span> threshold_max = <span class="number">255</span>;</span><br><span class="line">RNG rng;</span><br><span class="line"><span class="built_in">string</span> input_title = <span class="string">"input img"</span>;</span><br><span class="line"><span class="built_in">string</span> output_title = <span class="string">"output img"</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> r = <span class="number">100</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> * argv)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">src = Mat::zeros(r * <span class="number">4</span>, r * <span class="number">4</span>, CV_8UC1);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;Point2f&gt; <span class="title">vert</span><span class="params">(<span class="number">6</span>)</span></span>;</span><br><span class="line">vert[<span class="number">0</span>] = Point(<span class="number">3</span> * r / <span class="number">2</span>, <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(<span class="number">1.34</span>*r));</span><br><span class="line">vert[<span class="number">1</span>] = Point(<span class="number">1</span> * r, <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(<span class="number">2</span> * r));</span><br><span class="line">vert[<span class="number">2</span>] = Point(<span class="number">3</span> * r / <span class="number">2</span>, <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(<span class="number">2.886</span>*r));</span><br><span class="line">vert[<span class="number">3</span>] = Point(<span class="number">5</span> * r / <span class="number">2</span>, <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(<span class="number">2.886</span>*r));</span><br><span class="line">vert[<span class="number">4</span>] = Point(<span class="number">3</span> * r, <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(<span class="number">2</span> * r));</span><br><span class="line">vert[<span class="number">5</span>] = Point(<span class="number">5</span> * r / <span class="number">2</span>, <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(<span class="number">1.34</span>*r));</span><br><span class="line"></span><br><span class="line"><span class="comment">//画多边形</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">line</span>(src, vert[i], vert[(i + <span class="number">1</span>) % <span class="number">6</span>], Scalar(<span class="number">255</span>), <span class="number">8</span>, LINE_8, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;Point&gt;&gt; contours;</span><br><span class="line"><span class="built_in">vector</span>&lt;Vec4i&gt; hierachy;</span><br><span class="line">Mat csrc;</span><br><span class="line">src.copyTo(csrc);</span><br><span class="line"><span class="comment">//轮廓发现</span></span><br><span class="line">findContours(csrc, contours, RETR_TREE, CHAIN_APPROX_SIMPLE, Point(<span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">Mat raw_dist = Mat::zeros(csrc.<span class="built_in">size</span>(), CV_32FC1);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> row = <span class="number">0</span>; row &lt; raw_dist.rows; row++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> col = <span class="number">0</span>; col &lt; raw_dist.cols; col++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//点多边形测试</span></span><br><span class="line"><span class="keyword">double</span> dist = pointPolygonTest(contours[<span class="number">0</span>], Point2f(<span class="keyword">static_cast</span>&lt;<span class="keyword">float</span>&gt;(col), <span class="keyword">static_cast</span>&lt;<span class="keyword">float</span>&gt;(row)), <span class="literal">true</span>);</span><br><span class="line">raw_dist.at&lt;<span class="keyword">float</span>&gt;(row, col) = <span class="keyword">static_cast</span>&lt;<span class="keyword">float</span>&gt;(dist);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> minValue, maxValue;</span><br><span class="line"><span class="comment">//归一化处理</span></span><br><span class="line">minMaxLoc(raw_dist, &amp;minValue, &amp;maxValue, <span class="number">0</span>, <span class="number">0</span>, Mat());</span><br><span class="line"></span><br><span class="line">Mat drawImg = Mat::zeros(src.<span class="built_in">size</span>(), CV_8UC3);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> row = <span class="number">0</span>; row &lt; drawImg.rows; row++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> col = <span class="number">0</span>; col &lt; drawImg.cols; col++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">float</span> dist = raw_dist.at&lt;<span class="keyword">float</span>&gt;(row, col);</span><br><span class="line"><span class="keyword">if</span> (dist &gt; <span class="number">0</span>) &#123;</span><br><span class="line">drawImg.at&lt;Vec3b&gt;(row, col)[<span class="number">0</span>] = (uchar)(<span class="built_in">abs</span>(<span class="number">1.0</span> - (dist / maxValue)) * <span class="number">255</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (dist &lt; <span class="number">0</span>) &#123;</span><br><span class="line">drawImg.at&lt;Vec3b&gt;(row, col)[<span class="number">2</span>] = (uchar)(<span class="built_in">abs</span>(<span class="number">1.0</span>- (dist / maxValue)) * <span class="number">255</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">drawImg.at&lt;Vec3b&gt;(row, col)[<span class="number">0</span>] = (uchar)(<span class="built_in">abs</span>(<span class="number">255</span> - dist));</span><br><span class="line">drawImg.at&lt;Vec3b&gt;(row, col)[<span class="number">1</span>] = (uchar)(<span class="built_in">abs</span>(<span class="number">255</span> - dist));</span><br><span class="line">drawImg.at&lt;Vec3b&gt;(row, col)[<span class="number">2</span>] = (uchar)(<span class="built_in">abs</span>(<span class="number">255</span> - dist));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">namedWindow(input_title, CV_WINDOW_AUTOSIZE);</span><br><span class="line">namedWindow(output_title, CV_WINDOW_AUTOSIZE);</span><br><span class="line">imshow(input_title, src);</span><br><span class="line">imshow(output_title, drawImg);</span><br><span class="line"></span><br><span class="line">waitKey(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h4 id="十一、基于距离变换与分水岭的图像分割"><a href="#十一、基于距离变换与分水岭的图像分割" class="headerlink" title="十一、基于距离变换与分水岭的图像分割"></a>十一、基于距离变换与分水岭的图像分割</h4><h5 id="1、概念-2"><a href="#1、概念-2" class="headerlink" title="1、概念"></a>1、概念</h5><ul><li>图像分割(Image Segmentation)是图像处理最重要的处理手段之一</li><li>图像分割的目标是将图像中像素根据一定的规则分为若干(N)个cluster集合，每个集合包含一类像素。</li><li>根据算法分为监督学习方法和无监督学习方法，图像分割的算法多数都是无监督学习方法 - KMeans</li></ul><h5 id="2、距离变换与分水岭介绍"><a href="#2、距离变换与分水岭介绍" class="headerlink" title="2、距离变换与分水岭介绍"></a>2、距离变换与分水岭介绍</h5><ul><li><p>距离变换常见算法有两种</p><ul><li>不断膨胀/ 腐蚀得到</li><li>基于倒角距离</li></ul></li><li><p>分水岭变换常见的算法</p><ul><li>基于浸泡理论实现 </li></ul></li></ul><h5 id="3、相关API-1"><a href="#3、相关API-1" class="headerlink" title="3、相关API"></a>3、相关API</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cv::distanceTransform(InputArray  src, OutputArray dst,  OutputArray  labels,  <span class="keyword">int</span>  distanceType,  <span class="keyword">int</span> maskSize,  <span class="keyword">int</span> labelType=DIST_LABEL_CCOMP)</span><br><span class="line">        distanceType = DIST_L1/DIST_L2,</span><br><span class="line">        maskSize = <span class="number">3</span>x3,最新的支持<span class="number">5</span>x5，推荐<span class="number">3</span>x3、</span><br><span class="line">        labels离散维诺图输出</span><br><span class="line">        dst输出<span class="number">8</span>位或者<span class="number">32</span>位的浮点数，单一通道，大小与输入图像一致</span><br><span class="line"></span><br><span class="line">cv::watershed(InputArray <span class="built_in">image</span>, InputOutputArray  markers)</span><br></pre></td></tr></table></figure></div><h5 id="4、流程-1"><a href="#4、流程-1" class="headerlink" title="4、流程"></a>4、流程</h5><ul><li><ol><li>将白色背景变成黑色-目的是为后面的变换做准备</li></ol></li><li><ol start="2"><li>使用filter2D与拉普拉斯算子实现图像对比度提高，sharp</li></ol></li><li><ol start="3"><li>转为二值图像通过threshold</li></ol></li><li><ol start="4"><li>距离变换</li></ol></li><li><ol start="5"><li>对距离变换结果进行归一化到[0~1]之间</li></ol></li><li><ol start="6"><li>使用阈值，再次二值化，得到标记</li></ol></li><li><ol start="7"><li>腐蚀得到每个Peak - erode</li></ol></li><li><ol start="8"><li>发现轮廓 – findContours</li></ol></li><li><ol start="9"><li>绘制轮廓- drawContours</li></ol></li><li><ol start="10"><li>分水岭变换 watershed</li></ol></li><li><ol start="11"><li>对每个分割区域着色输出结果</li></ol></li><li><h5 id="示例代码-9"><a href="#示例代码-9" class="headerlink" title="示例代码"></a>示例代码</h5></li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;opencv2\opencv.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line">Mat src, dst;</span><br><span class="line"><span class="keyword">int</span> threshold_value = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">int</span> threshold_max = <span class="number">255</span>;</span><br><span class="line">RNG rng;</span><br><span class="line"><span class="built_in">string</span> input_title = <span class="string">"input img"</span>;</span><br><span class="line"><span class="built_in">string</span> output_title = <span class="string">"output img"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> * argv)</span> </span>&#123;</span><br><span class="line">src = imread(<span class="string">"C:\\Users\\Administrator\\Pictures\\lab\\红桃.png"</span>);</span><br><span class="line">namedWindow(input_title, CV_WINDOW_AUTOSIZE);</span><br><span class="line">namedWindow(output_title, CV_WINDOW_AUTOSIZE);</span><br><span class="line"></span><br><span class="line"><span class="comment">//修改背景颜色</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> row = <span class="number">0</span>; row &lt; src.rows; row++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> col = <span class="number">0</span>; col &lt; src.cols; col++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (src.at&lt;Vec3b&gt;(row,col) == Vec3b(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>))</span><br><span class="line">&#123;</span><br><span class="line">src.at&lt;Vec3b&gt;(row, col)[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">src.at&lt;Vec3b&gt;(row, col)[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">src.at&lt;Vec3b&gt;(row, col)[<span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//膨胀（去除小黑点，噪点）</span></span><br><span class="line">Mat structureElement = getStructuringElement(MORPH_RECT, Size(<span class="number">5</span>, <span class="number">5</span>), Point(<span class="number">-1</span>, <span class="number">-1</span>));</span><br><span class="line">dilate(src, src, structureElement, Point(<span class="number">-1</span>, <span class="number">-1</span>), <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//锐化图像，shape</span></span><br><span class="line">Mat kernel = (Mat_&lt;<span class="keyword">float</span>&gt;(<span class="number">3</span>, <span class="number">3</span>) &lt;&lt; <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">-8</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">Mat imgLaplance;</span><br><span class="line">Mat shapenImg = src;</span><br><span class="line">filter2D(src, imgLaplance, CV_32F, kernel, Point(<span class="number">-1</span>, <span class="number">-1</span>), <span class="number">0</span>, BORDER_DEFAULT);</span><br><span class="line">src.convertTo(shapenImg, CV_32F);</span><br><span class="line">Mat resultImg = shapenImg - imgLaplance;</span><br><span class="line">resultImg.convertTo(resultImg, CV_8UC3);</span><br><span class="line">imgLaplance.convertTo(imgLaplance, CV_8UC3);</span><br><span class="line"></span><br><span class="line"><span class="comment">//二值图像convert to binary</span></span><br><span class="line">Mat binaryImg;</span><br><span class="line">cvtColor(resultImg, resultImg, CV_BGR2GRAY);</span><br><span class="line">threshold(resultImg, binaryImg, <span class="number">40</span>, <span class="number">255</span>, CV_THRESH_BINARY | THRESH_OTSU);</span><br><span class="line"></span><br><span class="line"><span class="comment">//距离变化</span></span><br><span class="line">Mat distImg;</span><br><span class="line">distanceTransform(binaryImg, distImg, DIST_L1, <span class="number">3</span>, <span class="number">5</span>);</span><br><span class="line">normalize(distImg, distImg, <span class="number">0</span>, <span class="number">1</span>, NORM_MINMAX);</span><br><span class="line"></span><br><span class="line"><span class="comment">//距离变化之后再次二值化图像</span></span><br><span class="line">threshold(distImg, distImg, <span class="number">0.4</span>, <span class="number">1</span>, THRESH_BINARY);</span><br><span class="line">Mat kernel1 = Mat::zeros(<span class="number">13</span>, <span class="number">13</span>, CV_8UC1);</span><br><span class="line"><span class="comment">//腐蚀</span></span><br><span class="line">erode(distImg, distImg, kernel1);</span><br><span class="line"></span><br><span class="line"><span class="comment">//markers标记</span></span><br><span class="line">Mat dist_8u;</span><br><span class="line">distImg.convertTo(dist_8u, CV_8U);</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;Point&gt;&gt; contours;</span><br><span class="line">findContours(dist_8u, contours, RETR_TREE, CHAIN_APPROX_SIMPLE, Point(<span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//create makers</span></span><br><span class="line">Mat markers = Mat::zeros(src.<span class="built_in">size</span>(), CV_32SC1);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; contours.<span class="built_in">size</span>(); i++)</span><br><span class="line">&#123;</span><br><span class="line">drawContours(markers, contours, <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(i), Scalar::all (<span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(i) + <span class="number">1</span>),<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">circle</span>(markers, Point(<span class="number">5</span>, <span class="number">5</span>), <span class="number">3</span>, Scalar(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>), <span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//分水岭</span></span><br><span class="line">watershed(src, markers);</span><br><span class="line">Mat res = Mat::zeros(markers.<span class="built_in">size</span>(), CV_8UC1);</span><br><span class="line">markers.convertTo(res, CV_8UC1);</span><br><span class="line">bitwise_not(res, res, Mat());</span><br><span class="line"></span><br><span class="line"><span class="comment">//生成随机颜色</span></span><br><span class="line"><span class="built_in">vector</span>&lt;Vec3b&gt; colors;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; contours.<span class="built_in">size</span>(); i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> r = rng.uniform(<span class="number">0</span>, <span class="number">255</span>);</span><br><span class="line"><span class="keyword">int</span> g = rng.uniform(<span class="number">0</span>, <span class="number">255</span>);</span><br><span class="line"><span class="keyword">int</span> b = rng.uniform(<span class="number">0</span>, <span class="number">255</span>);</span><br><span class="line"></span><br><span class="line">colors.push_back(Vec3b((uchar)b, (uchar)g, (uchar)r));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//填满颜色</span></span><br><span class="line">dst = Mat::zeros(markers.<span class="built_in">size</span>(), CV_8UC3);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> row = <span class="number">0</span>; row &lt; src.rows; row++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> col = <span class="number">0</span>; col &lt; src.cols; col++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> index = markers.at&lt;<span class="keyword">int</span>&gt;(row, col);</span><br><span class="line"><span class="keyword">if</span> (index&gt;<span class="number">0</span> &amp;&amp; index&lt;=<span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(contours.<span class="built_in">size</span>()))</span><br><span class="line">&#123;</span><br><span class="line">dst.at&lt;Vec3b&gt;(row, col) = colors[index - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">dst.at&lt;Vec3b&gt;(row, col) = Vec3b(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">imshow(input_title, src);</span><br><span class="line">imshow(output_title, dst);</span><br><span class="line"></span><br><span class="line">waitKey(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> 计算机视觉 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenCV </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenCV图像处理笔记（二）：图片操作进阶</title>
      <link href="/2019/07/11/OpenCV%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E5%9B%BE%E7%89%87%E6%93%8D%E4%BD%9C%E8%BF%9B%E9%98%B6/"/>
      <url>/2019/07/11/OpenCV%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E5%9B%BE%E7%89%87%E6%93%8D%E4%BD%9C%E8%BF%9B%E9%98%B6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h4 id="一、图像模糊"><a href="#一、图像模糊" class="headerlink" title="一、图像模糊"></a>一、图像模糊</h4><h5 id="1、模糊原理"><a href="#1、模糊原理" class="headerlink" title="1、模糊原理"></a>1、模糊原理</h5><ul><li>Smooth/Blur 是图像处理中最简单和常用的操作之一</li><li>使用该操作的原因之一就为了给图像预处理时候减低噪声</li><li>使用Smooth/Blur操作其背后是数学的卷积计算</li></ul><html><a href="https://www.codecogs.com/eqnedit.php?latex=g\left&space;(&space;i,j&space;\right&space;)=\sum&space;_{k,j}f\left&space;(&space;i&plus;k,j&plus;l&space;\right&space;)h\left&space;(&space;k,l&space;\right&space;)" target="_blank"><img title="g\left ( i,j \right )=\sum _{k,j}f\left ( i+k,j+l \right )h\left ( k,l \right )" data-src="https://latex.codecogs.com/gif.latex?g\left&space;(&space;i,j&space;\right&space;)=\sum&space;_{k,j}f\left&space;(&space;i&plus;k,j&plus;l&space;\right&space;)h\left&space;(&space;k,l&space;\right&space;)" class="lazyload"></a></html><ul><li>通常这些卷积算子计算都是线性操作，所以又叫线性滤波</li></ul><h6 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h6><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">假设有6x6的图像像素点矩阵。</span><br><span class="line"></span><br><span class="line">卷积过程：6x6上面是个3x3的窗口，从左向右，从上向下移动，黄色的每个像个像素点值之和取平均值赋给中心红色像素作为它卷积处理之后新的像素值。每次移动一个像素格。</span><br></pre></td></tr></table></figure></div><p><a href="http://myfile.buildworld.cn/%E5%83%8F%E7%B4%A0%E7%82%B9%E7%9F%A9%E9%98%B5.png" data-fancybox="group" data-caption="像素点矩阵" class="fancybox"><img alt="像素点矩阵" title="像素点矩阵" data-src="http://myfile.buildworld.cn/%E5%83%8F%E7%B4%A0%E7%82%B9%E7%9F%A9%E9%98%B5.png" class="lazyload"></a></p><h5 id="2、归一化盒子滤波（均值滤波）"><a href="#2、归一化盒子滤波（均值滤波）" class="headerlink" title="2、归一化盒子滤波（均值滤波）"></a>2、归一化盒子滤波（均值滤波）</h5><p><a href="https://www.codecogs.com/eqnedit.php?latex=\dpi{100}&space;\LARGE&space;K=\frac{1}{K_{width}&space;.K_{height}}\begin{bmatrix}&space;1&space;&&space;1&&space;1&&space;...&&space;1\\&space;1&space;&&space;1&&space;1&&space;...&&space;1\\&space;.&&space;.&&space;.&&space;...&&space;1\\&space;.&&space;.&&space;.&&space;...&&space;1\\&space;1&space;&&space;1&&space;1&&space;...&&space;1&space;\end{bmatrix}" target="_blank"><img title="\LARGE K=\frac{1}{K_{width} .K_{height}}\begin{bmatrix} 1 & 1& 1& ...& 1\\ 1 & 1& 1& ...& 1\\ .& .& .& ...& 1\\ .& .& .& ...& 1\\ 1 & 1& 1& ...& 1 \end{bmatrix}" data-src="https://latex.codecogs.com/gif.latex?\dpi{100}&space;\LARGE&space;K=\frac{1}{K_{width}&space;.K_{height}}\begin{bmatrix}&space;1&space;&&space;1&&space;1&&space;...&&space;1\\&space;1&space;&&space;1&&space;1&&space;...&&space;1\\&space;.&&space;.&&space;.&&space;...&&space;1\\&space;.&&space;.&&space;.&&space;...&&space;1\\&space;1&space;&&space;1&&space;1&&space;...&&space;1&space;\end{bmatrix}" class="lazyload"></a></p><h6 id="相关的API"><a href="#相关的API" class="headerlink" title="相关的API"></a>相关的API</h6><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- blur(Mat src, Mat dst, Size(xradius, yradius), Point(<span class="number">-1</span>,<span class="number">-1</span>));</span><br></pre></td></tr></table></figure></div><h5 id="3、高斯滤波"><a href="#3、高斯滤波" class="headerlink" title="3、高斯滤波"></a>3、高斯滤波</h5><html><a href="https://www.codecogs.com/eqnedit.php?latex=\dpi{100}&space;\LARGE&space;G_{0}\left&space;(&space;x,y&space;\right&space;)=Ae^{\frac{-(x-\mu&space;_{x})^{2}}{2\sigma&space;_{x}^{2}}&plus;\frac{-(y-\mu&space;_{y})^{2}}{2\sigma&space;_{y}^{2}}}" target="_blank"><img title="\LARGE G_{0}\left ( x,y \right )=Ae^{\frac{-(x-\mu _{x})^{2}}{2\sigma _{x}^{2}}+\frac{-(y-\mu _{y})^{2}}{2\sigma _{y}^{2}}}" data-src="https://latex.codecogs.com/png.latex?\dpi{100}&space;\LARGE&space;G_{0}\left&space;(&space;x,y&space;\right&space;)=Ae^{\frac{-(x-\mu&space;_{x})^{2}}{2\sigma&space;_{x}^{2}}&plus;\frac{-(y-\mu&space;_{y})^{2}}{2\sigma&space;_{y}^{2}}}" class="lazyload"></a></html><h6 id="相关的API-1"><a href="#相关的API-1" class="headerlink" title="相关的API"></a>相关的API</h6><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- GaussianBlur(Mat src, Mat dst, Size(<span class="number">11</span>, <span class="number">11</span>), sigmax, sigmay);</span><br><span class="line">其中Size（x, y）, x, y 必须是正数而且是奇数</span><br></pre></td></tr></table></figure></div><h5 id="4、中值滤波"><a href="#4、中值滤波" class="headerlink" title="4、中值滤波"></a>4、中值滤波</h5><ul><li>统计排序滤波器</li><li>中值对椒盐噪声有很好的抑制作用</li></ul><p><a href="http://myfile.buildworld.cn/%E4%B8%AD%E5%80%BC%E6%BB%A4%E6%B3%A2.png" data-fancybox="group" data-caption="中值滤波原理图" class="fancybox"><img alt="中值滤波原理图" title="中值滤波原理图" data-src="http://myfile.buildworld.cn/%E4%B8%AD%E5%80%BC%E6%BB%A4%E6%B3%A2.png" class="lazyload"></a></p><h6 id="相关的API-2"><a href="#相关的API-2" class="headerlink" title="相关的API"></a>相关的API</h6><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">中值模糊 medianBlur（Mat src, Mat dest, ksize）</span><br><span class="line">中值模糊的ksize大小必须是大于<span class="number">1</span>而且必须是奇数。</span><br></pre></td></tr></table></figure></div><h5 id="5、双边滤波"><a href="#5、双边滤波" class="headerlink" title="5、双边滤波"></a>5、双边滤波</h5><ul><li>均值模糊无法克服边缘像素信息丢失缺陷。原因是均值滤波是基于平均权重</li><li>高斯模糊部分克服了该缺陷，但是无法完全避免，因为没有考虑像素值的不同</li><li>高斯双边模糊 – 是边缘保留的滤波方法，避免了边缘信息丢失，保留了图像轮廓不变<h6 id="相关的API-3"><a href="#相关的API-3" class="headerlink" title="相关的API"></a>相关的API</h6></li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">双边模糊 bilateralFilter(src, dest, d=<span class="number">15</span>, <span class="number">150</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"> - <span class="number">15</span> –计算的半径，半径之内的像数都会被纳入计算，如果提供<span class="number">-1</span> 则根据sigma space参数取值</span><br><span class="line"> - <span class="number">150</span> – sigma color 决定多少差值之内的像素会被计算</span><br><span class="line">  - <span class="number">3</span> – sigma space 如果d的值大于<span class="number">0</span>则声明无效，否则根据它来计算d值</span><br></pre></td></tr></table></figure></div><h4 id="二、膨胀与腐蚀"><a href="#二、膨胀与腐蚀" class="headerlink" title="二、膨胀与腐蚀"></a>二、膨胀与腐蚀</h4><h5 id="1、形态学操作简介"><a href="#1、形态学操作简介" class="headerlink" title="1、形态学操作简介"></a>1、形态学操作简介</h5><ul><li>图像形态学操作 – 基于形状的一系列图像处理操作的合集，主要是基于集合论基础上的形态学数学</li><li>形态学有四个基本操作：腐蚀、膨胀、开、闭</li><li>膨胀与腐蚀是图像处理中最常用的形态学操作手段</li></ul><h5 id="2、形态学操作-morphology-operators-膨胀"><a href="#2、形态学操作-morphology-operators-膨胀" class="headerlink" title="2、形态学操作(morphology operators)-膨胀"></a>2、形态学操作(morphology operators)-膨胀</h5><blockquote><p>跟卷积操作类似，假设有图像A和结构元素B，结构元素B在A上面移动，其中B定义其中心为锚点，<br>计算B覆盖下A的最大像素值用来替换锚点的像素，其中B作为结构体可以是任意形状</p></blockquote><h6 id="二值图像与灰度图像上的膨胀操作"><a href="#二值图像与灰度图像上的膨胀操作" class="headerlink" title="二值图像与灰度图像上的膨胀操作"></a>二值图像与灰度图像上的膨胀操作</h6><p><a href="http://myfile.buildworld.cn/%E8%86%A8%E8%83%80%E6%93%8D%E4%BD%9C.png" data-fancybox="group" data-caption="膨胀操作" class="fancybox"><img alt="膨胀操作" title="膨胀操作" data-src="http://myfile.buildworld.cn/%E8%86%A8%E8%83%80%E6%93%8D%E4%BD%9C.png" class="lazyload"></a></p><h5 id="3、形态学操作-腐蚀"><a href="#3、形态学操作-腐蚀" class="headerlink" title="3、形态学操作-腐蚀"></a>3、形态学操作-腐蚀</h5><blockquote><p>腐蚀跟膨胀操作的过程类似，唯一不同的是以最小值替换锚点重叠下图像的像素值</p></blockquote><h6 id="二值图像与灰度图像上的膨胀操作-1"><a href="#二值图像与灰度图像上的膨胀操作-1" class="headerlink" title="二值图像与灰度图像上的膨胀操作"></a>二值图像与灰度图像上的膨胀操作</h6><p><a href="http://myfile.buildworld.cn/%E8%85%90%E8%9A%80%E6%93%8D%E4%BD%9C.png" data-fancybox="group" data-caption="二值图像与灰度图像上的腐蚀操作" class="fancybox"><img alt="二值图像与灰度图像上的腐蚀操作" title="二值图像与灰度图像上的腐蚀操作" data-src="http://myfile.buildworld.cn/%E8%85%90%E8%9A%80%E6%93%8D%E4%BD%9C.png" class="lazyload"></a></p><h6 id="膨胀腐蚀示例代码"><a href="#膨胀腐蚀示例代码" class="headerlink" title="膨胀腐蚀示例代码"></a>膨胀腐蚀示例代码</h6><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> element_size = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">int</span> max_size = <span class="number">21</span>;</span><br><span class="line">Mat src, dst, gauss_dst;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CallBack_Demo</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">void</span>*)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> input_title = <span class="string">"input img"</span>;</span><br><span class="line"><span class="built_in">string</span> output_title = <span class="string">"output img"</span>;</span><br><span class="line"><span class="built_in">string</span> output2gauss_title = <span class="string">"output2gauss img"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> ** argv)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">src = imread(<span class="string">"C:\\Users\\Administrator\\Pictures\\车牌.jpg"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!src.data)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"read img error"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">imshow(input_title, src);</span><br><span class="line"></span><br><span class="line">namedWindow(output_title, CV_WINDOW_AUTOSIZE);</span><br><span class="line">createTrackbar(<span class="string">"Element Size"</span>, output_title, &amp;element_size, max_size, CallBack_Demo);</span><br><span class="line"></span><br><span class="line">waitKey(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CallBack_Demo</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">void</span>*)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> s = element_size * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*getStructuringElement(int shape, Size ksize, Point anchor)</span></span><br><span class="line"><span class="comment">         - 形状 (MORPH_RECT \MORPH_CROSS \MORPH_ELLIPSE)</span></span><br><span class="line"><span class="comment">         - 大小</span></span><br><span class="line"><span class="comment">         - 锚点 默认是Point(-1, -1)意思就是中心像素*/</span></span><br><span class="line">Mat structureElement = getStructuringElement(MORPH_RECT, Size(s, s), Point(<span class="number">-1</span>, <span class="number">-1</span>));</span><br><span class="line"></span><br><span class="line">dilate(src, dst, structureElement,Point(<span class="number">-1</span>,<span class="number">-1</span>),<span class="number">1</span>); <span class="comment">//膨胀</span></span><br><span class="line"><span class="comment">//erode(src, dst, structureElement, Point(-1, -1), 1); //腐蚀</span></span><br><span class="line">imshow(output_title, dst);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h6 id="动态调整结构元素大小"><a href="#动态调整结构元素大小" class="headerlink" title="动态调整结构元素大小"></a>动态调整结构元素大小</h6><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">TrackBar – createTrackbar(const String &amp; trackbarname, const String winName,  int* value, int count, Trackbarcallback func, void* userdata&#x3D;0)</span><br><span class="line">其中最中要的是 callback 函数功能。如果设置为NULL就是说只有值update，但是不会调用callback的函数。</span><br></pre></td></tr></table></figure></div><h5 id="4、开操作-open"><a href="#4、开操作-open" class="headerlink" title="4、开操作- open"></a>4、开操作- open</h5><ul><li>先腐蚀后膨胀</li><li>可以去掉小的对象，假设对象是前景色，背景是黑色</li></ul><h5 id="5、闭操作-close"><a href="#5、闭操作-close" class="headerlink" title="5、闭操作-close"></a>5、闭操作-close</h5><ul><li>先膨胀后腐蚀（bin2）</li><li>可以填充小的洞（fill hole），假设对象是前景色，背景是黑色</li></ul><h5 id="6、形态学梯度-Morphological-Gradient"><a href="#6、形态学梯度-Morphological-Gradient" class="headerlink" title="6、形态学梯度- Morphological Gradient"></a>6、形态学梯度- Morphological Gradient</h5><ul><li>膨胀减去腐蚀</li><li>又称为基本梯度（其它还包括-内部梯度、方向梯度）</li></ul><h5 id="7、顶帽-–-top-hat"><a href="#7、顶帽-–-top-hat" class="headerlink" title="7、顶帽 – top hat"></a>7、顶帽 – top hat</h5><blockquote><p>顶帽 是原图像与开操作之间的差值图像</p></blockquote><h5 id="8、黑帽"><a href="#8、黑帽" class="headerlink" title="8、黑帽"></a>8、黑帽</h5><blockquote><p>黑帽是闭操作图像与源图像的差值图像</p></blockquote><h5 id="相关的API-4"><a href="#相关的API-4" class="headerlink" title="相关的API"></a>相关的API</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">morphologyEx(src, dest, CV_MOP_BLACKHAT, kernel);</span><br><span class="line"> - Mat src – 输入图像</span><br><span class="line"> - Mat dest – 输出结果</span><br><span class="line"> - <span class="keyword">int</span> OPT – CV_MOP_OPEN/ CV_MOP_CLOSE/ CV_MOP_GRADIENT / CV_MOP_TOPHAT/ CV_MOP_BLACKHAT 形态学操作类型</span><br><span class="line">Mat kernel 结构元素</span><br><span class="line"><span class="keyword">int</span> Iteration 迭代次数，默认是<span class="number">1</span></span><br></pre></td></tr></table></figure></div><h4 id="三、形态学操作应用-提取水平与垂直线"><a href="#三、形态学操作应用-提取水平与垂直线" class="headerlink" title="三、形态学操作应用-提取水平与垂直线"></a>三、形态学操作应用-提取水平与垂直线</h4><h5 id="1、原理方法"><a href="#1、原理方法" class="headerlink" title="1、原理方法"></a>1、原理方法</h5><blockquote><p>图像形态学操作时候，可以通过自定义的结构元素实现结构元素<br>对输入图像一些对象敏感、另外一些对象不敏感，这样就会让敏<br>感的对象改变而不敏感的对象保留输出。通过使用两个最基本的<br>形态学操作 – 膨胀与腐蚀，使用不同的结构元素实现对输入图像<br>的操作、得到想要的结果。</p></blockquote><ul><li>膨胀，输出的像素值是结构元素覆盖下输入图像的最大像素值</li><li>腐蚀，输出的像素值是结构元素覆盖下输入图像的最小像素值</li></ul><h5 id="2、提取步骤"><a href="#2、提取步骤" class="headerlink" title="2、提取步骤"></a>2、提取步骤</h5><ul><li>输入图像彩色图像 imread</li><li>转换为灰度图像 – cvtColor</li><li>转换为二值图像 – adaptiveThreshold</li><li>定义结构元素</li><li>开操作 （腐蚀+膨胀）提取 水平与垂直线</li></ul><h5 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">Mat src, dst;</span><br><span class="line">src = imread(<span class="string">"C:\\Users\\15646\\Pictures\\验证码.jpg"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!src.data)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"not found img"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">waitKey(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出原图</span></span><br><span class="line">imshow(<span class="string">"input img"</span>, src);</span><br><span class="line"><span class="comment">//转化为灰度图像</span></span><br><span class="line">Mat gray_src;</span><br><span class="line">cvtColor(src, gray_src, CV_BGR2GRAY);</span><br><span class="line">imshow(<span class="string">"gray img"</span>, gray_src);</span><br><span class="line"></span><br><span class="line"><span class="comment">//转化为二值图像</span></span><br><span class="line"><span class="comment">/*adaptiveThreshold(</span></span><br><span class="line"><span class="comment">Mat src, // 输入的灰度图像</span></span><br><span class="line"><span class="comment">Mat dest, // 二值图像</span></span><br><span class="line"><span class="comment">double maxValue, // 二值图像最大值</span></span><br><span class="line"><span class="comment">int adaptiveMethod // 自适应方法，只能其中之一 – </span></span><br><span class="line"><span class="comment">   // ADAPTIVE_THRESH_MEAN_C ， ADAPTIVE_THRESH_GAUSSIAN_C </span></span><br><span class="line"><span class="comment">int thresholdType,// 阈值类型</span></span><br><span class="line"><span class="comment">int blockSize, // 块大小</span></span><br><span class="line"><span class="comment">double C // 常量C 可以是正数，0，负数</span></span><br><span class="line"><span class="comment">)*/</span></span><br><span class="line"></span><br><span class="line">Mat binImg;</span><br><span class="line">adaptiveThreshold(~gray_src, binImg, <span class="number">255</span>, ADAPTIVE_THRESH_MEAN_C, THRESH_BINARY, <span class="number">15</span>, <span class="number">-2</span>);</span><br><span class="line">imshow(<span class="string">"binary img"</span>, binImg);</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义结构元素</span></span><br><span class="line"><span class="comment">//水平结构元素</span></span><br><span class="line">Mat hline = getStructuringElement(MORPH_RECT, Size(src.cols / <span class="number">16</span>, <span class="number">1</span>), Point(<span class="number">-1</span>, <span class="number">-1</span>));</span><br><span class="line"><span class="comment">//垂直结构元素</span></span><br><span class="line">Mat vline = getStructuringElement(MORPH_RECT, Size(<span class="number">1</span>, src.cols / <span class="number">16</span>), Point(<span class="number">-1</span>, <span class="number">-1</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//开操作 （腐蚀+膨胀）提取 水平线</span></span><br><span class="line"><span class="comment">//Mat temp;</span></span><br><span class="line"><span class="comment">//erode(binImg, temp, hline);//腐蚀</span></span><br><span class="line"><span class="comment">//dilate(temp, dst, hline);//膨胀</span></span><br><span class="line"><span class="comment">//直接使用开操作的api即可</span></span><br><span class="line">morphologyEx(binImg, dst, CV_MOP_OPEN, vline);</span><br><span class="line">bitwise_not(dst, dst);</span><br><span class="line">blur(dst, dst, Size(<span class="number">3</span>, <span class="number">3</span>), Point(<span class="number">-1</span>, <span class="number">-1</span>));</span><br><span class="line"></span><br><span class="line">imshow(<span class="string">"res"</span>, dst);</span><br><span class="line"></span><br><span class="line">waitKey(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure></div><h4 id="四、图像上采样和降采样"><a href="#四、图像上采样和降采样" class="headerlink" title="四、图像上采样和降采样"></a>四、图像上采样和降采样</h4><h5 id="1、图像金字塔概念"><a href="#1、图像金字塔概念" class="headerlink" title="1、图像金字塔概念"></a>1、图像金字塔概念</h5><ul><li><ol><li>我们在图像处理中常常会调整图像大小，最常见的就是放大(zoom in)和缩小（zoom out），尽管几何变换也可以实现图像放大和缩小，但是这里我们介绍图像金字塔</li></ol></li><li><ol start="2"><li>一个图像金字塔式一系列的图像组成，最底下一张是图像尺寸最大，最上方的图像尺寸最小，从空间上从上向下看就想一个古代的金字塔。</li></ol></li></ul><h5 id="2、高斯金字塔"><a href="#2、高斯金字塔" class="headerlink" title="2、高斯金字塔"></a>2、高斯金字塔</h5><ul><li>高斯金子塔是从底向上，逐层降采样得到。</li><li>降采样之后图像大小是原图像MxN的M/2 x N/2 ,就是对原图像删除偶数行与列，即得到降采样之后上一层的图片。</li><li>高斯金子塔的生成过程分为两步：<pre><code>- 对当前层进行高斯模糊- 删除当前层的偶数行与列</code></pre></li><li>即可得到上一层的图像，这样上一层跟下一层相比，都只有它的1/4大小。</li></ul><h5 id="3、高斯不同-Difference-of-Gaussian-DOG"><a href="#3、高斯不同-Difference-of-Gaussian-DOG" class="headerlink" title="3、高斯不同(Difference of Gaussian-DOG)"></a>3、高斯不同(Difference of Gaussian-DOG)</h5><ul><li>定义：就是把同一张图像在不同的参数下做高斯模糊之后的结果相减，得到的输出图像。称为高斯不同(DOG)</li><li>高斯不同是图像的内在特征，在灰度图像增强、角点检测中经常用到。</li></ul><h5 id="4、采样相关API"><a href="#4、采样相关API" class="headerlink" title="4、采样相关API"></a>4、采样相关API</h5><ul><li>上采样(cv::pyrUp) – zoom in 放大</li><li>降采样 (cv::pyrDown) – zoom out 缩小</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pyrUp(Mat src, Mat dst, Size(src.cols*2, src.rows*2)) </span><br><span class="line">生成的图像是原图在宽与高各放大两倍</span><br><span class="line">pyrDown(Mat src, Mat dst, Size(src.cols&#x2F;2, src.rows&#x2F;2))</span><br><span class="line">生成的图像是原图在宽与高各缩小1&#x2F;2</span><br></pre></td></tr></table></figure></div><h5 id="示例代码-1"><a href="#示例代码-1" class="headerlink" title="示例代码"></a>示例代码</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">//上采样</span></span><br><span class="line">pyrUp(src, dst, Size(src.cols * <span class="number">2</span>, src.rows * <span class="number">2</span>));</span><br><span class="line">imshow(<span class="string">"pyrUp img"</span>,dst);</span><br><span class="line"></span><br><span class="line"><span class="comment">//降采样</span></span><br><span class="line">pyrDown(src, dst, Size(src.cols / <span class="number">2</span>, src.rows / <span class="number">2</span>));</span><br><span class="line">imshow(<span class="string">"pyrDown img"</span>, dst);</span><br><span class="line"></span><br><span class="line"><span class="comment">//DOG</span></span><br><span class="line">Mat gray_src, g1, g2, dogImg;</span><br><span class="line">cvtColor(src, gray_src, CV_BGR2GRAY);</span><br><span class="line">GaussianBlur(gray_src, g1, Size(<span class="number">3</span>, <span class="number">3</span>), <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">GaussianBlur(g1, g2, Size(<span class="number">3</span>, <span class="number">3</span>), <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">subtract(g1, g2, dogImg, Mat());</span><br><span class="line"></span><br><span class="line"><span class="comment">//归一化显示</span></span><br><span class="line">normalize(dogImg, dogImg, <span class="number">255</span>, <span class="number">0</span>, NORM_MINMAX);</span><br><span class="line">imshow(<span class="string">"dog img"</span>, dogImg);</span><br></pre></td></tr></table></figure></div><h4 id="五、基本阈值操作"><a href="#五、基本阈值操作" class="headerlink" title="五、基本阈值操作"></a>五、基本阈值操作</h4><h5 id="1、图像阈值（threshold）"><a href="#1、图像阈值（threshold）" class="headerlink" title="1、图像阈值（threshold）"></a>1、图像阈值（threshold）</h5><blockquote><p>阈值 是什么？简单点说是把图像分割的标尺，这个标尺是根据什么产生的，阈值产生算法？阈值类型。（Binary segmentation）</p></blockquote><h5 id="2、阈值类型一阈值二值化-threshold-binary"><a href="#2、阈值类型一阈值二值化-threshold-binary" class="headerlink" title="2、阈值类型一阈值二值化(threshold binary)"></a>2、阈值类型一阈值二值化(threshold binary)</h5><ul><li>左下方的图表示图像像素点Src(x,y)值分布情况，蓝色水平线表示阈值<br><a href="http://myfile.buildworld.cn/%E9%98%88%E5%80%BC%E4%BA%8C%E5%80%BC%E5%8C%96.jpg" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="http://myfile.buildworld.cn/%E9%98%88%E5%80%BC%E4%BA%8C%E5%80%BC%E5%8C%96.jpg" class="lazyload"></a></li></ul><h5 id="3、阈值类型一阈值反二值化-threshold-binary-Inverted"><a href="#3、阈值类型一阈值反二值化-threshold-binary-Inverted" class="headerlink" title="3、阈值类型一阈值反二值化(threshold binary Inverted)"></a>3、阈值类型一阈值反二值化(threshold binary Inverted)</h5><ul><li>左下方的图表示图像像素点Src(x,y)值分布情况，蓝色水平线表示阈值<br><a href="http://myfile.buildworld.cn/%E9%98%88%E5%80%BC%E5%8F%8D%E4%BA%8C%E5%80%BC%E5%8C%96.jpg" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="http://myfile.buildworld.cn/%E9%98%88%E5%80%BC%E5%8F%8D%E4%BA%8C%E5%80%BC%E5%8C%96.jpg" class="lazyload"></a></li></ul><h5 id="4、阈值类型一截断-truncate"><a href="#4、阈值类型一截断-truncate" class="headerlink" title="4、阈值类型一截断 (truncate)"></a>4、阈值类型一截断 (truncate)</h5><ul><li>左下方的图表示图像像素点Src(x,y)值分布情况，蓝色水平线表示阈值<br><a href="http://myfile.buildworld.cn/%E6%88%AA%E6%96%AD.jpg" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="http://myfile.buildworld.cn/%E6%88%AA%E6%96%AD.jpg" class="lazyload"></a></li></ul><h5 id="5、阈值类型一阈值取零-threshold-to-zero"><a href="#5、阈值类型一阈值取零-threshold-to-zero" class="headerlink" title="5、阈值类型一阈值取零 (threshold to zero)"></a>5、阈值类型一阈值取零 (threshold to zero)</h5><ul><li>左下方的图表示图像像素点Src(x,y)值分布情况，蓝色水平线表示阈值<br><a href="http://myfile.buildworld.cn/%E9%98%88%E5%80%BC%E5%8F%96%E9%9B%B6.jpg" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="http://myfile.buildworld.cn/%E9%98%88%E5%80%BC%E5%8F%96%E9%9B%B6.jpg" class="lazyload"></a></li></ul><h5 id="5、阈值类型一阈值反取零-threshold-to-zero-inverted"><a href="#5、阈值类型一阈值反取零-threshold-to-zero-inverted" class="headerlink" title="5、阈值类型一阈值反取零 (threshold to zero inverted)"></a>5、阈值类型一阈值反取零 (threshold to zero inverted)</h5><ul><li>左下方的图表示图像像素点Src(x,y)值分布情况，蓝色水平线表示阈值<br><a href="http://myfile.buildworld.cn/%E9%98%88%E5%80%BC%E5%8F%8D%E5%8F%96%E9%9B%B6.jpg" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="http://myfile.buildworld.cn/%E9%98%88%E5%80%BC%E5%8F%8D%E5%8F%96%E9%9B%B6.jpg" class="lazyload"></a><h5 id="6、相关的API"><a href="#6、相关的API" class="headerlink" title="6、相关的API"></a>6、相关的API</h5><a href="http://myfile.buildworld.cn/%E9%98%88%E5%80%BCAPI.png" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="http://myfile.buildworld.cn/%E9%98%88%E5%80%BCAPI.png" class="lazyload"></a><h5 id="示例代码-2"><a href="#示例代码-2" class="headerlink" title="示例代码"></a>示例代码</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">Mat src, dst, gray_src;</span><br><span class="line"><span class="keyword">int</span> threshold_value = <span class="number">127</span>;</span><br><span class="line"><span class="keyword">int</span> threshold_max = <span class="number">255</span>;</span><br><span class="line"><span class="keyword">int</span> type_value = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> type_max = <span class="number">4</span>;</span><br><span class="line"><span class="built_in">string</span> output_title = <span class="string">"output img"</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Threshold_Demo</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">void</span> *)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> ** argv)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">src = imread(<span class="string">"C:\\Users\\15646\\Pictures\\雷军.jpg"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!src.data)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"not found img"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">waitKey(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">namedWindow(output_title, CV_WINDOW_AUTOSIZE);</span><br><span class="line">createTrackbar(<span class="string">"Threshold Value"</span>, output_title, &amp;threshold_value, threshold_max, Threshold_Demo);</span><br><span class="line">createTrackbar(<span class="string">"Type Value"</span>, output_title, &amp;type_value, type_max, Threshold_Demo);</span><br><span class="line">Threshold_Demo(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">waitKey(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Threshold_Demo</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">void</span> *)</span> </span>&#123;</span><br><span class="line">cvtColor(src, gray_src, CV_BGR2GRAY);</span><br><span class="line"><span class="comment">//设置阈值</span></span><br><span class="line">threshold(gray_src, dst, threshold_value, threshold_max,type_value);</span><br><span class="line">imshow(output_title, dst);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h4 id="六、自定义线性滤波"><a href="#六、自定义线性滤波" class="headerlink" title="六、自定义线性滤波"></a>六、自定义线性滤波</h4><h5 id="1、卷积概念"><a href="#1、卷积概念" class="headerlink" title="1、卷积概念"></a>1、卷积概念</h5></li><li>卷积是图像处理中一个操作，是kernel在图像的每个像素上的操作。</li><li>Kernel本质上一个固定大小的矩阵数组，其中心点称为锚点(anchor point)</li></ul><h5 id="2、卷积如何工作"><a href="#2、卷积如何工作" class="headerlink" title="2、卷积如何工作"></a>2、卷积如何工作</h5><blockquote><p>把kernel放到像素数组之上，求锚点周围覆盖的像素乘积之和（包括锚点），用来替换锚点覆盖下像素点值称为卷积处理。数学表达如下：</p></blockquote><html><a href="https://www.codecogs.com/eqnedit.php?latex=H(x,y)=\sum_{i=0}^{M_{i-1}}\sum_{i=0}^{M_{j-1}}I\left&space;(&space;x&plus;i-a_{i}&space;,y&plus;j-a_{j}\right&space;)K(i,j)" target="_blank"><img title="H(x,y)=\sum_{i=0}^{M_{i-1}}\sum_{i=0}^{M_{j-1}}I\left ( x+i-a_{i} ,y+j-a_{j}\right )K(i,j)" data-src="https://latex.codecogs.com/gif.latex?H(x,y)=\sum_{i=0}^{M_{i-1}}\sum_{i=0}^{M_{j-1}}I\left&space;(&space;x&plus;i-a_{i}&space;,y&plus;j-a_{j}\right&space;)K(i,j)" class="lazyload"></a></html><h6 id="工作原理示意图"><a href="#工作原理示意图" class="headerlink" title="工作原理示意图"></a>工作原理示意图</h6><p><a href="http://myfile.buildworld.cn/%E5%8D%B7%E7%A7%AF.png" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="http://myfile.buildworld.cn/%E5%8D%B7%E7%A7%AF.png" class="lazyload"></a></p><h5 id="3、常见算子"><a href="#3、常见算子" class="headerlink" title="3、常见算子"></a>3、常见算子</h5><h6 id="Robert算子"><a href="#Robert算子" class="headerlink" title="Robert算子"></a>Robert算子</h6><table><thead><tr><th>+1</th><th>0</th></tr></thead><tbody><tr><td>0</td><td>-1</td></tr></tbody></table><table><thead><tr><th>0</th><th>+1</th></tr></thead><tbody><tr><td>-1</td><td>0</td></tr></tbody></table><h6 id="Sobel算子"><a href="#Sobel算子" class="headerlink" title="Sobel算子"></a>Sobel算子</h6><table><thead><tr><th>-1</th><th>0</th><th>1</th></tr></thead><tbody><tr><td>-2</td><td>0</td><td>2</td></tr><tr><td>-1</td><td>0</td><td>1</td></tr></tbody></table><table><thead><tr><th>-1</th><th>-2</th><th>-1</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>0</td></tr><tr><td>1</td><td>2</td><td>1</td></tr></tbody></table><h6 id="拉普拉多算子"><a href="#拉普拉多算子" class="headerlink" title="拉普拉多算子"></a>拉普拉多算子</h6><table><thead><tr><th>0</th><th>-1</th><th>0</th></tr></thead><tbody><tr><td>-1</td><td>4</td><td>-1</td></tr><tr><td>0</td><td>-1</td><td>0</td></tr></tbody></table><h5 id="示例代码-3"><a href="#示例代码-3" class="headerlink" title="示例代码"></a>示例代码</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">//Robert算子 X方向</span></span><br><span class="line">Mat kernel_x = (Mat_&lt;<span class="keyword">int</span>&gt;(<span class="number">2</span>, <span class="number">2</span>) &lt;&lt; <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>);</span><br><span class="line">filter2D(src, dst, <span class="number">-1</span>, kernel_x, Point(<span class="number">-1</span>, <span class="number">-1</span>), <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">imshow(<span class="string">"Robert X"</span>, dst);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Robert算子 Y方向</span></span><br><span class="line">Mat kernel_y = (Mat_&lt;<span class="keyword">int</span>&gt;(<span class="number">2</span>, <span class="number">2</span>) &lt;&lt; <span class="number">0</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">0</span>);</span><br><span class="line">filter2D(src, dst, <span class="number">-1</span>, kernel_y, Point(<span class="number">-1</span>, <span class="number">-1</span>), <span class="number">0</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></figure></div><h5 id="4、自定义卷积模糊"><a href="#4、自定义卷积模糊" class="headerlink" title="4、自定义卷积模糊"></a>4、自定义卷积模糊</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ilter2D方法filter2D(</span><br><span class="line">Mat src, <span class="comment">//输入图像</span></span><br><span class="line">Mat dst, <span class="comment">// 模糊图像</span></span><br><span class="line"><span class="keyword">int</span> depth, <span class="comment">// 图像深度32/8</span></span><br><span class="line">Mat kernel, <span class="comment">// 卷积核/模板</span></span><br><span class="line">Point anchor, <span class="comment">// 锚点位置</span></span><br><span class="line"><span class="keyword">double</span> delta <span class="comment">// 计算出来的像素+delta</span></span><br><span class="line">)</span><br><span class="line">其中 kernel是可以自定义的卷积核</span><br></pre></td></tr></table></figure></div><h6 id="图片逐渐模糊代码"><a href="#图片逐渐模糊代码" class="headerlink" title="图片逐渐模糊代码"></a>图片逐渐模糊代码</h6><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> c = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> ksize = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">&#123;</span><br><span class="line">c = waitKey(<span class="number">500</span>);</span><br><span class="line"><span class="keyword">if</span> ((<span class="keyword">char</span>)c == <span class="number">27</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">ksize = <span class="number">4</span> + (index % <span class="number">5</span>) * <span class="number">2</span>;</span><br><span class="line">Mat kernel = Mat::ones(Size(ksize, ksize), CV_32F) / (<span class="keyword">float</span>)(ksize*ksize);</span><br><span class="line">filter2D(src, dst, <span class="number">-1</span>, kernel, Point(<span class="number">-1</span>, <span class="number">-1</span>));</span><br><span class="line">index++;</span><br><span class="line">imshow(<span class="string">"show"</span>, dst);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h4 id="七、处理边缘"><a href="#七、处理边缘" class="headerlink" title="七、处理边缘"></a>七、处理边缘</h4><h5 id="1、卷积边界问题"><a href="#1、卷积边界问题" class="headerlink" title="1、卷积边界问题"></a>1、卷积边界问题</h5><blockquote><p>图像卷积的时候边界像素，不能被卷积操作，原因在于边界像素没有完全跟kernel重叠，所以当3x3滤波时候有1个像素的边缘没有被处理，5x5滤波的时候有2个像素的边缘没有被处理。</p></blockquote><h5 id="2、处理边缘"><a href="#2、处理边缘" class="headerlink" title="2、处理边缘"></a>2、处理边缘</h5><blockquote><p>在卷积开始之前增加边缘像素，填充的像素值为0或者RGB黑色，比如3x3在<br>四周各填充1个像素的边缘，这样就确保图像的边缘被处理，在卷积处理之<br>后再去掉这些边缘。openCV中默认的处理方法是： BORDER_DEFAULT，此外<br>常用的还有如下几种：</p></blockquote><ul><li>BORDER_CONSTANT – 填充边缘用指定像素值</li><li>BORDER_REPLICATE – 填充边缘像素用已知的边缘像素值。</li><li>BORDER_WRAP – 用另外一边的像素来补偿填充<h5 id="填充示例代码"><a href="#填充示例代码" class="headerlink" title="填充示例代码"></a>填充示例代码</h5></li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Mat src, dst;</span><br><span class="line">src = imread(<span class="string">"C:\\Users\\15646\\Pictures\\雷军.jpg"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> top = (<span class="keyword">int</span>)(<span class="number">0.05</span>*src.rows);</span><br><span class="line"><span class="keyword">int</span> bottom = (<span class="keyword">int</span>)(<span class="number">0.05</span>*src.rows);</span><br><span class="line"><span class="keyword">int</span> left = (<span class="keyword">int</span>)(<span class="number">0.05</span>*src.cols);</span><br><span class="line"><span class="keyword">int</span> right = (<span class="keyword">int</span>)(<span class="number">0.05</span>*src.cols);</span><br><span class="line"></span><br><span class="line">RNG rng;</span><br><span class="line">Scalar color = Scalar(rng.uniform(<span class="number">0</span>, <span class="number">255</span>), rng.uniform(<span class="number">0</span>, <span class="number">255</span>), rng.uniform(<span class="number">0</span>, <span class="number">255</span>));</span><br><span class="line"><span class="comment">/*copyMakeBorder（</span></span><br><span class="line"><span class="comment">- Mat src, // 输入图像</span></span><br><span class="line"><span class="comment">-Mat dst, // 添加边缘图像</span></span><br><span class="line"><span class="comment">-int top, // 边缘长度，一般上下左右都取相同值，</span></span><br><span class="line"><span class="comment">-int bottom,</span></span><br><span class="line"><span class="comment">-int left,</span></span><br><span class="line"><span class="comment">-int right,</span></span><br><span class="line"><span class="comment">-int borderType // 边缘类型</span></span><br><span class="line"><span class="comment">- Scalar value</span></span><br><span class="line"><span class="comment">）</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">copyMakeBorder(src, dst, top, bottom, left, right, BORDER_CONSTANT,color);</span><br><span class="line">imshow(<span class="string">"output img"</span>, dst);</span><br></pre></td></tr></table></figure></div><h4 id="八、图像边缘提取–Sobel算子"><a href="#八、图像边缘提取–Sobel算子" class="headerlink" title="八、图像边缘提取–Sobel算子"></a>八、图像边缘提取–Sobel算子</h4><h5 id="1、卷积应用-图像边缘提取"><a href="#1、卷积应用-图像边缘提取" class="headerlink" title="1、卷积应用-图像边缘提取"></a>1、卷积应用-图像边缘提取</h5><ul><li>边缘是什么 – 是像素值发生跃迁的地方，是图像的显著特征之一，在图像特征提取、对象检测、模式识别等方面都有重要的作用。</li><li>如何捕捉/提取边缘 – 对图像求它的一阶导数</li><li>delta =  f(x) – f(x-1), delta越大，说明像素在X方向变化越大，边缘信号越强，<h5 id="2、Sobel算子"><a href="#2、Sobel算子" class="headerlink" title="2、Sobel算子"></a>2、Sobel算子</h5></li><li>是离散微分算子（discrete differentiation operator），用来计算图像灰度的近似梯度</li><li>Soble算子功能集合高斯平滑和微分求导</li><li>又被称为一阶微分算子，求导算子，在水平和垂直两个方向上求导，得到图像X方向与Y方向梯度图像<h6 id="原理图"><a href="#原理图" class="headerlink" title="原理图"></a>原理图</h6><a href="http://myfile.buildworld.cn/sobel%E7%AE%97%E5%AD%90.jpg" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="http://myfile.buildworld.cn/sobel%E7%AE%97%E5%AD%90.jpg" class="lazyload"></a><h5 id="示例代码-4"><a href="#示例代码-4" class="headerlink" title="示例代码"></a>示例代码</h5></li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">Mat src, dst;</span><br><span class="line">src = imread(<span class="string">"C:\\Users\\15646\\Pictures\\雷军.jpg"</span>);</span><br><span class="line"></span><br><span class="line">Mat gray_dst;</span><br><span class="line">GaussianBlur(src, dst, Size(<span class="number">3</span>, <span class="number">3</span>), <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">cvtColor(dst, gray_dst, CV_BGR2GRAY);</span><br><span class="line"></span><br><span class="line"><span class="comment">//图像边缘提取</span></span><br><span class="line">Mat xgrad, ygrad;</span><br><span class="line"><span class="comment">//获取x,y方向上的梯度图像</span></span><br><span class="line"><span class="comment">/*cv::Sobel(</span></span><br><span class="line"><span class="comment">InputArray Src // 输入图像</span></span><br><span class="line"><span class="comment">OutputArray dst// 输出图像，大小与输入图像一致</span></span><br><span class="line"><span class="comment">int depth // 输出图像深度. </span></span><br><span class="line"><span class="comment">Int dx.  // X方向，几阶导数</span></span><br><span class="line"><span class="comment">int dy // Y方向，几阶导数. </span></span><br><span class="line"><span class="comment">int ksize, SOBEL算子kernel大小，必须是1、3、5、7、</span></span><br><span class="line"><span class="comment">double scale = 1</span></span><br><span class="line"><span class="comment">double delta = 0</span></span><br><span class="line"><span class="comment">int borderType = BORDER_DEFAULT</span></span><br><span class="line"><span class="comment">)*/</span></span><br><span class="line"></span><br><span class="line">Sobel(gray_dst, xgrad, CV_16S, <span class="number">1</span>, <span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line">Sobel(gray_dst, ygrad, CV_16S, <span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line">convertScaleAbs(xgrad, xgrad); <span class="comment">//计算图像像素的绝对值再输出到此图像</span></span><br><span class="line">convertScaleAbs(ygrad, ygrad);</span><br><span class="line"><span class="comment">//合成x,y方向上的梯度图像</span></span><br><span class="line">Mat res;</span><br><span class="line">addWeighted(xgrad, <span class="number">0.5</span>, ygrad, <span class="number">0</span>, <span class="number">0</span>, res);</span><br><span class="line">imshow(<span class="string">"res img"</span>, res);</span><br><span class="line"></span><br><span class="line"><span class="comment">//手动合成</span></span><br><span class="line">Mat xygrad = Mat(xgrad.<span class="built_in">size</span>(), xgrad.type());</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">height</span> = ygrad.rows;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">width</span> = xgrad.cols;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> row = <span class="number">0</span>; row &lt; <span class="built_in">height</span>; row++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> col = <span class="number">0</span>; col &lt; <span class="built_in">width</span>; col++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//将水平梯度和垂直梯度的值相加获取我们需要的值，合成图像</span></span><br><span class="line">xygrad.at&lt;uchar&gt;(row, col) = saturate_cast&lt;uchar&gt;(xgrad.at&lt;uchar&gt;(row, col) + ygrad.at&lt;uchar&gt;(row, col));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">namedWindow(<span class="string">"xygrad"</span>, CV_WINDOW_AUTOSIZE);</span><br><span class="line">imshow(<span class="string">"xygrad"</span>, xygrad);</span><br></pre></td></tr></table></figure></div><h6 id="在OpenCV里面包含了增强的Scharr方法"><a href="#在OpenCV里面包含了增强的Scharr方法" class="headerlink" title="在OpenCV里面包含了增强的Scharr方法"></a>在OpenCV里面包含了增强的Scharr方法</h6><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cv::Scharr (</span><br><span class="line">InputArray Src <span class="comment">// 输入图像</span></span><br><span class="line">OutputArray dst<span class="comment">// 输出图像，大小与输入图像一致</span></span><br><span class="line"><span class="keyword">int</span> depth <span class="comment">// 输出图像深度. </span></span><br><span class="line">Int dx.  <span class="comment">// X方向，几阶导数</span></span><br><span class="line"><span class="keyword">int</span> dy <span class="comment">// Y方向，几阶导数. </span></span><br><span class="line"><span class="keyword">double</span> scale  = <span class="number">1</span></span><br><span class="line"><span class="keyword">double</span> delta = <span class="number">0</span></span><br><span class="line"><span class="keyword">int</span> borderType = BORDER_DEFAULT</span><br><span class="line">)</span><br></pre></td></tr></table></figure></div><h4 id="九、图像边缘提取-Laplance算子-拉普拉斯算子"><a href="#九、图像边缘提取-Laplance算子-拉普拉斯算子" class="headerlink" title="九、图像边缘提取-Laplance算子(拉普拉斯算子)"></a>九、图像边缘提取-Laplance算子(拉普拉斯算子)</h4><h5 id="1、处理流程"><a href="#1、处理流程" class="headerlink" title="1、处理流程"></a>1、处理流程</h5><ul><li>高斯模糊 – 去噪声GaussianBlur()</li><li>转换为灰度图像cvtColor()</li><li>拉普拉斯 – 二阶导数计算Laplacian()</li><li>取绝对值convertScaleAbs()</li><li>显示结果</li></ul><h5 id="2、API使用cv-Laplacian"><a href="#2、API使用cv-Laplacian" class="headerlink" title="2、API使用cv::Laplacian"></a>2、API使用cv::Laplacian</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Laplacian(</span><br><span class="line">InputArray src,</span><br><span class="line">OutputArray dst,</span><br><span class="line"><span class="keyword">int</span> depth, <span class="comment">//深度CV_16S</span></span><br><span class="line"><span class="keyword">int</span> kisze, <span class="comment">// 3</span></span><br><span class="line"><span class="keyword">double</span> scale = <span class="number">1</span>,</span><br><span class="line"><span class="keyword">double</span> delta =<span class="number">0.0</span>,</span><br><span class="line"><span class="keyword">int</span> borderType = <span class="number">4</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></div><h6 id="示例代码-5"><a href="#示例代码-5" class="headerlink" title="示例代码"></a>示例代码</h6><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">   Mat src, dst, edge_img;</span><br><span class="line">src = imread(<span class="string">"C:\\Users\\15646\\Pictures\\雷军.jpg"</span>);</span><br><span class="line"></span><br><span class="line">Mat gray_dst;</span><br><span class="line">GaussianBlur(src, dst, Size(<span class="number">3</span>, <span class="number">3</span>), <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">cvtColor(dst, gray_dst, CV_BGR2GRAY);</span><br><span class="line"></span><br><span class="line">threshold(edge_img, edge_img, <span class="number">0</span>, <span class="number">255</span>, THRESH_OTSU | THRESH_BINARY);</span><br><span class="line">Laplacian(gray_dst, edge_img, CV_16S, <span class="number">3</span>);</span><br><span class="line">convertScaleAbs(edge_img, edge_img);</span><br><span class="line">imshow(<span class="string">"laplance img"</span>, edge_img);</span><br></pre></td></tr></table></figure></div><h4 id="十、Canny边缘检测"><a href="#十、Canny边缘检测" class="headerlink" title="十、Canny边缘检测"></a>十、Canny边缘检测</h4><h5 id="1、Canny算法介绍"><a href="#1、Canny算法介绍" class="headerlink" title="1、Canny算法介绍"></a>1、Canny算法介绍</h5><ul><li>Canny是边缘检测算法，在1986年提出的。</li><li>是一个很好的边缘检测器</li><li>很常用也很实用的图像处理方法</li></ul><h5 id="2、Canny算法使用"><a href="#2、Canny算法使用" class="headerlink" title="2、Canny算法使用"></a>2、Canny算法使用</h5><ul><li>高斯模糊 - GaussianBlur</li><li>灰度转换 - cvtColor</li><li>计算梯度 – Sobel/Scharr</li><li>非最大信号抑制</li><li>高低阈值输出二值图像</li></ul><h5 id="3、Canny算法介绍-非最大信号抑制"><a href="#3、Canny算法介绍-非最大信号抑制" class="headerlink" title="3、Canny算法介绍 - 非最大信号抑制"></a>3、Canny算法介绍 - 非最大信号抑制</h5><p><a href="http://myfile.buildworld.cn/Canny%E7%AE%97%E6%B3%95-%E9%9D%9E%E6%9C%80%E5%A4%A7%E4%BF%A1%E5%8F%B7%E6%8A%91%E5%88%B6.jpg" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="http://myfile.buildworld.cn/Canny%E7%AE%97%E6%B3%95-%E9%9D%9E%E6%9C%80%E5%A4%A7%E4%BF%A1%E5%8F%B7%E6%8A%91%E5%88%B6.jpg" class="lazyload"></a></p><h5 id="4、Canny算法介绍-高低阈值输出二值图像"><a href="#4、Canny算法介绍-高低阈值输出二值图像" class="headerlink" title="4、Canny算法介绍-高低阈值输出二值图像"></a>4、Canny算法介绍-高低阈值输出二值图像</h5><ul><li>T1， T2为阈值，凡是高于T2的都保留，凡是小于T1都丢弃，从高于T2的像素出发，凡是大于T1而且相互连接的，都保留。最终得到一个输出二值图像。</li><li>推荐的高低阈值比值为 T2: T1 = 3:1/2:1其中T2为高阈值，T1为低阈值</li></ul><h5 id="示例代码-6"><a href="#示例代码-6" class="headerlink" title="示例代码"></a>示例代码</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">Mat gray_dst, src;</span><br><span class="line"><span class="keyword">int</span> t1_value = <span class="number">50</span>;</span><br><span class="line"><span class="keyword">int</span> max_value = <span class="number">255</span>;</span><br><span class="line"><span class="built_in">string</span> output_title = <span class="string">"output img"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CannyDemo</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">void</span>*)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span>  <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">src = imread(<span class="string">"C:\\Users\\15646\\Pictures\\雷军.jpg"</span>);</span><br><span class="line"></span><br><span class="line">namedWindow(output_title, CV_WINDOW_AUTOSIZE);</span><br><span class="line"><span class="comment">//灰度转换</span></span><br><span class="line">cvtColor(src, gray_dst, CV_BGR2GRAY);</span><br><span class="line">createTrackbar(<span class="string">"Threshold Value"</span>, output_title, &amp;t1_value, max_value, CannyDemo);</span><br><span class="line">CannyDemo(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">waitKey(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CannyDemo</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">void</span>*)</span> </span>&#123;</span><br><span class="line">Mat edge_dst;</span><br><span class="line"><span class="comment">//高斯模糊</span></span><br><span class="line">GaussianBlur(gray_dst, edge_dst, Size(<span class="number">3</span>, <span class="number">3</span>), <span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line"><span class="comment">/*Canny（</span></span><br><span class="line"><span class="comment">InputArray src, // 8-bit的输入图像</span></span><br><span class="line"><span class="comment">OutputArray edges,// 输出边缘图像， 一般都是二值图像，背景是黑色</span></span><br><span class="line"><span class="comment">double threshold1,// 低阈值，常取高阈值的1/2或者1/3</span></span><br><span class="line"><span class="comment">double threshold2,// 高阈值</span></span><br><span class="line"><span class="comment">int aptertureSize,// Soble算子的size，通常3x3，取值3</span></span><br><span class="line"><span class="comment">bool L2gradient // 选择 true表示是L2来归一化，否则用L1归一化,一般用L1</span></span><br><span class="line"><span class="comment">）*/</span></span><br><span class="line"></span><br><span class="line">Canny(gray_dst, edge_dst, t1_value, t1_value * <span class="number">2</span>, <span class="number">3</span>, <span class="literal">false</span>);</span><br><span class="line">imshow(output_title, edge_dst);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> 计算机视觉 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenCV </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenCV图像处理笔记（一）：图片基本操作</title>
      <link href="/2019/07/08/OpenCV%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E5%9B%BE%E7%89%87%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
      <url>/2019/07/08/OpenCV%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E5%9B%BE%E7%89%87%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h4 id="一、基本介绍"><a href="#一、基本介绍" class="headerlink" title="一、基本介绍"></a>一、基本介绍</h4><h5 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h5><ul><li>OpenCV是计算机视觉开源库，主要算法涉及图像处理和机器学习相关方法。</li><li>是Intel公司贡献出来的，俄罗斯工程师贡献大部分C/C++带代码。</li><li>在多数图像处理相关的应用程序中被采用,BSD许可，可以免费应用在商业和研究领域</li><li>最新版本是OpenCV 3.1.0，当前SDK支持语言包括了Java、Python、IOS和Android版本。</li><li>官方主页： <a href="http://opencv.org/opencv-3-1.html" target="_blank" rel="noopener">http://opencv.org/opencv-3-1.html</a></li><li>其它Matlab、Halcon<br><a href="http://myfile.buildworld.cn/opencv.png" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="http://myfile.buildworld.cn/opencv.png" class="lazyload"></a></li></ul><h5 id="2、核心模块"><a href="#2、核心模块" class="headerlink" title="2、核心模块"></a>2、核心模块</h5><ul><li>HighGUI部分</li><li>Image Process</li><li>2D Feature</li><li>Camera Calibration and 3D reconstruction</li><li>Video Analysis</li><li>Object Detection</li><li>Machine Learning</li><li>GPU加速</li></ul><h5 id="3、安装（vs2015环境-amp-amp-openCV-3-x）"><a href="#3、安装（vs2015环境-amp-amp-openCV-3-x）" class="headerlink" title="3、安装（vs2015环境 &amp;&amp; openCV 3.x）"></a>3、安装（vs2015环境 &amp;&amp; openCV 3.x）</h5><p><a href="https://blog.csdn.net/duwangthefirst/article/details/79452314" target="_blank" rel="noopener">点击博客地址</a></p><p>==如果有报无法找到opencv_world343.dll的Error，请把C:\opencv\build\x64\vc14\bin下的opencv_world343.dll文件复制到C:\Windows 目录下即可==</p><h4 id="二、图像处理"><a href="#二、图像处理" class="headerlink" title="二、图像处理"></a>二、图像处理</h4><h5 id="1、加载、修改、保存图像"><a href="#1、加载、修改、保存图像" class="headerlink" title="1、加载、修改、保存图像"></a>1、加载、修改、保存图像</h5><h6 id="加载图像（用cv-imread）"><a href="#加载图像（用cv-imread）" class="headerlink" title="加载图像（用cv::imread）"></a>加载图像（用cv::imread）</h6><blockquote><p>imread功能是加载图像文件成为一个Mat对象，其中第一个参数表示图像文件名称</p></blockquote><blockquote><p>第二个参数，表示加载的图像是什么类型，支持常见的三个参数值</p></blockquote><ul><li>IMREAD_UNCHANGED (&lt;0) 表示加载原图，不做任何改变</li><li>IMREAD_GRAYSCALE ( 0)表示把原图作为灰度图像加载进来</li><li>IMREAD_COLOR (&gt;0) 表示把原图作为RGB图像加载进来</li></ul><p>==注意：== OpenCV支持JPG、PNG、TIFF等常见格式图像文件加载</p><h6 id="显示图像-cv-namedWindos-与cv-imshow"><a href="#显示图像-cv-namedWindos-与cv-imshow" class="headerlink" title="显示图像 (cv::namedWindos 与cv::imshow)"></a>显示图像 (cv::namedWindos 与cv::imshow)</h6><ul><li><p>namedWindos功能是创建一个OpenCV窗口，它是由OpenCV自动创建与释放，你无需取销毁它。</p></li><li><p>常见用法namedWindow(“Window Title”, WINDOW_AUTOSIZE)</p></li><li><p>WINDOW_AUTOSIZE会自动根据图像大小，显示窗口大小，不能人为改变窗口大小</p></li><li><p>WINDOW_NORMAL,跟QT集成的时候会使用，允许修改窗口大小。</p></li><li><p>imshow根据窗口名称显示图像到指定的窗口上去，第一个参数是窗口名称，第二参数是Mat对象</p></li></ul><h6 id="修改图像-cv-cvtColor"><a href="#修改图像-cv-cvtColor" class="headerlink" title="修改图像 (cv::cvtColor)"></a>修改图像 (cv::cvtColor)</h6><ul><li>cvtColor的功能是把图像从一个彩色空间转换到另外一个色彩空间，有三个参数，第一个参数表示源图像、第二参数表示色彩空间转换之后的图像、第三个参数表示源和目标色彩空间如：COLOR_BGR2HLS 、COLOR_BGR2GRAY 等</li><li>cvtColor( image, gray_image, COLOR_BGR2GRAY );</li></ul><h6 id="保存图像-cv-imwrite"><a href="#保存图像-cv-imwrite" class="headerlink" title="保存图像(cv::imwrite)"></a>保存图像(cv::imwrite)</h6><ul><li>保存图像文件到指定目录路径</li><li>只有8位、16位的PNG、JPG、Tiff文件格式而且是单通道或者三通道的BGR的图像才可以通过这种方式保存</li><li>保存PNG格式的时候可以保存透明通道的图片</li><li>可以指定压缩参数</li></ul><h5 id="2、矩阵的掩膜操作"><a href="#2、矩阵的掩膜操作" class="headerlink" title="2、矩阵的掩膜操作"></a>2、矩阵的掩膜操作</h5><p><a href="http://myfile.buildworld.cn/%E7%9F%A9%E9%98%B5%E6%8E%A9%E8%86%9C.png" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="http://myfile.buildworld.cn/%E7%9F%A9%E9%98%B5%E6%8E%A9%E8%86%9C.png" class="lazyload"></a></p><h6 id="获取图像像素指针"><a href="#获取图像像素指针" class="headerlink" title="获取图像像素指针"></a>获取图像像素指针</h6><ul><li>CV_Assert(myImage.depth() == CV_8U); </li><li>Mat.ptr<uchar>(int i=0) 获取像素矩阵的指针，索引i表示第几行，从0开始计行数。</uchar></li><li>获得当前行指针const uchar*  current= myImage.ptr<uchar>(row );</uchar></li><li>获取当前像素点P(row, col)的像素值 p(row, col) =current[col]</li></ul><h6 id="像素范围处理saturate-cast"><a href="#像素范围处理saturate-cast" class="headerlink" title="像素范围处理saturate_cast"></a>像素范围处理saturate_cast<uchar></uchar></h6><ul><li>saturate_cast<uchar>（-100），返回 0。</uchar></li><li>saturate_cast<uchar>（288），返回255</uchar></li><li>saturate_cast<uchar>（100），返回100</uchar></li><li>这个函数的功能是确保RGB值得范围在0~255之间</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;opencv2/opencv.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> ** argv)</span> </span>&#123;</span><br><span class="line">Mat src, dst;</span><br><span class="line">src = imread(<span class="string">"C:\\Users\\15646\\Pictures\\雷军.jpg"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!src.data)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"no image\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">namedWindow(<span class="string">"input img"</span>, CV_WINDOW_AUTOSIZE);</span><br><span class="line">imshow(<span class="string">"input img"</span>, src);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> cols = (src.cols<span class="number">-1</span>)* src.channels();</span><br><span class="line"><span class="keyword">int</span> offsetx = src.channels();</span><br><span class="line"><span class="keyword">int</span> rows = src.rows;</span><br><span class="line">dst = Mat(src.<span class="built_in">size</span>(), src.type());</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> row = <span class="number">1</span>; row &lt; rows<span class="number">-1</span>; row++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">const</span> uchar* current = src.ptr&lt;uchar&gt;(row);</span><br><span class="line"><span class="keyword">const</span> uchar* previous = src.ptr&lt;uchar&gt;(row - <span class="number">1</span>);</span><br><span class="line"><span class="keyword">const</span> uchar* next = src.ptr&lt;uchar&gt;(row);</span><br><span class="line">uchar* output = dst.ptr&lt;uchar&gt;(row);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> col = offsetx; col&lt;cols;col++)</span><br><span class="line">&#123;</span><br><span class="line">output[col] = saturate_cast&lt;uchar&gt;(<span class="number">5</span> * current[col] - (current[col - offsetx] +</span><br><span class="line">current[col + offsetx] + previous[col] + next[col]));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">namedWindow(<span class="string">"contrast img "</span>, CV_WINDOW_AUTOSIZE);</span><br><span class="line">imshow(<span class="string">"contrast img "</span>, dst);</span><br><span class="line">waitKey(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h6 id="函数调用filter2D功能"><a href="#函数调用filter2D功能" class="headerlink" title="函数调用filter2D功能"></a>函数调用filter2D功能</h6><ul><li>定义掩膜：Mat kernel = (Mat_<char>(3,3) &lt;&lt; 0, -1, 0, -1, 5, -1, 0, -1, 0);</char></li><li>filter2D( src, dst, src.depth(), kernel );其中src与dst是Mat类型变量、src.depth表示位图深度，有32、24、8等。</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">   Mat kernel = (Mat_&lt;<span class="keyword">char</span>&gt;(<span class="number">3</span>, <span class="number">3</span>) &lt;&lt; <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">5</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line">filter2D(src,dst,src.depth(),kernel);</span><br></pre></td></tr></table></figure></div><h5 id="3、Mat对象"><a href="#3、Mat对象" class="headerlink" title="3、Mat对象"></a>3、Mat对象</h5><h6 id="Mat对象与IplImage对象"><a href="#Mat对象与IplImage对象" class="headerlink" title="Mat对象与IplImage对象"></a>Mat对象与IplImage对象</h6><ul><li>Mat对象OpenCV2.0之后引进的图像数据结构、自动分配内存、不存在内存泄漏的问题，是面向对象的数据结构。分了两个部分，头部与数据部分</li><li>IplImage是从2001年OpenCV发布之后就一直存在，是C语言风格的数据结构，需要开发者自己分配与管理内存，对大的程序使用它容易导致内存泄漏问题</li></ul><p>==常用方法：==</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang"></div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">void copyTo(Mat mat)    克隆</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">convertTo</span><span class="params">(Mat dst, <span class="keyword">int</span> type)</span> </span></span><br><span class="line">Mat clone() 克隆</span><br><span class="line">int channels()  获取通道</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">depth</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span></span>;</span><br><span class="line">uchar* ptr(i=0)  获取指针</span><br></pre></td></tr></table></figure></div><h6 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h6><ul><li>部分复制：一般情况下只会复制Mat对象的头和指针部分，不会复制数据部分</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Mat A= imread(imgFilePath);</span><br><span class="line"><span class="function">Mat <span class="title">B</span><span class="params">(A)</span>  <span class="comment">// 只复制</span></span></span><br></pre></td></tr></table></figure></div><ul><li>完全复制：如果想把Mat对象的头部和数据部分一起复制，可以通过如下两个API实现</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Mat F = A.clone(); 或 Mat G; A.copyTo(G);</span><br></pre></td></tr></table></figure></div><h6 id="四个要点"><a href="#四个要点" class="headerlink" title="四个要点"></a>四个要点</h6><ul><li>输出图像的内存是自动分配的</li><li>使用OpenCV的C++接口，不需要考虑内存分配问题</li><li>赋值操作和拷贝构造函数只会复制头部分</li><li>使用clone与copyTo两个函数实现数</li></ul><h6 id="Mat对象的创建"><a href="#Mat对象的创建" class="headerlink" title="Mat对象的创建"></a>Mat对象的创建</h6><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cv::Mat::Mat构造函数</span><br><span class="line"><span class="function">Mat <span class="title">M</span><span class="params">(<span class="number">2</span>,<span class="number">2</span>,CV_8UC3, Scalar(<span class="number">0</span>,<span class="number">0</span>,<span class="number">255</span>))</span></span></span><br><span class="line">其中前两个参数分别表示行(row)跟列(column)、第三个CV_8UC3中的8表示每个通道占8位、U表示无符号、C表示Char类型、3表示通道数目是3，</span><br><span class="line">第四个参数是向量表示初始化每个像素值是多少，向量长度对应通道数目一致</span><br><span class="line"></span><br><span class="line">创建多维数组cv::Mat::create</span><br><span class="line"> <span class="keyword">int</span> sz[<span class="number">3</span>] = &#123;<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>&#125;;     </span><br><span class="line"><span class="function">Mat  <span class="title">L</span><span class="params">(<span class="number">3</span>,sz, CV_8UC1, Scalar::all(<span class="number">0</span>))</span></span>;</span><br></pre></td></tr></table></figure></div><h6 id="定义小数组"><a href="#定义小数组" class="headerlink" title="定义小数组"></a>定义小数组</h6><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Mat C = (Mat_&lt;<span class="keyword">double</span>&gt;(<span class="number">3</span>,<span class="number">3</span>) &lt;&lt; <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">5</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></figure></div><h6 id="MATLAB风格写法"><a href="#MATLAB风格写法" class="headerlink" title="MATLAB风格写法"></a>MATLAB风格写法</h6><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">   Mat m2;</span><br><span class="line">m2 = Mat::zeros(<span class="number">2</span>, <span class="number">2</span>, CV_8UC1);</span><br><span class="line">imshow(<span class="string">"demo2"</span>, m2);</span><br></pre></td></tr></table></figure></div><h5 id="4、图像像素操作"><a href="#4、图像像素操作" class="headerlink" title="4、图像像素操作"></a>4、图像像素操作</h5><h6 id="读写像素"><a href="#读写像素" class="headerlink" title="读写像素"></a>读写像素</h6><ul><li>读一个GRAY像素点的像素值（CV_8UC1）</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Scalar intensity = img.at&lt;uchar&gt;(y, x); </span><br><span class="line">或者 Scalar intensity = img.at&lt;uchar&gt;(Point(x, y));</span><br></pre></td></tr></table></figure></div><ul><li>读一个RGB像素点的像素值</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Vec3f intensity = img.at&lt;Vec3f&gt;(y, x); </span><br><span class="line"><span class="keyword">float</span> blue = intensity.val[<span class="number">0</span>]; </span><br><span class="line"><span class="keyword">float</span> green = intensity.val[<span class="number">1</span>]; </span><br><span class="line"><span class="keyword">float</span> red = intensity.val[<span class="number">2</span>];</span><br></pre></td></tr></table></figure></div><h6 id="修改像素值"><a href="#修改像素值" class="headerlink" title="修改像素值"></a>修改像素值</h6><ul><li>灰度图像</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">img.at&lt;uchar&gt;(y, x) = <span class="number">128</span>;</span><br></pre></td></tr></table></figure></div><ul><li>RGB三通道图像<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">img.at&lt;Vec3b&gt;(y,x)[<span class="number">0</span>]=<span class="number">128</span>; <span class="comment">// blue</span></span><br><span class="line">img.at&lt;Vec3b&gt;(y,x)[<span class="number">1</span>]=<span class="number">128</span>; <span class="comment">// green</span></span><br><span class="line">img.at&lt;Vec3b&gt;(y,x)[<span class="number">2</span>]=<span class="number">128</span>; <span class="comment">// red</span></span><br></pre></td></tr></table></figure></div></li><li>空白图像赋值<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">img = Scalar(<span class="number">0</span>);</span><br></pre></td></tr></table></figure></div></li><li>ROI选择<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Rect <span class="title">r</span><span class="params">(<span class="number">10</span>, <span class="number">10</span>, <span class="number">100</span>, <span class="number">100</span>)</span></span>; </span><br><span class="line">Mat smallImg = img(r);</span><br></pre></td></tr></table></figure></div></li></ul><h6 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h6><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> ** argo)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">Mat src, gray_src;</span><br><span class="line">src = imread(<span class="string">"C:\\Users\\Administrator\\Pictures\\girl.jpg"</span>);</span><br><span class="line"><span class="keyword">if</span> (src.empty())</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt;<span class="string">" read img error!"</span>&lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">namedWindow(<span class="string">"src img"</span>, CV_WINDOW_AUTOSIZE);</span><br><span class="line">imshow(<span class="string">"src img"</span>, src);</span><br><span class="line"></span><br><span class="line">cvtColor(src, gray_src, CV_BGR2GRAY);</span><br><span class="line"><span class="comment">//namedWindow("gray_src img", CV_WINDOW_AUTOSIZE);</span></span><br><span class="line"><span class="comment">//imshow("gray_src img", gray_src);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> <span class="built_in">height</span> = gray_src.rows;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">width</span> = gray_src.cols;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> row =<span class="number">0</span>;row&lt;<span class="built_in">height</span>;row++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> col = <span class="number">0</span>;  col&lt; <span class="built_in">width</span>;col ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//获取像素值</span></span><br><span class="line"><span class="keyword">int</span> gray = gray_src.at&lt;uchar&gt;(row, col);</span><br><span class="line">gray_src.at&lt;uchar&gt;(row, col) = <span class="number">255</span> - gray;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">namedWindow(<span class="string">"gray_src_change img"</span>, CV_WINDOW_AUTOSIZE);</span><br><span class="line">imshow(<span class="string">"gray_src_change img"</span>, gray_src);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Mat操作</span></span><br><span class="line">Mat dst;</span><br><span class="line">dst.create(src.<span class="built_in">size</span>(), src.type());</span><br><span class="line"><span class="built_in">height</span> = src.rows;</span><br><span class="line"><span class="built_in">width</span> = src.cols;</span><br><span class="line"><span class="comment">//获取图片通道值</span></span><br><span class="line"><span class="keyword">int</span> nc = src.channels();</span><br><span class="line"></span><br><span class="line"><span class="comment">/*for (int row = 0; row &lt; height; row++)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">for (int col = 0; col &lt; width; col++)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">if (nc ==1)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">int gray = gray_src.at&lt;uchar&gt;(row, col);</span></span><br><span class="line"><span class="comment">gray_src.at&lt;uchar&gt;(row, col) = 255 - gray;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">else if(nc == 3)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">int b = src.at&lt;Vec3b&gt;(row, col)[0];</span></span><br><span class="line"><span class="comment">int g = src.at&lt;Vec3b&gt;(row, col)[1];</span></span><br><span class="line"><span class="comment">int r = src.at&lt;Vec3b&gt;(row, col)[2];</span></span><br><span class="line"><span class="comment">dst.at&lt;Vec3b&gt;(row, col)[0] = 255 - b;</span></span><br><span class="line"><span class="comment">dst.at&lt;Vec3b&gt;(row, col)[1] = 255 - g;</span></span><br><span class="line"><span class="comment">dst.at&lt;Vec3b&gt;(row, col)[2] = 255 - r; </span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//上面的转换代码可以替换,效果相同</span></span><br><span class="line">bitwise_not(src, dst);</span><br><span class="line">imshow(<span class="string">"gray_src_change_by_mat img"</span>, dst);</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"enter anything"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">waitKey(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h5 id="5、图像混合"><a href="#5、图像混合" class="headerlink" title="5、图像混合"></a>5、图像混合</h5><h6 id="理论-线性混合操作"><a href="#理论-线性混合操作" class="headerlink" title="理论-线性混合操作"></a>理论-线性混合操作</h6><p><a href="https://www.codecogs.com/eqnedit.php?latex=g\left&space;(&space;x&space;\right&space;)=\left&space;(&space;1-\alpha&space;\right&space;)f_{0}\left&space;(&space;x&space;\right&space;)&plus;\alpha&space;f_{1}\left&space;(&space;x&space;\right&space;)" target="_blank"><img title="g\left ( x \right )=\left ( 1-\alpha \right )f_{0}\left ( x \right )+\alpha f_{1}\left ( x \right )" data-src="https://latex.codecogs.com/gif.latex?g\left&space;(&space;x&space;\right&space;)=\left&space;(&space;1-\alpha&space;\right&space;)f_{0}\left&space;(&space;x&space;\right&space;)&plus;\alpha&space;f_{1}\left&space;(&space;x&space;\right&space;)" class="lazyload"></a></p><blockquote><p>其中a的取值范围为0~1之间</p></blockquote><h6 id="相关API-addWeighted"><a href="#相关API-addWeighted" class="headerlink" title="相关API (addWeighted)"></a>相关API (addWeighted)</h6><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addWeighted</span><span class="params">(InputArray src1, </span></span></span><br><span class="line"><span class="function"><span class="params">                    <span class="keyword">double</span> alpha, </span></span></span><br><span class="line"><span class="function"><span class="params">                    InputArray src2,</span></span></span><br><span class="line"><span class="function"><span class="params">                    <span class="keyword">double</span> beta, </span></span></span><br><span class="line"><span class="function"><span class="params">                    <span class="keyword">double</span> gamma, </span></span></span><br><span class="line"><span class="function"><span class="params">                    OutputArray dst, </span></span></span><br><span class="line"><span class="function"><span class="params">                    <span class="keyword">int</span> dtype = <span class="number">-1</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">参数<span class="number">1</span>：输入图像Mat – src1</span><br><span class="line">参数<span class="number">2</span>：输入图像src1的alpha值</span><br><span class="line">参数<span class="number">3</span>：输入图像Mat – src2</span><br><span class="line">参数<span class="number">4</span>：输入图像src2的alpha值</span><br><span class="line">参数<span class="number">5</span>：gamma值</span><br><span class="line">参数<span class="number">6</span>：输出混合图像</span><br><span class="line"></span><br><span class="line">注意点：两张图像的大小和类型必须一致才可以</span><br></pre></td></tr></table></figure></div><h6 id="示例代码-1"><a href="#示例代码-1" class="headerlink" title="示例代码"></a>示例代码</h6><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置权重</span></span><br><span class="line"><span class="keyword">double</span> alpha = <span class="number">0.5</span>;</span><br><span class="line"><span class="keyword">if</span> (src1.rows==src2.rows &amp;&amp; src1.cols==src2.cols &amp;&amp; src1.type() == src2.type())</span><br><span class="line">&#123;</span><br><span class="line">addWeighted(src1, alpha, src2, (<span class="number">1.0</span> - alpha), <span class="number">0.0</span>, dst);</span><br><span class="line"><span class="comment">//multiply(src1, src2, dst, 1.0); 图像相乘</span></span><br><span class="line">imshow(<span class="string">"dst"</span>, dst);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h5 id="6、调整图像亮度与对比度"><a href="#6、调整图像亮度与对比度" class="headerlink" title="6、调整图像亮度与对比度"></a>6、调整图像亮度与对比度</h5><ul><li>图像变换可以看作如下：<ul><li>像素变换 – 点操作</li><li>邻域操作 – 区域</li></ul></li><li>调整图像亮度和对比度属于像素变换-点操作</li></ul><p><a href="https://www.codecogs.com/eqnedit.php?latex=g\left&space;(&space;i,j\right&space;)=\alpha&space;f\left&space;(&space;i,j&space;\right&space;)&plus;\beta" target="_blank"><img title="g\left ( i,j\right )=\alpha f\left ( i,j \right )+\beta" data-src="https://latex.codecogs.com/gif.latex?g\left&space;(&space;i,j\right&space;)=\alpha&space;f\left&space;(&space;i,j&space;\right&space;)&plus;\beta" class="lazyload"></a></p><h6 id="重要的API"><a href="#重要的API" class="headerlink" title="重要的API"></a>重要的API</h6><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Mat new_image = Mat::zeros( <span class="built_in">image</span>.<span class="built_in">size</span>(), <span class="built_in">image</span>.type() );  创建一张跟原图像大小和类型一致的空白图像、像素值初始化为<span class="number">0</span></span><br><span class="line"></span><br><span class="line">saturate_cast&lt;uchar&gt;(value)确保值大小范围为<span class="number">0</span>~<span class="number">255</span>之间</span><br><span class="line"></span><br><span class="line">Mat.at&lt;Vec3b&gt;(y,x)[index]=value 给每个像素点每个通道赋值</span><br></pre></td></tr></table></figure></div><h6 id="示例代码-2"><a href="#示例代码-2" class="headerlink" title="示例代码"></a>示例代码</h6><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> <span class="built_in">height</span> = src1.rows; <span class="comment">//高度</span></span><br><span class="line"><span class="keyword">int</span> <span class="built_in">width</span> = src1.cols; <span class="comment">//宽度</span></span><br><span class="line"><span class="keyword">double</span> alpha = <span class="number">0.8</span>; </span><br><span class="line"><span class="keyword">int</span> beta = <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//生成一个空的大小和src1一样大的图</span></span><br><span class="line">output = Mat::zeros(src1.<span class="built_in">size</span>(), src1.type());</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> row = <span class="number">0</span>; row &lt; <span class="built_in">height</span>; row++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> col = <span class="number">0</span>; col &lt; <span class="built_in">width</span>; col++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (src1.channels()==<span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//像素点变换，换值,达到调整亮度和对比度的效果</span></span><br><span class="line"><span class="keyword">float</span> b = src1.at&lt;Vec3b&gt;(row, col)[<span class="number">0</span>]; <span class="comment">//blue</span></span><br><span class="line"><span class="keyword">float</span> g = src1.at&lt;Vec3b&gt;(row, col)[<span class="number">1</span>]; <span class="comment">//green</span></span><br><span class="line"><span class="keyword">float</span> r = src1.at&lt;Vec3b&gt;(row, col)[<span class="number">2</span>]; <span class="comment">//red</span></span><br><span class="line"></span><br><span class="line">output.at&lt;Vec3b&gt;(row, col)[<span class="number">0</span>] = saturate_cast&lt;uchar&gt;(alpha*b + beta);</span><br><span class="line">output.at&lt;Vec3b&gt;(row, col)[<span class="number">1</span>] = saturate_cast&lt;uchar&gt;(alpha*g + beta);</span><br><span class="line">output.at&lt;Vec3b&gt;(row, col)[<span class="number">2</span>] = saturate_cast&lt;uchar&gt;(alpha*r + beta);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(src1.channels()==<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">output.at&lt;uchar&gt;(row, col) = saturate_cast&lt;uchar&gt;(alpha*src1.at&lt;uchar&gt;(row, col)+ beta);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h5 id="7、绘制形状与文字"><a href="#7、绘制形状与文字" class="headerlink" title="7、绘制形状与文字"></a>7、绘制形状与文字</h5><h6 id="使用cv-Point与cv-Scalar"><a href="#使用cv-Point与cv-Scalar" class="headerlink" title="使用cv::Point与cv::Scalar"></a>使用cv::Point与cv::Scalar</h6><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Point表示<span class="number">2</span>D平面上一个点x,y</span><br><span class="line">Point p;</span><br><span class="line">p.x = <span class="number">10</span>;</span><br><span class="line">p.y = <span class="number">8</span>;</span><br><span class="line"> <span class="keyword">or</span></span><br><span class="line">p = Pont(<span class="number">10</span>,<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">Scalar表示四个元素的向量</span><br><span class="line">Scalar(a, b, c);<span class="comment">// a = blue, b = green, c = red表示RGB三个通道</span></span><br></pre></td></tr></table></figure></div><h6 id="绘制线、矩形、园、椭圆等基本几何形状"><a href="#绘制线、矩形、园、椭圆等基本几何形状" class="headerlink" title="绘制线、矩形、园、椭圆等基本几何形状"></a>绘制线、矩形、园、椭圆等基本几何形状</h6><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">画线 cv::line （LINE_4\LINE_8\LINE_AA）</span><br><span class="line">画椭圆cv::ellipse</span><br><span class="line">画矩形cv::rectangle</span><br><span class="line">画圆cv::circle</span><br><span class="line">画填充cv::fillPoly</span><br></pre></td></tr></table></figure></div><p>==示例代码==</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;opencv2\opencv.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line">Mat bgImage;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Myline</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MyRectangle</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MyEllipse</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MyCircle</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MyPolygon</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">bgImage = imread(<span class="string">"C:\\Users\\Administrator\\Pictures\\girl2.jpg"</span>);</span><br><span class="line"><span class="keyword">if</span> (!bgImage.data)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Myline();</span><br><span class="line">MyRectangle();</span><br><span class="line">MyEllipse();</span><br><span class="line">MyCircle();</span><br><span class="line">MyPolygon();</span><br><span class="line"></span><br><span class="line">imshow(<span class="string">"bgImage"</span>, bgImage);</span><br><span class="line"></span><br><span class="line">waitKey(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//画线</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Myline</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Point p1 = Point(<span class="number">20</span>, <span class="number">30</span>);</span><br><span class="line">Point p2;</span><br><span class="line"></span><br><span class="line">p2.x = <span class="number">300</span>;</span><br><span class="line">p2.y = <span class="number">300</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置颜色</span></span><br><span class="line">Scalar color = Scalar(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>);</span><br><span class="line"><span class="built_in">line</span>(bgImage, p1, p2, color, <span class="number">1</span>, LINE_8);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//画矩形</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MyRectangle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Rect <span class="built_in">rect</span> = Rect(<span class="number">150</span>, <span class="number">500</span>, <span class="number">300</span>, <span class="number">300</span>);</span><br><span class="line">Scalar color = Scalar(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">rectangle(bgImage, <span class="built_in">rect</span>, color, <span class="number">2</span>, LINE_8);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//绘制椭圆</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MyEllipse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Scalar color = Scalar(<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>);</span><br><span class="line">ellipse(bgImage, </span><br><span class="line">Point(bgImage.cols / <span class="number">2</span>, bgImage.rows / <span class="number">2</span>), </span><br><span class="line">Size(bgImage.cols / <span class="number">4</span>, bgImage.rows / <span class="number">8</span>),</span><br><span class="line"><span class="number">90</span>,<span class="number">0</span>,<span class="number">360</span>,color,<span class="number">2</span>,LINE_8);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//绘制圆</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MyCircle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Scalar color = Scalar(<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>);</span><br><span class="line">Point center = Point(bgImage.cols / <span class="number">2</span>, bgImage.rows / <span class="number">2</span>);</span><br><span class="line"><span class="built_in">circle</span>(bgImage, center, <span class="number">150</span>, color, <span class="number">2</span>, LINE_8);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//绘制多边形</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MyPolygon</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Point pts[<span class="number">1</span>][<span class="number">5</span>];</span><br><span class="line">pts[<span class="number">0</span>][<span class="number">0</span>] = Point(<span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line">pts[<span class="number">0</span>][<span class="number">1</span>] = Point(<span class="number">100</span>, <span class="number">200</span>);</span><br><span class="line">pts[<span class="number">0</span>][<span class="number">2</span>] = Point(<span class="number">200</span>, <span class="number">200</span>);</span><br><span class="line">pts[<span class="number">0</span>][<span class="number">3</span>] = Point(<span class="number">200</span>, <span class="number">100</span>);</span><br><span class="line">pts[<span class="number">0</span>][<span class="number">4</span>] = Point(<span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Point* ppts[] = &#123;pts[<span class="number">0</span>]&#125;;</span><br><span class="line"><span class="keyword">int</span> npt[] = &#123; <span class="number">5</span> &#125;;</span><br><span class="line">Scalar color = Scalar(<span class="number">255</span>, <span class="number">140</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">fillPoly(bgImage, ppts, npt, <span class="number">1</span>, color, LINE_8);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h6 id="随机数生成cv-RNG"><a href="#随机数生成cv-RNG" class="headerlink" title="随机数生成cv::RNG"></a>随机数生成cv::RNG</h6><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">生成高斯随机数gaussian (double sigma)</span><br><span class="line">生成正态分布随机数uniform (int a, int b)</span><br></pre></td></tr></table></figure></div><p>==随机画线代码==</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RandomLineDemo</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="function">RNG <span class="title">rng</span><span class="params">(<span class="number">12345</span>)</span></span>;</span><br><span class="line">Point pt1, pt2;</span><br><span class="line">Mat new_img = Mat::zeros(bgImage.<span class="built_in">size</span>(), bgImage.type());</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//随机生成的两个端点</span></span><br><span class="line">pt1.x = rng.uniform(<span class="number">0</span>, bgImage.cols);</span><br><span class="line">pt2.x = rng.uniform(<span class="number">0</span>, bgImage.cols);</span><br><span class="line">pt1.y = rng.uniform(<span class="number">0</span>, bgImage.rows);</span><br><span class="line">pt2.y = rng.uniform(<span class="number">0</span>, bgImage.rows);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> num = rng.uniform(<span class="number">0</span>, <span class="number">255</span>);</span><br><span class="line"><span class="built_in">line</span>(new_img, pt1, pt2, CV_RGB(rng.uniform(<span class="number">0</span>, <span class="number">255</span>), rng.uniform(<span class="number">0</span>, <span class="number">255</span>), rng.uniform(<span class="number">0</span>, <span class="number">255</span>)), <span class="number">1</span>, LINE_8);</span><br><span class="line"></span><br><span class="line"><span class="comment">//延迟50ms</span></span><br><span class="line"><span class="keyword">if</span> (waitKey(<span class="number">50</span>)&gt;<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">imshow(<span class="string">"随机生成图片"</span>, new_img);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h6 id="绘制添加文字"><a href="#绘制添加文字" class="headerlink" title="绘制添加文字"></a>绘制添加文字</h6><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">putText函数 中设置fontFace(cv::HersheyFonts), </span><br><span class="line"></span><br><span class="line">putText(bgImage, <span class="string">"Hello World"</span>, Point(<span class="number">300</span>, <span class="number">300</span>), CV_FONT_BLACK, <span class="number">1.0</span>, CV_RGB(<span class="number">255</span>, <span class="number">69</span>, <span class="number">0</span>), <span class="number">1</span>, LINE_8);</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> 计算机视觉 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenCV </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端模块化开发--React框架（四）：高级应用（redux）</title>
      <link href="/2019/05/17/%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96%E5%BC%80%E5%8F%91-React%E6%A1%86%E6%9E%B6%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9A%E9%AB%98%E7%BA%A7%E5%BA%94%E7%94%A8%EF%BC%88redux%EF%BC%89/"/>
      <url>/2019/05/17/%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96%E5%BC%80%E5%8F%91-React%E6%A1%86%E6%9E%B6%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9A%E9%AB%98%E7%BA%A7%E5%BA%94%E7%94%A8%EF%BC%88redux%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><a href="https://github.com/MiChongGET/react-redux" target="_blank" rel="noopener">代码地址</a></p><h6 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h6><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save redux</span><br></pre></td></tr></table></figure></div><h4 id="一、-redux要点"><a href="#一、-redux要点" class="headerlink" title="一、 redux要点"></a>一、 redux要点</h4><pre><code>1. redux理解2. redux相关API3. redux核心概念(3个)4. redux工作流程5. 使用redux及相关库编码</code></pre><h5 id="1-redux理解"><a href="#1-redux理解" class="headerlink" title="1. redux理解"></a>1. redux理解</h5><pre><code>什么?: redux是专门做状态管理的独立第3方库, 不是react插件作用?: 对应用中状态进行集中式的管理(写/读)开发: 与react-redux, redux-thunk等插件配合使用</code></pre><h4 id="二、redux相关API"><a href="#二、redux相关API" class="headerlink" title="二、redux相关API"></a>二、redux相关API</h4><blockquote><pre><code>redux中包含: createStore(), applyMiddleware(), combineReducers()</code></pre></blockquote><blockquote><pre><code>store对象: getState(), dispatch(), subscribe()react-redux: &lt;Provider&gt;, connect()()</code></pre></blockquote><h5 id="1、-createStore"><a href="#1、-createStore" class="headerlink" title="1、 createStore()"></a>1、 createStore()</h5><ul><li>1) 作用: <blockquote><p>创建包含指定reducer的store对象</p></blockquote></li><li>2) 编码:</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createStore&#125; <span class="keyword">from</span> <span class="string">'redux'</span></span><br><span class="line"><span class="keyword">import</span> counter <span class="keyword">from</span> <span class="string">'./reducers/counter'</span></span><br><span class="line"><span class="keyword">const</span> store = createStore(counter)</span><br></pre></td></tr></table></figure></div><h5 id="2、store对象"><a href="#2、store对象" class="headerlink" title="2、store对象"></a>2、store对象</h5><ul><li>1)作用:<br>redux库最核心的管理对象</li><li>2)它内部维护着:<br> <code>state</code><pre><code>`reducer`</code></pre></li><li>3)核心方法:</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">      getState()</span><br><span class="line">dispatch(action)</span><br><span class="line">subscribe(listener)</span><br></pre></td></tr></table></figure></div><ul><li>4)编码:</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">      store.getState()</span><br><span class="line">store.dispatch(&#123;<span class="attr">type</span>:<span class="string">'INCREMENT'</span>, number&#125;)</span><br><span class="line">store.subscribe(render)</span><br></pre></td></tr></table></figure></div><h5 id="3、applyMiddleware"><a href="#3、applyMiddleware" class="headerlink" title="3、applyMiddleware()"></a>3、applyMiddleware()</h5><ul><li>1)作用:<br><code>应用上基于redux的中间件(插件库)</code></li><li>2)编码:</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createStore, applyMiddleware&#125; <span class="keyword">from</span> <span class="string">'redux'</span></span><br><span class="line"><span class="keyword">import</span> thunk <span class="keyword">from</span> <span class="string">'redux-thunk'</span>  <span class="comment">// redux异步中间件</span></span><br><span class="line"><span class="keyword">const</span> store = createStore(</span><br><span class="line">  counter,</span><br><span class="line">  applyMiddleware(thunk) <span class="comment">// 应用上异步中间件</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></div><h5 id="4、combineReducers"><a href="#4、combineReducers" class="headerlink" title="4、combineReducers()"></a>4、combineReducers()</h5><ul><li>1)作用:<br><code>合并多个reducer函数</code></li><li>2)编码:</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> combineReducers(&#123;</span><br><span class="line">  user,</span><br><span class="line">  chatUser,</span><br><span class="line">  chat</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><h4 id="三、redux核心概念-3个"><a href="#三、redux核心概念-3个" class="headerlink" title="三、redux核心概念(3个)"></a>三、redux核心概念(3个)</h4><pre><code>action:     默认是对象(同步action), {type: &apos;xxx&apos;, data: value}, 需要通过对应的actionCreator产生,     它的值也可以是函数(异步action), 需要引入redux-thunk才可以reducer    根据老的state和指定的action, 返回一个新的state    不能修改老的statestore    redux最核心的管理对象    内部管理着: state和reducer    提供方法: getState(), dispatch(action), subscribe(listener)</code></pre><h5 id="1、action"><a href="#1、action" class="headerlink" title="1、action:"></a>1、action:</h5><ul><li>1)标识要执行行为的对象</li><li>2)包含2个方面的属性</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a.type: 标识属性, 值为字符串, 唯一, 必要属性</span><br><span class="line">b.xxx: 数据属性, 值类型任意, 可选属性</span><br></pre></td></tr></table></figure></div><ul><li>3)例子:</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">      <span class="keyword">const</span> action = &#123;</span><br><span class="line">type: <span class="string">'INCREMENT'</span>,</span><br><span class="line">data: <span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ul><li>4)Action Creator(创建Action的工厂函数)<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> increment = <span class="function">(<span class="params">number</span>) =&gt;</span> (&#123;<span class="attr">type</span>: <span class="string">'INCREMENT'</span>, <span class="attr">data</span>: number&#125;)</span><br></pre></td></tr></table></figure></div></li></ul><h5 id="2、reducer"><a href="#2、reducer" class="headerlink" title="2、reducer"></a>2、reducer</h5><ul><li>1)根据老的state和action, 产生新的state的纯函数</li><li>2)样例</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">counter</span>(<span class="params">state = <span class="number">0</span>, action</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'INCREMENT'</span>:</span><br><span class="line">      <span class="keyword">return</span> state + action.data</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'DECREMENT'</span>:</span><br><span class="line">      <span class="keyword">return</span> state - action.data</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ul><li>3)注意</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a.返回一个新的状态</span><br><span class="line">b.不要修改原来的状态</span><br></pre></td></tr></table></figure></div><h5 id="4、store"><a href="#4、store" class="headerlink" title="4、store"></a>4、store</h5><ul><li>1)将state,action与reducer联系在一起的对象</li><li>2)如何得到此对象?</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">      <span class="keyword">import</span> &#123;createStore&#125; <span class="keyword">from</span> <span class="string">'redux'</span></span><br><span class="line"><span class="keyword">import</span> reducer <span class="keyword">from</span> <span class="string">'./reducers'</span></span><br><span class="line"><span class="keyword">const</span> store = createStore(reducer)</span><br></pre></td></tr></table></figure></div><ul><li>3)此对象的功能?</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">      getState(): 得到state</span><br><span class="line">dispatch(action): 分发action, 触发reducer调用, 产生新的state</span><br><span class="line">subscribe(listener): 注册监听, 当产生了新的state时, 自动调用</span><br></pre></td></tr></table></figure></div><h4 id="四、redux工作流程"><a href="#四、redux工作流程" class="headerlink" title="四、redux工作流程"></a>四、redux工作流程</h4><p><a href="http://www.ruanyifeng.com/blogimg/asset/2016/bg2016091802.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="http://www.ruanyifeng.com/blogimg/asset/2016/bg2016091802.jpg" class="lazyload"></a><br><a href="D:%5CFile%5CGitFile%5CMiChongGET.github.io%5Csource_posts%5C2R5G8bG.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="D:%5CFile%5CGitFile%5CMiChongGET.github.io%5Csource_posts%5C2R5G8bG.png" class="lazyload"></a></p><h4 id="五、-使用redux及相关库编码"><a href="#五、-使用redux及相关库编码" class="headerlink" title="五、 使用redux及相关库编码"></a>五、 使用redux及相关库编码</h4><pre><code>需要引入的库:     redux    react-redux    redux-thunk    redux-devtools-extension(这个只在开发时需要)redux文件夹:     action-types.js    actions.js    reducers.js    store.js组件分2类:     ui组件(components): 不使用redux相关PAI    容器组件(containers): 使用redux相关API</code></pre><h5 id="1、-react-redux"><a href="#1、-react-redux" class="headerlink" title="1、 react-redux"></a>1、 react-redux</h5><h6 id="下载依赖包"><a href="#下载依赖包" class="headerlink" title="下载依赖包"></a>下载依赖包</h6><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save react-redux</span><br></pre></td></tr></table></figure></div><h6 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h6><ul><li>1)一个react插件库</li><li>2)专门用来简化react应用中使用redux</li></ul><h6 id="React-Redux将所有组件分成两大类"><a href="#React-Redux将所有组件分成两大类" class="headerlink" title="React-Redux将所有组件分成两大类"></a>React-Redux将所有组件分成两大类</h6><ul><li>1)UI组件</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a.只负责 UI 的呈现，不带有任何业务逻辑</span><br><span class="line">b.通过props接收数据(一般数据和函数)</span><br><span class="line">c.不使用任何 Redux 的 API</span><br><span class="line">d.一般保存在components文件夹下</span><br></pre></td></tr></table></figure></div><ul><li>2)容器组件</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a.负责管理数据和业务逻辑，不负责UI的呈现</span><br><span class="line">b.使用 Redux 的 API</span><br><span class="line">c.一般保存在containers文件夹下</span><br></pre></td></tr></table></figure></div><h6 id="相关API"><a href="#相关API" class="headerlink" title="相关API"></a>相关API</h6><ul><li>1)Provider<br>  让所有组件都可以得到state数据</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;Provider store=&#123;store&#125;&gt;</span><br><span class="line">&lt;App /&gt;</span><br><span class="line">&lt;<span class="regexp">/Provider&gt;</span></span><br></pre></td></tr></table></figure></div><ul><li>2)connect()<br>  用于包装 UI 组件生成容器组件</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span></span><br><span class="line">      connect(</span><br><span class="line">        mapStateToprops,</span><br><span class="line">        mapDispatchToProps</span><br><span class="line">      )(Counter)</span><br></pre></td></tr></table></figure></div><ul><li><p>3)mapStateToprops()<br>  将外部的数据（即state对象）转换为UI组件的标签属性</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mapStateToprops = <span class="function"><span class="keyword">function</span> (<span class="params">state</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> &#123;</span><br><span class="line">     value: state</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div></li><li><p>4)mapDispatchToProps()</p><pre><code>将分发action的函数转换为UI组件的标签属性简洁语法可以直接指定为actions对象或包含多个action方法的对象</code></pre></li></ul><h5 id="2、redux异步编程"><a href="#2、redux异步编程" class="headerlink" title="2、redux异步编程"></a>2、redux异步编程</h5><h6 id="下载redux插件-异步中间件"><a href="#下载redux插件-异步中间件" class="headerlink" title="下载redux插件(异步中间件)"></a>下载redux插件(异步中间件)</h6><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save redux-thunk</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> ES6 </tag>
            
            <tag> React </tag>
            
            <tag> redux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端模块化开发--React框架（三）：应用进阶（react-router4&amp;&amp;antd框架）</title>
      <link href="/2019/05/16/%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96%E5%BC%80%E5%8F%91-React%E6%A1%86%E6%9E%B6%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E5%BA%94%E7%94%A8%E8%BF%9B%E9%98%B6%EF%BC%88react-router4-antd%E6%A1%86%E6%9E%B6%EF%BC%89/"/>
      <url>/2019/05/16/%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96%E5%BC%80%E5%8F%91-React%E6%A1%86%E6%9E%B6%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E5%BA%94%E7%94%A8%E8%BF%9B%E9%98%B6%EF%BC%88react-router4-antd%E6%A1%86%E6%9E%B6%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><a href="https://github.com/MiChongGET/react-router" target="_blank" rel="noopener">GitHub地址</a></p><h4 id="一、react-router4"><a href="#一、react-router4" class="headerlink" title="一、react-router4"></a>一、react-router4</h4><h5 id="1、react-router4理解"><a href="#1、react-router4理解" class="headerlink" title="1、react-router4理解"></a>1、react-router4理解</h5><ul><li>1)    react的一个插件库</li><li>2)    专门用来实现一个SPA应用</li><li>3)    基于react的项目基本都会用到此库</li></ul><h5 id="2、SPA的理解"><a href="#2、SPA的理解" class="headerlink" title="2、SPA的理解"></a>2、SPA的理解</h5><ul><li>1)   单页Web应用（single page web application，SPA</li><li>2)    整个应用只有一个完整的页面</li><li>3)    点击页面中的链接不会刷新页面, 本身也不会向服务器发请求</li><li>4)    当点击路由链接时, 只会做页面的局部更新</li><li>5)    数据都需要通过ajax请求获取, 并在前端异步展现</li></ul><h5 id="3、路由的理解"><a href="#3、路由的理解" class="headerlink" title="3、路由的理解"></a>3、路由的理解</h5><ul><li>1) 什么是路由?</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- a.一个路由就是一个映射关系(key:value)</span><br><span class="line">- b.key为路由路径, value可能是function&#x2F;component</span><br></pre></td></tr></table></figure></div><ul><li>2) 路由分类</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- a.后台路由: node服务器端路由, value是function, 用来处理客户端提交的请求并返回一个响应数据</span><br><span class="line">- b.前台路由: 浏览器端路由, value是component, 当请求的是路由path时, 浏览器端前没有发送http请求, 但界面会更新显示对应的组件</span><br></pre></td></tr></table></figure></div><ul><li>3) 后台路由</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- a.注册路由: router.get(path, function(req, res))</span><br><span class="line">- b.当node接收到一个请求时, 根据请求路径找到匹配的路由, 调用路由中的函数来处理请求, 返回响应数据</span><br></pre></td></tr></table></figure></div><ul><li>4)    前端路由</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- a.注册路由: &lt;Route path&#x3D;&quot;&#x2F;about&quot; component&#x3D;&#123;About&#125;&gt;</span><br><span class="line">- b.当浏览器的hash变为#about时, 当前路由组件就会变为About组件</span><br></pre></td></tr></table></figure></div><h5 id="4、前端路由"><a href="#4、前端路由" class="headerlink" title="4、前端路由"></a>4、前端路由</h5><h6 id="history库"><a href="#history库" class="headerlink" title="history库"></a>history库</h6><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a.网址: https:&#x2F;&#x2F;github.com&#x2F;ReactTraining&#x2F;history</span><br><span class="line">b.管理浏览器会话历史(history)的工具库</span><br><span class="line">c.包装的是原生BOM中window.history和window.location.hash</span><br></pre></td></tr></table></figure></div><p>代码</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>history test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/test1"</span> <span class="attr">onclick</span>=<span class="string">"return push('/test1')"</span>&gt;</span>test1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">"push('/test2')"</span>&gt;</span>push test2<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">"back()"</span>&gt;</span>回退<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">"forword()"</span>&gt;</span>前进<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">"replace('/test3')"</span>&gt;</span>replace test3<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/history/4.7.2/history.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> history = History.createBrowserHistory() <span class="comment">// 方式一、a.得到封装window.history的管理对象</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// history = History.createHashHistory() // 方式二、得到封装window.location.hash的管理对象</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// console.log(history)</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">push</span> <span class="params">(to)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">//添加一个新的历史记录</span></span></span><br><span class="line">      history.push(to)</span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span> <span class="literal">false</span></span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">back</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">//回退到上一个历史记录</span></span></span><br><span class="line">      history.goBack()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">forword</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">//前进到下一个历史记录</span></span></span><br><span class="line">      history.goForward()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">replace</span> <span class="params">(to)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">//用一个新的历史记录替换当前的记录</span></span></span><br><span class="line">      history.replace(to)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">//监视历史记录的变化</span></span></span><br><span class="line"><span class="javascript">    history.listen(<span class="function">(<span class="params">location</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">'请求路由路径变化了'</span>, location)</span></span><br><span class="line">    &#125;)</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div><h5 id="5、react-router相关API"><a href="#5、react-router相关API" class="headerlink" title="5、react-router相关API"></a>5、react-router相关API</h5><h6 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h6><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">1)&lt;BrowserRouter&gt;</span><br><span class="line">2)&lt;HashRouter&gt;</span><br><span class="line">3)&lt;Route&gt;</span><br><span class="line">4)&lt;Redirect&gt;</span><br><span class="line">5)&lt;Link&gt;</span><br><span class="line">6)&lt;NavLink&gt;</span><br><span class="line">7)&lt;Switch&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;其它</span><br><span class="line">1)history对象</span><br><span class="line">2)match对象</span><br><span class="line">3)withRouter函数</span><br></pre></td></tr></table></figure></div><h5 id="6、使用"><a href="#6、使用" class="headerlink" title="6、使用"></a>6、使用</h5><h6 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h6><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;下载版本4的，如果不指定会下载最新的5版本</span><br><span class="line">npm install --save react-router-dom@4</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">render() &#123;</span><br><span class="line">        <span class="keyword">return</span>(</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;h2&gt;home router component&lt;<span class="regexp">/h2&gt;</span></span><br><span class="line"><span class="regexp">                &lt;div&gt;</span></span><br><span class="line"><span class="regexp">                    &lt;ul className='nav nav-tabs'&gt;</span></span><br><span class="line"><span class="regexp">                        &lt;li&gt;</span></span><br><span class="line"><span class="regexp">                            &lt;MyNavLink to='/</span>home/news<span class="string">'&gt;News&lt;/MyNavLink&gt;</span></span><br><span class="line"><span class="string">                        &lt;/li&gt;</span></span><br><span class="line"><span class="string">                        &lt;li&gt;</span></span><br><span class="line"><span class="string">                            &lt;MyNavLink to='</span>/home/message<span class="string">'&gt;Message&lt;/MyNavLink&gt;</span></span><br><span class="line"><span class="string">                        &lt;/li&gt;</span></span><br><span class="line"><span class="string">                    &lt;/ul&gt;</span></span><br><span class="line"><span class="string">                    &lt;div&gt;</span></span><br><span class="line"><span class="string">                        &lt;Switch&gt;</span></span><br><span class="line"><span class="string">                            &lt;Route path='</span>/home/news<span class="string">' component=&#123;News&#125;/&gt;</span></span><br><span class="line"><span class="string">                            &lt;Route path='</span>/home/message<span class="string">' component=&#123;Message&#125;/&gt;</span></span><br><span class="line"><span class="string">                            &lt;Redirect to='</span>/home/news<span class="string">'/&gt;</span></span><br><span class="line"><span class="string">                        &lt;/Switch&gt;</span></span><br><span class="line"><span class="string">                    &lt;/div&gt;</span></span><br><span class="line"><span class="string">                &lt;/div&gt;</span></span><br><span class="line"><span class="string">            &lt;/div&gt;</span></span><br><span class="line"><span class="string">        )</span></span><br></pre></td></tr></table></figure></div><h5 id="7、向路由组件传递数据"><a href="#7、向路由组件传递数据" class="headerlink" title="7、向路由组件传递数据"></a>7、向路由组件传递数据</h5><h6 id="路由设置"><a href="#路由设置" class="headerlink" title="路由设置"></a>路由设置</h6><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>.state.messages.map(<span class="function">(<span class="params">message, index</span>) =&gt;</span> (</span><br><span class="line">                &lt;li key=&#123;index&#125;&gt;</span><br><span class="line">                    &#123;<span class="comment">/*&lt;a href=&#123;`/home/message/detail/$&#123;message.id&#125;`&#125;&gt;&#123;message.title&#125;&lt;/a&gt;*/</span>&#125;</span><br><span class="line">                    &lt;MyNavLink to=&#123;<span class="string">`/home/message/detail/<span class="subst">$&#123;message.id&#125;</span>`</span>&#125;&gt;&#123;message.title&#125;&lt;<span class="regexp">/MyNavLink&gt;</span></span><br><span class="line"><span class="regexp">                    &amp;nbsp;&amp;nbsp;</span></span><br><span class="line"><span class="regexp">                    &lt;button className='btn btn-info' onClick=&#123;() =&gt; this.showDetailByPush(message.id)&#125;&gt;查看&lt;/</span>button&gt;</span><br><span class="line">                    &amp;nbsp;&amp;nbsp;</span><br><span class="line">                    &lt;button className=<span class="string">'btn btn-danger'</span> onClick=&#123;() =&gt; <span class="keyword">this</span>.showDetailByReplace(message.id)&#125;&gt;查看&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">                &lt;/</span>li&gt;</span><br><span class="line">            ))</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">    &lt;Route path='/</span>home/message/detail/:id<span class="string">' component=&#123;MsgDetail&#125;/&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br></pre></td></tr></table></figure></div><h6 id="接收数据"><a href="#接收数据" class="headerlink" title="接收数据"></a>接收数据</h6><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">render() &#123;</span><br><span class="line">       <span class="comment">//获取上面id的数值</span></span><br><span class="line">       <span class="keyword">const</span> &#123;id&#125; = <span class="keyword">this</span>.props.match.params</span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">'id:'</span> + id)</span><br><span class="line">       <span class="keyword">const</span> message = <span class="keyword">this</span>.state.msg_detail.find(<span class="function">(<span class="params">m</span>) =&gt;</span> m.id === id * <span class="number">1</span>)</span><br><span class="line">       <span class="built_in">console</span>.log(message)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> (</span><br><span class="line">           &lt;div&gt;</span><br><span class="line">               &lt;ul&gt;</span><br><span class="line">                   &lt;li&gt;ID:&#123;message.id&#125;&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">                   &lt;li&gt;TITLE:&#123;message.title&#125;&lt;/</span>li&gt;</span><br><span class="line">                   &lt;li&gt;CONTENT:&#123;message.content&#125;&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">               &lt;/u</span>l&gt;</span><br><span class="line"></span><br><span class="line">           &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">       )</span></span><br><span class="line"><span class="regexp">   &#125;</span></span><br></pre></td></tr></table></figure></div><h5 id="8、props里面的几个方法"><a href="#8、props里面的几个方法" class="headerlink" title="8、props里面的几个方法"></a>8、props里面的几个方法</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">showDetailByPush = <span class="function">(<span class="params">id</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//在原来的基础上添加</span></span><br><span class="line">    <span class="keyword">this</span>.props.history.push(<span class="string">`/home/message/detail/<span class="subst">$&#123;id&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br><span class="line">showDetailByReplace = <span class="function">(<span class="params">id</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//删除原来的之后再添加</span></span><br><span class="line">    <span class="keyword">this</span>.props.history.replace(<span class="string">`/home/message/detail/<span class="subst">$&#123;id&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">back = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//返回</span></span><br><span class="line">    <span class="keyword">this</span>.props.history.goBack()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">forward = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//前进，下一个</span></span><br><span class="line">    <span class="keyword">this</span>.props.history.goForward()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h4 id="二、ant-design前端UI框架"><a href="#二、ant-design前端UI框架" class="headerlink" title="二、ant design前端UI框架"></a>二、ant design前端UI框架</h4><p><a href="https://gw.alipayobjects.com/zos/rmsportal/KDpgvguMpGfqaHPjicRK.svg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://gw.alipayobjects.com/zos/rmsportal/KDpgvguMpGfqaHPjicRK.svg" class="lazyload"></a></p><h6 id="官网地址"><a href="#官网地址" class="headerlink" title="官网地址"></a>官网地址</h6><blockquote><p>蚂蚁金服的前端UI框架，基于react实现的，详情看官方文档</p></blockquote><p><a href="https://ant.design/index-cn" target="_blank" rel="noopener">https://ant.design/index-cn</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> ES6 </tag>
            
            <tag> React </tag>
            
            <tag> react-router4 </tag>
            
            <tag> antd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端模块化开发--React框架（二）：脚手架&amp;&amp;网络请求框架</title>
      <link href="/2019/05/14/%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96%E5%BC%80%E5%8F%91-React%E6%A1%86%E6%9E%B6%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E8%84%9A%E6%89%8B%E6%9E%B6-%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82%E6%A1%86%E6%9E%B6/"/>
      <url>/2019/05/14/%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96%E5%BC%80%E5%8F%91-React%E6%A1%86%E6%9E%B6%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E8%84%9A%E6%89%8B%E6%9E%B6-%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><a href="https://github.com/MiChongGET/react-app" target="_blank" rel="noopener">GitHub地址</a></p><h4 id="一、React脚手架"><a href="#一、React脚手架" class="headerlink" title="一、React脚手架"></a>一、React脚手架</h4><h5 id="1、react脚手架说明"><a href="#1、react脚手架说明" class="headerlink" title="1、react脚手架说明"></a>1、react脚手架说明</h5><ul><li>1)xxx脚手架: 用来帮助程序员快速创建一个基于xxx库的模板项目<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- a.包含了所有需要的配置</span><br><span class="line">- b.指定好了所有的依赖</span><br><span class="line">- c.可以直接安装&#x2F;编译&#x2F;运行一个简单效果</span><br></pre></td></tr></table></figure></div></li><li>2)react提供了一个用于创建react项目的脚手架库: create-react-app</li><li>3)项目的整体技术架构为:  react + webpack + es6 + eslint</li><li>4)使用脚手架开发的项目的特点: 模块化, 组件化, 工程化</li></ul><h5 id="2、使用命令"><a href="#2、使用命令" class="headerlink" title="2、使用命令"></a>2、使用命令</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//设置安装全局</span><br><span class="line">npm install -g create-react-app</span><br><span class="line">//创建名称为hello-react的脚手架</span><br><span class="line">create-react-app hello-react</span><br><span class="line">//进入到项目的目录</span><br><span class="line">cd hello-react</span><br><span class="line">//运行项目</span><br><span class="line">npm start</span><br></pre></td></tr></table></figure></div><h5 id="3、react脚手架项目结构"><a href="#3、react脚手架项目结构" class="headerlink" title="3、react脚手架项目结构"></a>3、react脚手架项目结构</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">ReactNews</span><br><span class="line">|--node_modules---第三方依赖模块文件夹</span><br><span class="line">|--public</span><br><span class="line">|-- index.html-----------------主页面</span><br><span class="line">|--scripts</span><br><span class="line">|-- build.js-------------------build打包引用配置</span><br><span class="line">|-- start.js-------------------start运行引用配置</span><br><span class="line">|--src------------源码文件夹</span><br><span class="line">|--components-----------------react组件</span><br><span class="line">|--index.js-------------------应用入口js</span><br><span class="line">|--.gitignore------git版本管制忽略的配置</span><br><span class="line">|--package.json----应用包配置文件 </span><br><span class="line">|--README.md-------应用描述说明的readme文件</span><br></pre></td></tr></table></figure></div><h5 id="4、WebStorm配置代码模板"><a href="#4、WebStorm配置代码模板" class="headerlink" title="4、WebStorm配置代码模板"></a>4、WebStorm配置代码模板</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123;Component&#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> $<span class="title">className</span>$ <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span>(</span><br><span class="line">            &lt;div&gt;</span><br><span class="line"></span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        )</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure></div><h4 id="二、react-ajax"><a href="#二、react-ajax" class="headerlink" title="二、react ajax"></a>二、react ajax</h4><h5 id="1、说明"><a href="#1、说明" class="headerlink" title="1、说明"></a>1、说明</h5><ul><li>1)React本身只关注于界面, 并不包含发送ajax请求的代码</li><li>2)前端应用需要通过ajax请求与后台进行交互(json数据)</li><li>3)react应用中需要集成第三方ajax库(或自己封装)</li></ul><h5 id="2、常用的ajax库"><a href="#2、常用的ajax库" class="headerlink" title="2、常用的ajax库"></a>2、常用的ajax库</h5><ul><li>1)jQuery: 比较重, 如果需要另外引入不建议使用</li><li>2)axios: 轻量级, 建议使用</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- a.封装XmlHttpRequest对象的ajax</span><br><span class="line">- b. promise风格</span><br><span class="line">- c.可以用在浏览器端和node服务器端</span><br></pre></td></tr></table></figure></div><ul><li>3)fetch: 原生函数, 但老版本浏览器不支持</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- a.不再使用XmlHttpRequest对象提交ajax请求</span><br><span class="line">- b.为了兼容低版本的浏览器, 可以引入兼容库fetch.js</span><br></pre></td></tr></table></figure></div><h5 id="3、axios"><a href="#3、axios" class="headerlink" title="3、axios"></a>3、axios</h5><p><a href="https://github.com/axios/axios" target="_blank" rel="noopener">GitHub</a></p><h6 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h6><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install axios</span></span><br></pre></td></tr></table></figure></div><h6 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h6><ul><li>GET方式<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用axios发送异步的ajax请求</span></span><br><span class="line">        <span class="keyword">const</span> url = <span class="string">'https://api.github.com/search/repositories'</span>;</span><br><span class="line"></span><br><span class="line">        axios.get(url,&#123;</span><br><span class="line">            params:&#123;</span><br><span class="line">                q:<span class="string">'r'</span>,</span><br><span class="line">                sort:<span class="string">'starts'</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> result = response.data</span><br><span class="line">            <span class="keyword">const</span> &#123;owner=&#123;&#125;&#125; = result.items[<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">this</span>.setState(&#123;<span class="attr">avatar_url</span>: owner.avatar_url,<span class="attr">repoName</span>:<span class="string">'logo'</span>&#125;);</span><br><span class="line">        &#125;).catch(<span class="function"><span class="params">error</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(error)</span><br><span class="line">        &#125;)</span><br><span class="line">        </span><br><span class="line"><span class="comment">// Want to use async/await? Add the `async` keyword to your outer function/method.</span></span><br><span class="line">        <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getUser</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> response = <span class="keyword">await</span> axios.get(<span class="string">'/user?ID=12345'</span>);</span><br><span class="line">            <span class="built_in">console</span>.log(response);</span><br><span class="line">          &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">            <span class="built_in">console</span>.error(error);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></div></li><li>POST方式</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">axios.post(<span class="string">'/user'</span>, &#123;</span><br><span class="line">    firstName: <span class="string">'Fred'</span>,</span><br><span class="line">    lastName: <span class="string">'Flintstone'</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(response);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure></div><h5 id="4、fetch"><a href="#4、fetch" class="headerlink" title="4、fetch"></a>4、fetch</h5><p><a href="https://github.github.io/fetch/" target="_blank" rel="noopener">GitHub</a></p><h6 id="GET请求"><a href="#GET请求" class="headerlink" title="GET请求"></a>GET请求</h6><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">fetchRequire()&#123;</span><br><span class="line">    <span class="keyword">const</span> url = <span class="string">'https://api.github12.com/search/repositories?q=r&amp;sort=stars'</span>;</span><br><span class="line">    fetch(url).then(<span class="function"><span class="params">response</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> response.json()</span><br><span class="line">    &#125;).then(<span class="function"><span class="params">data</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;owner=&#123;&#125;&#125; = data.items[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;<span class="attr">avatar_url</span>: owner.avatar_url,<span class="attr">repoName</span>:<span class="string">'logo'</span>&#125;)</span><br><span class="line">    &#125;).catch(<span class="function"><span class="params">e</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">//请求错误的时候</span></span><br><span class="line">        <span class="built_in">console</span>.log(e+<span class="string">'==&gt;请求错误'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h6 id="POST请求"><a href="#POST请求" class="headerlink" title="POST请求"></a>POST请求</h6><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">fetch(url, &#123;</span><br><span class="line">  method: <span class="string">"POST"</span>,</span><br><span class="line">  body: <span class="built_in">JSON</span>.stringify(data),</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(e)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><h4 id="三、重要总结"><a href="#三、重要总结" class="headerlink" title="三、重要总结"></a>三、重要总结</h4><h5 id="1、组件间通信"><a href="#1、组件间通信" class="headerlink" title="1、组件间通信"></a>1、组件间通信</h5><h6 id="方式一-通过props传递"><a href="#方式一-通过props传递" class="headerlink" title="方式一: 通过props传递"></a>方式一: 通过props传递</h6><ul><li>1)共同的数据放在父组件上, 特有的数据放在自己组件内部(state)</li><li>2)通过props可以传递一般数据和函数数据, 只能一层一层传递</li><li>3)一般数据–&gt;父组件传递数据给子组件–&gt;子组件读取数据</li><li>4)函数数据–&gt;子组件传递数据给父组件–&gt;子组件调用函数</li></ul><h6 id="方式二-使用消息订阅-subscribe-发布-publish-机制"><a href="#方式二-使用消息订阅-subscribe-发布-publish-机制" class="headerlink" title="方式二: 使用消息订阅(subscribe)-发布(publish)机制"></a>方式二: 使用消息订阅(subscribe)-发布(publish)机制</h6><ul><li>1)工具库: PubSubJS</li><li>2)下载: npm install pubsub-js –save</li><li>3)使用: </li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> PubSub <span class="keyword">from</span> <span class="string">'pubsub-js'</span> <span class="comment">//引入</span></span><br><span class="line">componentDidMount() &#123;</span><br><span class="line">  PubSub.subscribe(<span class="string">'delete'</span>, (msg,data)=&gt;&#123; &#125;); <span class="comment">//订阅  </span></span><br><span class="line">&#125;</span><br><span class="line">PubSub.publish(<span class="string">'delete'</span>, data) <span class="comment">//发布消息</span></span><br></pre></td></tr></table></figure></div><h6 id="方式三-redux"><a href="#方式三-redux" class="headerlink" title="方式三: redux"></a>方式三: redux</h6><p>暂时不介绍</p><h5 id="2、事件监听理解"><a href="#2、事件监听理解" class="headerlink" title="2、事件监听理解"></a>2、事件监听理解</h5><h6 id="原生DOM事件"><a href="#原生DOM事件" class="headerlink" title="原生DOM事件"></a>原生DOM事件</h6><ul><li>1)绑定事件监听</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a.事件名(类型): 只有有限的几个, 不能随便写</span><br><span class="line">b.回调函数</span><br></pre></td></tr></table></figure></div><ul><li>2)触发事件</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a.用户操作界面</span><br><span class="line">b.事件名(类型)</span><br><span class="line">c.数据()</span><br></pre></td></tr></table></figure></div><h6 id="自定义事件-消息机制"><a href="#自定义事件-消息机制" class="headerlink" title="自定义事件(消息机制)"></a>自定义事件(消息机制)</h6><ul><li>1)绑定事件监听</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a.事件名(类型): 任意</span><br><span class="line">b.回调函数: 通过形参接收数据, 在函数体处理事件</span><br></pre></td></tr></table></figure></div><ul><li>2)触发事件(编码)</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a.事件名(类型): 与绑定的事件监听的事件名一致</span><br><span class="line">b.数据: 会自动传递给回调函数</span><br></pre></td></tr></table></figure></div><h5 id="3、ES6常用新语法"><a href="#3、ES6常用新语法" class="headerlink" title="3、ES6常用新语法"></a>3、ES6常用新语法</h5><ul><li>1)定义常量/变量:  const/let</li><li>2)解构赋值: let {a, b} = this.props   import {aa} from ‘xxx’</li><li>3)对象的简洁表达: {a, b}</li><li>4)箭头函数: </li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a.常用场景</span><br><span class="line">    * 组件的自定义方法: xxx &#x3D; () &#x3D;&gt; &#123;&#125;</span><br><span class="line">    * 参数匿名函数</span><br><span class="line">b.优点:</span><br><span class="line">    * 简洁</span><br><span class="line">    * 没有自己的this,使用引用this查找的是外部this</span><br></pre></td></tr></table></figure></div><ul><li>5)扩展(三点)运算符: 拆解对象(const MyProps = {}, &lt;Xxx {…MyProps}&gt;)</li><li>6)类:  class/extends/constructor/super</li><li>7)ES6模块化:  export default | import</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> ES6 </tag>
            
            <tag> React </tag>
            
            <tag> 脚手架 </tag>
            
            <tag> axios </tag>
            
            <tag> fetch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端模块化开发--React框架（一）: 入门和面向组件编程</title>
      <link href="/2019/05/10/%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96%E5%BC%80%E5%8F%91-React%E6%A1%86%E6%9E%B6%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E5%85%A5%E9%97%A8%E5%92%8C%E9%9D%A2%E5%90%91%E7%BB%84%E4%BB%B6%E7%BC%96%E7%A8%8B/"/>
      <url>/2019/05/10/%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96%E5%BC%80%E5%8F%91-React%E6%A1%86%E6%9E%B6%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E5%85%A5%E9%97%A8%E5%92%8C%E9%9D%A2%E5%90%91%E7%BB%84%E4%BB%B6%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><a href="http://myfile.buildworld.cn/react.jpg" data-fancybox="group" data-caption="React" class="fancybox"><img alt="React" title="React" data-src="http://myfile.buildworld.cn/react.jpg" class="lazyload"></a></p><p><a href="https://react.docschina.org" target="_blank" rel="noopener">React中文官网</a></p><h4 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h4><h5 id="1、特点"><a href="#1、特点" class="headerlink" title="1、特点"></a>1、特点</h5><ul><li>1)Declarative(声明式编码)</li><li>2)Component-Based(组件化编码)</li><li>3)Learn Once, Write Anywhere(支持客户端与服务器渲染)</li><li>4)高效</li><li>5)单向数据流</li></ul><h5 id="2、React高效的原因"><a href="#2、React高效的原因" class="headerlink" title="2、React高效的原因"></a>2、React高效的原因</h5><ul><li>1)虚拟(virtual)DOM, 不总是直接操作DOM</li><li>2)DOM Diff算法, 最小化页面重绘</li></ul><h5 id="3、相关的js核心库"><a href="#3、相关的js核心库" class="headerlink" title="3、相关的js核心库"></a>3、相关的js核心库</h5><ul><li>1)react.js: React的核心库</li><li>2)react-dom.js: 提供操作DOM的react扩展库</li><li>3)babel.min.js: 解析JSX语法代码转为纯JS语法代码的库</li></ul><h5 id="4、简单的例子"><a href="#4、简单的例子" class="headerlink" title="4、简单的例子"></a>4、简单的例子</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"test"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"../js/react.development.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"../js/react-dom.development.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"../js/babel.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/babel"</span>&gt;</span><span class="actionscript"> <span class="comment">//声明babel</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//创建虚拟dom元素</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> dom = <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello React<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//将虚拟DOM渲染到真实的DOM中</span></span></span><br><span class="line"><span class="javascript">        ReactDOM.render(dom, <span class="built_in">document</span>.getElementById(<span class="string">'test'</span>));</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div><h5 id="5、虚拟DOM"><a href="#5、虚拟DOM" class="headerlink" title="5、虚拟DOM"></a>5、虚拟DOM</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1)React提供了一些API来创建一种 &#96;特别&#96; 的一般js对象</span><br><span class="line">    a.var element &#x3D; React.createElement(&#39;h1&#39;, &#123;id:&#39;myTitle&#39;&#125;,&#39;hello&#39;)</span><br><span class="line">    b.上面创建的就是一个简单的虚拟DOM对象</span><br><span class="line">2)虚拟DOM对象最终都会被React转换为真实的DOM</span><br><span class="line">3)我们编码时基本只需要操作react的虚拟DOM相关数据, react会转换为真实DOM变化而更新界面</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/babel"</span>&gt; <span class="comment">//声明babel</span></span><br><span class="line">        <span class="comment">//创建虚拟dom元素</span></span><br><span class="line">        <span class="keyword">let</span> id = <span class="string">'qjzxzxd'</span>;</span><br><span class="line">     </span><br><span class="line">        <span class="comment">//三种创建dom元素的方法</span></span><br><span class="line">        <span class="keyword">const</span> dom = <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello React<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">        <span class="keyword">const</span> dom2 = React.createElement(<span class="string">'h2'</span>,&#123;<span class="attr">id</span>:<span class="string">'name'</span>&#125;,<span class="string">'MiChong'</span>)</span><br><span class="line">        <span class="keyword">const</span> test3 =<span class="xml"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">id</span>=<span class="string">&#123;id.toUpperCase()&#125;</span>&gt;</span>&#123;id.toUpperCase()&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//将虚拟DOM渲染到真实的DOM中</span></span><br><span class="line">        ReactDOM.render(dom, <span class="built_in">document</span>.getElementById(<span class="string">'test'</span>));</span><br><span class="line">        ReactDOM.render(dom2,<span class="built_in">document</span>.getElementById(<span class="string">'name'</span>));</span><br><span class="line">        ReactDOM.render(test3,<span class="built_in">document</span>.getElementById(<span class="string">'test3'</span>));</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></div><h4 id="二、JSX（JavaScript-XML）介绍和使用"><a href="#二、JSX（JavaScript-XML）介绍和使用" class="headerlink" title="二、JSX（JavaScript XML）介绍和使用"></a>二、JSX（JavaScript XML）介绍和使用</h4><h5 id="1、介绍"><a href="#1、介绍" class="headerlink" title="1、介绍"></a>1、介绍</h5><ul><li>1)全称:  <code>JavaScript XML</code></li><li>2)react定义的一种类似于XML的JS扩展语法: XML+JS</li><li>3)作用: 用来创建react虚拟DOM(元素)对象</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a.var ele &#x3D; &lt;h1&gt;Hello JSX!&lt;&#x2F;h1&gt;</span><br><span class="line">b.注意1: 它不是字符串, 也不是HTML&#x2F;XML标签</span><br><span class="line">c.注意2: 它最终产生的就是一个JS对象</span><br></pre></td></tr></table></figure></div><ul><li><p>4)标签名任意: HTML标签或其它标签</p></li><li><p>5)标签属性任意: HTML标签属性或其它</p></li><li><p>6)基本语法规则</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a.遇到 &lt;开头的代码, 以标签的语法解析: html同名标签转换为html同名元素, 其它标签需要特别解析</span><br><span class="line">b.遇到以 &#123; 开头的代码，以JS语法解析: 标签中的js代码必须用&#123; &#125;包含</span><br></pre></td></tr></table></figure></div></li><li><p>7)babel.js的作用</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a.浏览器不能直接解析JSX代码, 需要babel转译为纯JS的代码才能运行</span><br><span class="line">b.只要用了JSX，都要加上type&#x3D;&quot;text&#x2F;babel&quot;, 声明需要babel来处理</span><br></pre></td></tr></table></figure></div><h5 id="2、使用"><a href="#2、使用" class="headerlink" title="2、使用"></a>2、使用</h5><h6 id="将数据的数组转为标签的数组"><a href="#将数据的数组转为标签的数组" class="headerlink" title="将数据的数组转为标签的数组"></a>将数据的数组转为标签的数组</h6></li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/babel"</span>&gt;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//数组集合</span></span><br><span class="line">    <span class="keyword">let</span> names = [<span class="string">'java'</span>,<span class="string">'vue'</span>,<span class="string">'React'</span>,<span class="string">'Angular'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment">//新建DOM元素</span></span><br><span class="line">    <span class="keyword">let</span> ul = (<span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">        &#123;</span></span><br><span class="line"><span class="xml">            names.map((name,index)=&gt;<span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span>&gt;</span>&#123;name&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span>)</span></span><br><span class="line"><span class="xml">        &#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//渲染DOM</span></span><br><span class="line">    ReactDOM.render(ul,<span class="built_in">document</span>.getElementById(<span class="string">'names'</span>));</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></div><h4 id="三、模块化"><a href="#三、模块化" class="headerlink" title="三、模块化"></a>三、模块化</h4><h5 id="1-模块"><a href="#1-模块" class="headerlink" title="1.模块"></a>1.模块</h5><ul><li>1)理解: 向外提供特定功能的js程序, 一般就是一个js文件</li><li>2)为什么:  js代码更多更复杂</li><li>3)作用: 复用js, 简化js的编写, 提高js运行效率<h5 id="2-组件"><a href="#2-组件" class="headerlink" title="2.组件"></a>2.组件</h5></li><li>1)理解: 用来实现特定(局部)功能效果的代码集合(html/css/js)</li><li>2)为什么: 一个界面的功能更复杂</li><li>3)作用: 复用编码, 简化项目编码, 提高运行效率<h5 id="3-模块化"><a href="#3-模块化" class="headerlink" title="3.模块化"></a>3.模块化</h5></li><li>当应用的js都以模块来编写的, 这个应用就是一个模块化的应用</li></ul><h4 id="四、React面向组件编程"><a href="#四、React面向组件编程" class="headerlink" title="四、React面向组件编程"></a>四、React面向组件编程</h4><h5 id="1、自定义组件-Component"><a href="#1、自定义组件-Component" class="headerlink" title="1、自定义组件(Component)"></a>1、自定义组件(Component)</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/babel"</span>&gt;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1、定义组件</span></span><br><span class="line">    <span class="comment">//方式1：工厂函数组件（简单组件）</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">MyComponent</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>MiChong<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方式2、ES6类组件（复杂组件）</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MyComponent2</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        render() &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>qjzxzxd<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2、渲染组件标签</span></span><br><span class="line">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">MyComponent</span> /&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">'test1'</span>));</span><br><span class="line">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">MyComponent2</span> /&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">'test2'</span>));</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></div><h5 id="2、组件三大属性"><a href="#2、组件三大属性" class="headerlink" title="2、组件三大属性"></a>2、组件三大属性</h5><p>==<code>state</code>==</p><ul><li>1)state是组件对象最重要的属性, 值是对象(可以包含多个数据)</li><li>2)组件被称为”状态机”, 通过更新组件的state来更新对应的页面显示(重新渲染组件)</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/babel"</span>&gt;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 需求：自定义组件</span></span><br><span class="line"><span class="comment">     * 1、显示h2标题，初始文本为：你喜欢我</span></span><br><span class="line"><span class="comment">     * 2、点击标题更新为：我喜欢你</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">        <span class="comment">//1、定义组件</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Like</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">            <span class="keyword">super</span>(props);</span><br><span class="line">            <span class="comment">//初始化状态</span></span><br><span class="line">            <span class="keyword">this</span>.state = &#123;</span><br><span class="line">                isLikeMe: <span class="literal">false</span></span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//将新增方法中的this强制绑定为组件对象</span></span><br><span class="line">            <span class="keyword">this</span>.handleClick = <span class="keyword">this</span>.handleClick.bind(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//新添加的方法：内部的this默认不是组件对象</span></span><br><span class="line">        <span class="comment">//设置点击事件处理</span></span><br><span class="line">        handleClick() &#123;</span><br><span class="line">            <span class="comment">//得到状态</span></span><br><span class="line">            <span class="keyword">const</span> isLikeMe = !<span class="keyword">this</span>.state.isLikeMe;</span><br><span class="line">            <span class="comment">//更新状态</span></span><br><span class="line">            <span class="keyword">this</span>.setState (&#123;isLikeMe&#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//重写组件类方法</span></span><br><span class="line">        render() &#123;</span><br><span class="line">            <span class="comment">//读取状态</span></span><br><span class="line">            <span class="keyword">const</span> &#123;isLikeMe&#125; = <span class="keyword">this</span>.state;</span><br><span class="line">            <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick&#125;</span>&gt;</span>&#123;isLikeMe ? '你喜欢我' : '我喜欢你'&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2、渲染组件标签</span></span><br><span class="line">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Like</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">'test'</span>));</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></div><p>==<code>props</code>==</p><ul><li>1)每个组件对象都会有props(properties的简写)属性</li><li>2)组件标签的所有属性都保存在props中</li><li>3)通过标签属性从组件外向组件内传递变化的数据</li><li>4)注意: 组件内部不要修改props数据</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/babel"</span>&gt;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 需求: 自定义用来显示一个人员信息的组件</span></span><br><span class="line"><span class="comment">     1). 姓名必须指定</span></span><br><span class="line"><span class="comment">     2). 如果性别没有指定, 默认为男</span></span><br><span class="line"><span class="comment">     3). 如果年龄没有指定, 默认为18</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//1、定义组件</span></span><br><span class="line">    <span class="comment">//方式一、使用工厂</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;ul&gt;</span><br><span class="line">                &lt;li&gt;姓名：&#123;props.name&#125;&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">                &lt;li&gt;年龄：&#123;props.age&#125;&lt;/</span>li&gt;</span><br><span class="line">                &lt;li&gt;性别：&#123;props.sex&#125;&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/u</span>l&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//方式二、使用ES6类组件</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">        render()&#123;</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                &lt;ul&gt;</span><br><span class="line">                    &lt;li&gt;姓名：&#123;<span class="keyword">this</span>.props.name&#125;&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">                    &lt;li&gt;年龄：&#123;this.props.age&#125;&lt;/</span>li&gt;</span><br><span class="line">                    &lt;li&gt;性别：&#123;<span class="keyword">this</span>.props.sex&#125;&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">                &lt;/u</span>l&gt;</span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置自定义标签的默认值</span></span><br><span class="line">    Person.defaultProps = &#123;</span><br><span class="line">        name: <span class="string">'米虫'</span>,</span><br><span class="line">        age: <span class="number">18</span>,</span><br><span class="line">        sex: <span class="string">'男'</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//设置自定义组件属性值的类型和必要性(要导入prop-types.js)</span></span><br><span class="line">    Person.propTypes = &#123;</span><br><span class="line">        name: PropTypes.string.isRequired,</span><br><span class="line">        age: PropTypes.number</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2、渲染组件标签</span></span><br><span class="line">    <span class="keyword">const</span> p1 = &#123;</span><br><span class="line">        name: <span class="string">'MiChong'</span>,</span><br><span class="line">        age: <span class="number">18</span>,</span><br><span class="line">        sex: <span class="string">'男'</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//ReactDOM.render(&lt;Person name=&#123;p1.name&#125; age=&#123;p1.age&#125; sex=&#123;p1.sex&#125;/&gt;, document.getElementById('test'));</span></span><br><span class="line">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Person</span> &#123;<span class="attr">...p1</span>&#125;/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">'test'</span>));</span><br><span class="line">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Person</span> <span class="attr">age</span>=<span class="string">&#123;p1.age&#125;</span> <span class="attr">sex</span>=<span class="string">&#123;p1.sex&#125;/</span>&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">'test2'</span>));</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></div><p>==<code>refs</code>==</p><ul><li>1)组件内的标签都可以定义ref属性来标识自己</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a.&lt;input type&#x3D;&quot;text&quot; ref&#x3D;&#123;input &#x3D;&gt; this.msgInput &#x3D; input&#125;&#x2F;&gt;</span><br><span class="line">b.回调函数在组件初始化渲染完或卸载时自动调用</span><br></pre></td></tr></table></figure></div><ul><li>2)在组件中可以通过this.msgInput来得到对应的真实DOM元素</li><li>3)作用: 通过ref获取组件内容特定标签对象, 进行读取其相关数据<h6 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h6></li><li>1)通过onXxx属性指定组件的事件处理函数(注意大小写)</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a.React使用的是自定义(合成)事件, 而不是使用的原生DOM事件</span><br><span class="line">b.React中的事件是通过事件委托方式处理的(委托给组件最外层的元素)</span><br></pre></td></tr></table></figure></div><ul><li>2)通过event.target得到发生事件的DOM元素对象<h6 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h6><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;input onFocus=&#123;<span class="keyword">this</span>.handleClick&#125;/&gt;</span><br><span class="line">handleFocus(event) &#123;</span><br><span class="line">    event.target  <span class="comment">//返回input对象</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/babel"</span>&gt;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1、定义组件</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//固定格式</span></span><br><span class="line">        <span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">            <span class="keyword">super</span>(props);</span><br><span class="line">            <span class="comment">//添加自定义方法</span></span><br><span class="line">            <span class="keyword">this</span>.showInput = <span class="keyword">this</span>.showInput.bind(<span class="keyword">this</span>);</span><br><span class="line">            <span class="keyword">this</span>.handleBlur = <span class="keyword">this</span>.handleBlur.bind(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//自定义事件方法</span></span><br><span class="line">        showInput()&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">let</span> input = <span class="keyword">this</span>.refs.content;</span><br><span class="line">            <span class="comment">//第一种写法的输出</span></span><br><span class="line">            <span class="comment">//alert(input.value);</span></span><br><span class="line">            <span class="comment">//第二种写法的输出</span></span><br><span class="line">            alert(<span class="keyword">this</span>.input.value);</span><br><span class="line">        &#125;;</span><br><span class="line">        handleBlur(event)&#123;</span><br><span class="line">            alert(event.target.value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        render() &#123;</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                &lt;div&gt;</span><br><span class="line">                    <span class="comment">//第一种写法</span></span><br><span class="line">                    &lt;input type=<span class="string">"text"</span> ref=<span class="string">"content"</span>/&gt;</span><br><span class="line">                    <span class="comment">//第二种写法</span></span><br><span class="line">                    &lt;input type=<span class="string">"text"</span> ref=&#123;input=&gt;<span class="keyword">this</span>.input = input&#125;/&gt;</span><br><span class="line">                    &lt;button onClick=&#123;<span class="keyword">this</span>.showInput&#125;&gt;提示输入&lt;<span class="regexp">/button&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;</span></span><br><span class="line"><span class="regexp">                    &lt;input type="text" placeholder="失去焦点提示内容" onBlur=&#123;this.handleBlur&#125;/</span>&gt;</span><br><span class="line">                &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">            )</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    ReactDOM.render(&lt;MyComponent/</span>&gt;, <span class="built_in">document</span>.getElementById(<span class="string">'test'</span>));</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></div><h5 id="3、组件的组合"><a href="#3、组件的组合" class="headerlink" title="3、组件的组合"></a>3、组件的组合</h5><p>代码</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/babel"</span>&gt;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1、自定义组件</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//初始化</span></span><br><span class="line">        <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">            <span class="keyword">super</span>(props);</span><br><span class="line">            <span class="keyword">this</span>.state = &#123;</span><br><span class="line">                todos: [<span class="string">'java'</span>, <span class="string">'html'</span>, <span class="string">'go'</span>]</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">this</span>.addTodos = <span class="keyword">this</span>.addTodos.bind(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        addTodos(todo) &#123;</span><br><span class="line">            <span class="keyword">const</span> &#123;todos&#125; = <span class="keyword">this</span>.state;</span><br><span class="line">            todos.unshift(todo)</span><br><span class="line">            <span class="comment">//更新状态</span></span><br><span class="line">            <span class="keyword">this</span>.setState(&#123;todos&#125;)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        render() &#123;</span><br><span class="line">            <span class="keyword">const</span> &#123;todos&#125; = <span class="keyword">this</span>.state;</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                &lt;div&gt;</span><br><span class="line">                    &lt;h1&gt;Sample TODO Add&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">                    &lt;Add count=&#123;todos.length&#125; addTodos=&#123;this.addTodos&#125;/</span>&gt;</span><br><span class="line">                    &lt;List todos=&#123;todos&#125;/&gt;</span><br><span class="line">                &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">            )</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    class Add extends React.Component &#123;</span></span><br><span class="line"><span class="regexp">        constructor(props) &#123;</span></span><br><span class="line"><span class="regexp">            super(props);</span></span><br><span class="line"><span class="regexp">            this.add = this.add.bind(this)</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/自定义方法</span></span><br><span class="line"><span class="regexp">        add() &#123;</span></span><br><span class="line"><span class="regexp">            /</span><span class="regexp">/1、读取输入的数据</span></span><br><span class="line"><span class="regexp">            const inputValue = this.addInput.value.trim();</span></span><br><span class="line"><span class="regexp">            /</span><span class="regexp">/2、列表添加数据</span></span><br><span class="line"><span class="regexp">            this.props.addTodos(inputValue)</span></span><br><span class="line"><span class="regexp">            /</span><span class="regexp">/3、清除输入</span></span><br><span class="line"><span class="regexp">            this.addInput.value = ''</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        render() &#123;</span></span><br><span class="line"><span class="regexp">            return (</span></span><br><span class="line"><span class="regexp">                &lt;div&gt;</span></span><br><span class="line"><span class="regexp">                    &lt;input type="text" ref=&#123;input =&gt; this.addInput = input&#125;/</span>&gt;</span><br><span class="line">                    &lt;button onClick=&#123;<span class="keyword">this</span>.add&#125;&gt;添加&#123;<span class="keyword">this</span>.props.count&#125;&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">                &lt;/</span>div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">List</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        render() &#123;</span><br><span class="line">            <span class="keyword">const</span> &#123;todos&#125; = <span class="keyword">this</span>.props;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                &lt;ul&gt;</span><br><span class="line">                    &#123;todos.map(<span class="function">(<span class="params">todo, index</span>) =&gt;</span> <span class="xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span>&gt;</span>&#123;todo&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span>)&#125;</span><br><span class="line">                &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">            )</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/2、渲染到真实的DOM中去</span></span><br><span class="line"><span class="regexp">    ReactDOM.render(&lt;App/</span>&gt;, <span class="built_in">document</span>.getElementById(<span class="string">'sample'</span>))</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></div><h5 id="4、收集表单数据"><a href="#4、收集表单数据" class="headerlink" title="4、收集表单数据"></a>4、收集表单数据</h5><ul><li>1)问题: 在react应用中, 如何收集表单输入数据</li><li>2)包含表单的组件分类</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a.受控组件: 表单项输入数据能自动收集成状态</span><br><span class="line">b.非受控组件: 需要时才手动读取表单输入框中的数据</span><br></pre></td></tr></table></figure></div><p>示意代码</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/babel"</span>&gt;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 需求: 自定义包含表单的组件</span></span><br><span class="line"><span class="comment">     1. 输入用户名密码后, 点击登陆提示输入信息</span></span><br><span class="line"><span class="comment">     2. 不提交表单</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">        <span class="comment">//1、自定义组件</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">LoginForm</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">            <span class="keyword">super</span>(props);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//初始化状态</span></span><br><span class="line">            <span class="keyword">this</span>.state = &#123;</span><br><span class="line">                pwd: <span class="string">''</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">this</span>.handleSubmit = <span class="keyword">this</span>.handleSubmit.bind(<span class="keyword">this</span>);</span><br><span class="line">            <span class="keyword">this</span>.handleChange = <span class="keyword">this</span>.handleChange.bind(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        handleSubmit(event) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">const</span> name = <span class="keyword">this</span>.inputName.value;</span><br><span class="line">            <span class="keyword">const</span> &#123;pwd&#125; = <span class="keyword">this</span>.state;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//阻止时间的默认行为（提交）</span></span><br><span class="line">            event.preventDefault()</span><br><span class="line">            alert(<span class="string">`用户名<span class="subst">$&#123;name&#125;</span>,密码<span class="subst">$&#123;pwd&#125;</span>`</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        handleChange(event) &#123;</span><br><span class="line">            <span class="comment">//读取密码</span></span><br><span class="line">            <span class="keyword">const</span> pwd = event.target.value;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//更新状态</span></span><br><span class="line">            <span class="keyword">this</span>.setState(&#123;pwd&#125;)</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        render() &#123;</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                &lt;form action=<span class="string">"/test"</span> onSubmit=&#123;<span class="keyword">this</span>.handleSubmit&#125;&gt;</span><br><span class="line">                    用户名：&lt;input type=<span class="string">"text"</span> ref=&#123;input =&gt; <span class="keyword">this</span>.inputName = input&#125;/&gt;</span><br><span class="line">                    密码： &lt;input type=<span class="string">"password"</span> value=&#123;<span class="keyword">this</span>.state.pwd&#125; onChange=&#123;<span class="keyword">this</span>.handleChange&#125;/&gt;</span><br><span class="line">                    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"登录"</span>/&gt;</span><br><span class="line">                &lt;<span class="regexp">/form&gt;</span></span><br><span class="line"><span class="regexp">            )</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/2、渲染到真实的DOM中去</span></span><br><span class="line"><span class="regexp">    ReactDOM.render(&lt;LoginForm/</span>&gt;, <span class="built_in">document</span>.getElementById(<span class="string">'sample'</span>))</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></div><h5 id="5、组件的生命周期"><a href="#5、组件的生命周期" class="headerlink" title="5、组件的生命周期"></a>5、组件的生命周期</h5><p><a href="http://myfile.buildworld.cn/react%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png" data-fancybox="group" data-caption="react生命周期" class="fancybox"><img alt="react生命周期" title="react生命周期" data-src="http://myfile.buildworld.cn/react%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png" class="lazyload"></a></p><h6 id="1、生命周期流程"><a href="#1、生命周期流程" class="headerlink" title="1、生命周期流程:"></a>1、生命周期流程:</h6><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">a.第一次初始化渲染显示: ReactDOM.render()</span><br><span class="line">      * constructor(): 创建对象初始化state</span><br><span class="line">      * componentWillMount() : 将要插入回调</span><br><span class="line">      * render() : 用于插入虚拟DOM回调</span><br><span class="line">      * componentDidMount() : 已经插入回调</span><br><span class="line">b.每次更新state: this.setSate()</span><br><span class="line">      * componentWillUpdate() : 将要更新回调</span><br><span class="line">      * render() : 更新(重新渲染)</span><br><span class="line">      * componentDidUpdate() : 已经更新回调</span><br><span class="line">c.移除组件: ReactDOM.unmountComponentAtNode(containerDom)</span><br><span class="line">      * componentWillUnmount() : 组件将要被移除回调</span><br></pre></td></tr></table></figure></div><h6 id="2、-重要的勾子"><a href="#2、-重要的勾子" class="headerlink" title="2、 重要的勾子"></a>2、 重要的勾子</h6><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1)render(): 初始化渲染或更新渲染调用</span><br><span class="line">2)componentDidMount(): 开启监听, 发送ajax请求</span><br><span class="line">3)componentWillUnmount(): 做一些收尾工作, 如: 清理定时器</span><br><span class="line">4)componentWillReceiveProps(): 后面需要时讲</span><br></pre></td></tr></table></figure></div><h6 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h6><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/babel"</span>&gt;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 需求: 自定义组件</span></span><br><span class="line"><span class="comment">     1. 让指定的文本做显示/隐藏的渐变动画</span></span><br><span class="line"><span class="comment">     2. 切换持续时间为2S</span></span><br><span class="line"><span class="comment">     3. 点击按钮从界面中移除组件界面</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">        <span class="comment">//1、自定义组件</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Life</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">            <span class="keyword">super</span>(props);</span><br><span class="line">            <span class="keyword">this</span>.state = &#123;</span><br><span class="line">                opacity: <span class="number">1</span></span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="keyword">this</span>.destroyComponent = <span class="keyword">this</span>.destroyComponent.bind(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        destroyComponent()&#123;</span><br><span class="line">            ReactDOM.unmountComponentAtNode(<span class="built_in">document</span>.getElementById(<span class="string">'sample'</span>))</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置循环定时器</span></span><br><span class="line">        componentDidMount() &#123;</span><br><span class="line">            <span class="keyword">this</span>.intervalId = setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">let</span> &#123;opacity&#125; = <span class="keyword">this</span>.state</span><br><span class="line">                opacity -= <span class="number">0.1</span></span><br><span class="line">                <span class="keyword">if</span> (opacity &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    opacity = <span class="number">1</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 更新状态</span></span><br><span class="line">                <span class="keyword">this</span>.setState(&#123;opacity&#125;)</span><br><span class="line">                <span class="built_in">console</span>.log(opacity)</span><br><span class="line">            &#125;.bind(<span class="keyword">this</span>), <span class="number">200</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//组件将要被移除回调</span></span><br><span class="line">        componentWillUnmount()&#123;</span><br><span class="line">            clearInterval(<span class="keyword">this</span>.intervalId);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        render() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">const</span> &#123;opacity&#125; = <span class="keyword">this</span>.state;</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                &lt;div&gt;</span><br><span class="line">                    &lt;h1 style=&#123;&#123;<span class="attr">opacity</span>: opacity&#125;&#125;&gt;&#123;<span class="keyword">this</span>.props.content&#125;&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">                    &lt;button onClick=&#123;this.destroyComponent&#125;&gt;change&lt;/</span>button&gt;</span><br><span class="line">                &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">            )</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/2、渲染到真实的DOM中去</span></span><br><span class="line"><span class="regexp">    ReactDOM.render(&lt;Life content="准时下班"/</span>&gt;, <span class="built_in">document</span>.getElementById(<span class="string">'sample'</span>))</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></div><h5 id="6、虚拟DOM与DOM-Diff算法"><a href="#6、虚拟DOM与DOM-Diff算法" class="headerlink" title="6、虚拟DOM与DOM Diff算法"></a>6、虚拟DOM与DOM Diff算法</h5><p><a href="http://myfile.buildworld.cn/diff%E7%AE%97%E6%B3%95%E7%A4%BA%E6%84%8F%E5%9B%BE.png" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="http://myfile.buildworld.cn/diff%E7%AE%97%E6%B3%95%E7%A4%BA%E6%84%8F%E5%9B%BE.png" class="lazyload"></a></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/babel"</span>&gt;</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  验证:</span></span><br><span class="line"><span class="comment">  虚拟DOM+DOM Diff算法: 最小化页面重绘</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">      <span class="keyword">super</span>(props)</span><br><span class="line">      <span class="keyword">this</span>.state = &#123;</span><br><span class="line">          date: <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    componentDidMount () &#123;</span><br><span class="line">      setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">            date: <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;, <span class="number">1000</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render () &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'render()'</span>)</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        &lt;p&gt;</span><br><span class="line">          Hello, &lt;input type=<span class="string">"text"</span> placeholder=<span class="string">"Your name here"</span>/&gt;!&amp;nbsp;</span><br><span class="line">          &lt;span&gt;It is &#123;<span class="keyword">this</span>.state.date.toTimeString()&#125;&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>p&gt;</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ReactDOM.render(</span><br><span class="line">    &lt;HelloWorld/&gt;,</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">'example'</span>)</span><br><span class="line">  )</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> ES6 </tag>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端模块化开发--ES6相关知识</title>
      <link href="/2019/05/08/%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96%E5%BC%80%E5%8F%91-ES6%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/"/>
      <url>/2019/05/08/%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96%E5%BC%80%E5%8F%91-ES6%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><a href="http://myfile.buildworld.cn/es6.jpg" data-fancybox="group" data-caption="ES6" class="fancybox"><img alt="ES6" title="ES6" data-src="http://myfile.buildworld.cn/es6.jpg" class="lazyload"></a></p><h4 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h4><ul><li>ES全名：ECMAScript </li><li>ES由ECMA进行标准化的一套规范</li><li>ES涵盖各种环境中JS使用场景，无论是浏览器环境还是类似node.js的非浏览器环境</li><li>ES版本：1、2、3、5、6</li><li>ES6是最新标准，目标是使JS可以编写复杂的大型应用程序，成为企业级开发语言。</li></ul><h4 id="二、新特性"><a href="#二、新特性" class="headerlink" title="二、新特性"></a>二、新特性</h4><h5 id="1、变量声明-let"><a href="#1、变量声明-let" class="headerlink" title="1、变量声明 let"></a>1、变量声明 let</h5><h6 id="使用var关键字，意味着a变量是全局的，打印结果是abc"><a href="#使用var关键字，意味着a变量是全局的，打印结果是abc" class="headerlink" title="使用var关键字，意味着a变量是全局的，打印结果是abc"></a>使用var关键字，意味着a变量是全局的，打印结果是abc</h6><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">info</span>(<span class="params">bol</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (bol) &#123;</span><br><span class="line">        <span class="keyword">var</span> a  = <span class="string">'abc'</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(a)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">info(<span class="literal">true</span>)</span><br></pre></td></tr></table></figure></div><h6 id="使用let关键字，此时就会报错"><a href="#使用let关键字，此时就会报错" class="headerlink" title="使用let关键字，此时就会报错"></a>使用let关键字，此时就会报错</h6><ul><li>ES6之前，声明变量使用var，该关键字声明的变量会在函数最顶部（不在函数内的即在全局作用域的最顶部）</li><li>ES6声明变量使用let，常量使用const，它们声明的变量都属于块级作用域，即在声明的{}中有效</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">info</span>(<span class="params">bol</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (bol) &#123;</span><br><span class="line">        <span class="keyword">let</span> a  = <span class="string">'abc'</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(a)</span><br><span class="line">&#125;</span><br><span class="line">info(<span class="literal">true</span>)</span><br></pre></td></tr></table></figure></div><h5 id="2、常量声明：const"><a href="#2、常量声明：const" class="headerlink" title="2、常量声明：const"></a>2、常量声明：const</h5><blockquote><p>关键字const声明的常量只能赋值一次</p></blockquote><h5 id="3、模版字符串："><a href="#3、模版字符串：" class="headerlink" title="3、模版字符串："></a>3、模版字符串：</h5><blockquote><p>单行字符串拼接：<code>${}</code></p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">'michong'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`你好，欢迎<span class="subst">$&#123;name&#125;</span>`</span>);</span><br></pre></td></tr></table></figure></div><h5 id="4、参数默认值："><a href="#4、参数默认值：" class="headerlink" title="4、参数默认值："></a>4、参数默认值：</h5><blockquote><p>ES6为函数参数提供了默认值</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getAge</span>(<span class="params">age = <span class="number">24</span></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(age);</span><br><span class="line">&#125;</span><br><span class="line">getAge();</span><br></pre></td></tr></table></figure></div><h5 id="5、箭头函数"><a href="#5、箭头函数" class="headerlink" title="5、箭头函数"></a>5、箭头函数</h5><blockquote><p>箭头代替函数，简化函数定义，箭头函数最直观的三个特点。</p></blockquote><ul><li>不需要function关键字来创建函数</li><li>省略return关键字</li><li>继承当前上下文的 this 关键字</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">getName = <span class="function">(<span class="params">name</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(name);</span><br><span class="line">&#125;</span><br><span class="line">getName(<span class="string">'米虫'</span>);</span><br></pre></td></tr></table></figure></div><h5 id="6、对象初始化简写"><a href="#6、对象初始化简写" class="headerlink" title="6、对象初始化简写"></a>6、对象初始化简写</h5><blockquote><p>ES5我们对于对象都是以键值对的形式书写，是有可能出现键值对重名的</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">People = <span class="function">(<span class="params">name, age</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        name,</span><br><span class="line">        age</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(People(<span class="string">'米虫'</span>,<span class="number">24</span>))</span><br></pre></td></tr></table></figure></div><p>==返回值==</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang"></div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; name: '米虫', age: 24 &#125;</span><br></pre></td></tr></table></figure></div><h5 id="7、解构"><a href="#7、解构" class="headerlink" title="7、解构"></a>7、解构</h5><blockquote><p>数组和对象是JS中最常用也是最重要表示形式。为了简化提取信息，ES6新增了解构，这是将一个数据结构分解为更小的部分的过程</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对象</span></span><br><span class="line">People = <span class="function">(<span class="params">name, age</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        name,</span><br><span class="line">        age</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> &#123;name,age&#125; = People(<span class="string">'米虫'</span>,<span class="number">24</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`姓名：<span class="subst">$&#123;name&#125;</span>======年龄：<span class="subst">$&#123;age&#125;</span>`</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//数组</span></span><br><span class="line"><span class="keyword">let</span> nums = [<span class="number">1</span>,<span class="number">2</span>];</span><br><span class="line"><span class="keyword">let</span> [one,second] = nums;</span><br><span class="line"><span class="built_in">console</span>.log(one+second)</span><br></pre></td></tr></table></figure></div><h5 id="8、Spread-Operator"><a href="#8、Spread-Operator" class="headerlink" title="8、Spread Operator"></a>8、Spread Operator</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数组</span></span><br><span class="line"><span class="keyword">const</span> color = [<span class="string">'red'</span>, <span class="string">'yellow'</span>]</span><br><span class="line"><span class="keyword">const</span> colorful = [...color, <span class="string">'green'</span>, <span class="string">'pink'</span>]</span><br><span class="line"><span class="built_in">console</span>.log(colorful) <span class="comment">//[red, yellow, green, pink]</span></span><br><span class="line">   </span><br><span class="line"><span class="comment">//对象</span></span><br><span class="line"><span class="keyword">const</span> alp = &#123; <span class="attr">fist</span>: <span class="string">'a'</span>, <span class="attr">second</span>: <span class="string">'b'</span>&#125;</span><br><span class="line"><span class="keyword">const</span> alphabets = &#123; ...alp, <span class="attr">third</span>: <span class="string">'c'</span> &#125;</span><br><span class="line"><span class="built_in">console</span>.log(alphabets) <span class="comment">//&#123; "fist": "a", "second": "b", "third": "c"</span></span><br></pre></td></tr></table></figure></div><h5 id="9、NodeJS对ES6支持"><a href="#9、NodeJS对ES6支持" class="headerlink" title="9、NodeJS对ES6支持"></a>9、NodeJS对ES6支持</h5><ul><li>1)在项目根目录添加.babelrc文件，配置es2015插件</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang"></div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"presets"</span>: [<span class="string">"es2015"</span>]</span><br><span class="line">&#125;</span><br><span class="line">注：</span><br><span class="line">es2015 === es6</span><br><span class="line">es2016 === es7</span><br><span class="line">es2017 === es8</span><br></pre></td></tr></table></figure></div><ul><li><p>2)安装es2015插件<br>运行安装命令</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install babel-preset-es2015 --save-dev</span><br></pre></td></tr></table></figure></div><blockquote><p>babel-preset-es2015: 可以将es2015即es6的js代码编译为es5</p></blockquote></li><li><p>3)全局安装命令行工具</p></li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install babel-cli -g</span><br></pre></td></tr></table></figure></div><ul><li>4)使用<br>babel-node js文件名</li></ul><h5 id="10、Import和Export（Node中不支持这个，所有参考上面第九条的内容）"><a href="#10、Import和Export（Node中不支持这个，所有参考上面第九条的内容）" class="headerlink" title="10、Import和Export（Node中不支持这个，所有参考上面第九条的内容）"></a>10、Import和Export（Node中不支持这个，所有参考上面第九条的内容）</h5><blockquote><p>ES6中的新语法，类似于exports和require，可以实现函数跨文件使用</p></blockquote><p>test.js</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对象</span></span><br><span class="line"><span class="keyword">let</span> People = <span class="function"><span class="keyword">function</span>(<span class="params">name, age</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        name,</span><br><span class="line">        age</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//导出模块</span></span><br><span class="line"><span class="keyword">export</span>&#123;People&#125;</span><br></pre></td></tr></table></figure></div><p>test2.js</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;People&#125; <span class="keyword">from</span> <span class="string">'./test'</span></span><br><span class="line"><span class="keyword">let</span> &#123;name,age&#125; = People(<span class="string">'米虫'</span>,<span class="number">24</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`姓名：<span class="subst">$&#123;name&#125;</span>======年龄：<span class="subst">$&#123;age&#125;</span>`</span>)</span><br></pre></td></tr></table></figure></div><h5 id="11、Promise-对象-异步处理，Ajax等"><a href="#11、Promise-对象-异步处理，Ajax等" class="headerlink" title="11、Promise 对象(异步处理，Ajax等)"></a>11、Promise 对象(异步处理，Ajax等)</h5><p><code>Promise</code> 是异步编程的一种解决方案，避免了传统的回调函数的层层嵌套，也就是常说的“回调地狱”。</p><p><code>Promise</code> 一旦新建就会立即执行，无法中途取消。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 异步操作成功</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        resolve(<span class="string">'执行成功'</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        reject(<span class="string">'执行失败'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//可以获取上面异步操作结果得到数据，并打印出来</span></span><br><span class="line">promise.then(<span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//成功的</span></span><br><span class="line">    <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;).catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//失败的</span></span><br><span class="line">    <span class="built_in">console</span>.log(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div><h5 id="补充-async-await"><a href="#补充-async-await" class="headerlink" title="补充 async await"></a>补充 <code>async</code> <code>await</code></h5><blockquote><p>Async/await建立于Promise之上，很多人认为的最高境界，就是根本不用关心它是不是异步。async await就是异步操作的终极解决方案。</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">getJSON = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">reslove, rejcet</span>) =&gt;</span> &#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            reslove(<span class="string">'success'</span>)</span><br><span class="line">        &#125;, <span class="number">2000</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用promise</span></span><br><span class="line"><span class="keyword">let</span> makeRequest2 = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    getJSON().then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(data);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'done'</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//先打印出来</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'成功'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用async</span></span><br><span class="line"><span class="keyword">let</span> makeRequest = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="comment">//先等待promise中的resolve()方法执行完成之后才会接着执行下面的语句</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">await</span> getJSON());</span><br><span class="line">    <span class="comment">//等待上一步执行完成之后才会执行</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'成功'</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'done'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(makeRequest2());</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端模块化开发--Node基础&amp;&amp;WebPack模块化开发</title>
      <link href="/2019/05/07/%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96%E5%BC%80%E5%8F%91-Node%E5%9F%BA%E7%A1%80-WebPack%E6%A8%A1%E5%9D%97%E5%8C%96%E5%BC%80%E5%8F%91/"/>
      <url>/2019/05/07/%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96%E5%BC%80%E5%8F%91-Node%E5%9F%BA%E7%A1%80-WebPack%E6%A8%A1%E5%9D%97%E5%8C%96%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><a href="http://myfile.buildworld.cn/node.jpg" data-fancybox="group" data-caption="Node" class="fancybox"><img alt="Node" title="Node" data-src="http://myfile.buildworld.cn/node.jpg" class="lazyload"></a></p><h4 id="一、Node-开发"><a href="#一、Node-开发" class="headerlink" title="一、Node 开发"></a>一、Node 开发</h4><h5 id="1、模块化开发"><a href="#1、模块化开发" class="headerlink" title="1、模块化开发"></a>1、模块化开发</h5><h6 id="定义统一的方法：function-js"><a href="#定义统一的方法：function-js" class="headerlink" title="定义统一的方法：function.js"></a>定义统一的方法：function.js</h6><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">exports.sum = <span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h6 id="导入方法：use-js"><a href="#导入方法：use-js" class="headerlink" title="导入方法：use.js"></a>导入方法：use.js</h6><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fun = <span class="built_in">require</span>(<span class="string">'./function'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(fun.sum(<span class="number">1</span>, <span class="number">2</span>))</span><br></pre></td></tr></table></figure></div><h5 id="2、服务器"><a href="#2、服务器" class="headerlink" title="2、服务器"></a>2、服务器</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建服务器</span></span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line">http.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">request, response</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 发送 HTTP 头部</span></span><br><span class="line">    <span class="comment">// HTTP 状态值: 200 : OK</span></span><br><span class="line">    <span class="comment">// 内容类型: text/plain</span></span><br><span class="line">    response.writeHead(<span class="number">200</span>, &#123; <span class="string">'Content-Type'</span>: <span class="string">'text/plain'</span> &#125;);</span><br><span class="line">    <span class="comment">//页面显示内容</span></span><br><span class="line">    response.write(<span class="string">'hi michong\n'</span>) <span class="comment">//可以调用多次</span></span><br><span class="line">    response.end(<span class="string">'hello world!'</span>)    <span class="comment">//只可以调用一次</span></span><br><span class="line">&#125;).listen(<span class="number">8888</span>);</span><br></pre></td></tr></table></figure></div><h5 id="3、接收参数"><a href="#3、接收参数" class="headerlink" title="3、接收参数"></a>3、接收参数</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//接收参数(http://localhost:8888/?name=michong)</span></span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>)</span><br><span class="line">http.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">request, response</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 发送 HTTP 头部</span></span><br><span class="line">    <span class="comment">// HTTP 状态值: 200 : OK</span></span><br><span class="line">    <span class="comment">// 内容类型: text/plain</span></span><br><span class="line">    response.writeHead(<span class="number">200</span>, &#123; <span class="string">'Content-Type'</span>: <span class="string">'text/plain'</span> &#125;);</span><br><span class="line">    <span class="comment">//解析url参数</span></span><br><span class="line">    <span class="keyword">var</span> params = url.parse(request.url,<span class="literal">true</span>).query;</span><br><span class="line">    response.end(<span class="string">'姓名：'</span>+params.name);</span><br><span class="line">&#125;).listen(<span class="number">8888</span>);</span><br></pre></td></tr></table></figure></div><h4 id="二、-包资源管理器NPM"><a href="#二、-包资源管理器NPM" class="headerlink" title="二、 包资源管理器NPM"></a>二、 包资源管理器NPM</h4><blockquote><p>npm全称Node Package Manager，他是node包管理和分发工具。其实我们可以把NPM<br>理解为前端的Maven</p></blockquote><h6 id="npm的镜像替换成淘宝"><a href="#npm的镜像替换成淘宝" class="headerlink" title="npm的镜像替换成淘宝"></a>npm的镜像替换成淘宝</h6><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry http://registry.npm.taobao.org/</span><br></pre></td></tr></table></figure></div><h6 id="全局下载"><a href="#全局下载" class="headerlink" title="全局下载"></a>全局下载</h6><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install xxx -g</span><br></pre></td></tr></table></figure></div><h6 id="运行工程"><a href="#运行工程" class="headerlink" title="运行工程"></a>运行工程</h6><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">如果我们想运行某个工程，则使用run命令</span><br><span class="line">如果package.json中定义的脚本如下</span><br><span class="line">dev是开发阶段测试运行</span><br><span class="line">build是构建编译工程</span><br><span class="line">lint 是运行js代码检测</span><br></pre></td></tr></table></figure></div><h4 id="三、Webpack"><a href="#三、Webpack" class="headerlink" title="三、Webpack"></a>三、Webpack</h4><blockquote><p>Webpack 是一个前端资源加载/打包工具。它将根据模块的依赖关系进行静态分<br>析，然后将这些模块按照指定的规则生成对应的静态资源。</p></blockquote><p><a href="http://myfile.buildworld.cn/webpack.png" data-fancybox="group" data-caption="webpack示意图" class="fancybox"><img alt="webpack示意图" title="webpack示意图" data-src="http://myfile.buildworld.cn/webpack.png" class="lazyload"></a></p><h6 id="全局安装"><a href="#全局安装" class="headerlink" title="全局安装"></a>全局安装</h6><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install webpack ‐g</span><br><span class="line">npm install webpack‐cli ‐g</span><br></pre></td></tr></table></figure></div><h5 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h5><h5 id="1、js打包"><a href="#1、js打包" class="headerlink" title="1、js打包"></a>1、js打包</h5><ul><li>创建src文件夹，创建bar.js</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">exports.info = <span class="function"><span class="keyword">function</span> (<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.write(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ul><li>src下创建logic.js</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">exports.add = <span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ul><li>src下创建main.js</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bar = <span class="built_in">require</span>(<span class="string">'./bar'</span>);</span><br><span class="line"><span class="keyword">var</span> logic = <span class="built_in">require</span>(<span class="string">'./logic'</span>);</span><br><span class="line">bar.info(<span class="string">'hello world!'</span> + logic.add(<span class="number">1</span>, <span class="number">2</span>));</span><br></pre></td></tr></table></figure></div><ul><li>创建配置文件webpack.config.js ，该文件与src处于同级目录</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: <span class="string">'./src/main.js'</span>,</span><br><span class="line">    output:&#123;</span><br><span class="line">        path: path.resolve(__dirname,<span class="string">'./dist'</span>),</span><br><span class="line">        filename: <span class="string">'bundle.js'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><blockquote><p>以上代码的意思是：读取当前目录下src文件夹中的main.js（入口文件）内容，把对应的<br>js文件打包，打包后的文件放入当前目录的dist文件夹下，打包后的js文件名为bundle.js</p></blockquote><ul><li>执行编译命令</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">webpack</span><br></pre></td></tr></table></figure></div><ul><li>创建index.html ,引用bundle.js</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"dist/bundle.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div><h5 id="2、css打包"><a href="#2、css打包" class="headerlink" title="2、css打包"></a>2、css打包</h5><blockquote><p>Webpack 本身只能处理 JavaScript 模块，如果要处理其他类型的文件，就需要使用<br>loader 进行转换。<br>Loader 可以理解为是模块和资源的转换器，它本身是一个函数，接受源文件作为参数，<br>返回转换的结果。这样，我们就可以通过 require 来加载任何类型的模块或文件，比如<br>CoffeeScript、 JSX、 LESS 或图片。首先我们需要安装相关Loader插件，css-loader 是<br>将 css 装载到 javascript；style-loader 是让 javascript 认识css</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install style-loader css-loader --save-dev</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">npm install --save moduleName 命令</span><br><span class="line">1.安装模块到项目node_modules目录下。</span><br><span class="line">2.会将模块依赖写入dependencies 节点。</span><br><span class="line">3.运行 npm install 初始化项目时，会将模块下载到项目目录下。</span><br><span class="line">4.运行npm install --production或者注明NODE_ENV变量值为production时，会自动下载模块到node_modules目录中。</span><br><span class="line">npm install --save-dev moduleName 命令</span><br><span class="line">1.安装模块到项目node_modules目录下。</span><br><span class="line">2.会将模块依赖写入devDependencies 节点。</span><br><span class="line">3.运行 npm install 初始化项目时，会将模块下载到项目目录下。</span><br><span class="line">4.运行npm install --production或者注明NODE_ENV变量值为production时，不会自动下载模块到node_modules目录中。</span><br></pre></td></tr></table></figure></div><ul><li>修改webpack.config.js</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: <span class="string">'./src/main.js'</span>,</span><br><span class="line">    output:&#123;</span><br><span class="line">        path: path.resolve(__dirname,<span class="string">'./dist'</span>),</span><br><span class="line">        filename: <span class="string">'bundle.js'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>:&#123;</span><br><span class="line">rules:[</span><br><span class="line">&#123;</span><br><span class="line">test:<span class="regexp">/\.css$/</span>,</span><br><span class="line">use:[<span class="string">'style-loader'</span>,<span class="string">'css-loader'</span>]</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><ul><li>在src文件夹创建css文件夹,css文件夹下创建css1</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">css</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ul><li>修改main.js ，引入css1.css</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">'./css/css1.css'</span>)</span><br></pre></td></tr></table></figure></div><ul><li>重新webpack一下</li></ul><h4 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h4><h5 id="vscode-Chrome-debug插件"><a href="#vscode-Chrome-debug插件" class="headerlink" title="vscode Chrome-debug插件"></a>vscode Chrome-debug插件</h5><blockquote><p>在launch.json中添加</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang"></div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">, &#123;</span><br><span class="line">        "name": "使用本机 Chrome 调试",</span><br><span class="line">        "type": "chrome",</span><br><span class="line">        "request": "launch",</span><br><span class="line">         "file": "$&#123;workspaceRoot&#125;/index.html",</span><br><span class="line">    <span class="comment">//  "url": "http://mysite.com/index.html", //使用外部服务器时,请注释掉 file, 改用 url, 并将 useBuildInServer 设置为 false "http://mysite.com/index.html</span></span><br><span class="line">        "runtimeExecutable": "C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe", // 改成您的 Chrome 安装路径</span><br><span class="line">        "sourceMaps": true,</span><br><span class="line">        "webRoot": "$&#123;workspaceRoot&#125;",</span><br><span class="line">    <span class="comment">//  "preLaunchTask":"build",</span></span><br><span class="line">        "userDataDir":"$&#123;tmpdir&#125;",</span><br><span class="line">        "port":5433</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CNN神经网络--手写数字识别</title>
      <link href="/2019/04/16/CNN%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C-%E6%89%8B%E5%86%99%E6%95%B0%E5%AD%97%E8%AF%86%E5%88%AB/"/>
      <url>/2019/04/16/CNN%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C-%E6%89%8B%E5%86%99%E6%95%B0%E5%AD%97%E8%AF%86%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="CNN神经网络–手写数字识别"><a href="#CNN神经网络–手写数字识别" class="headerlink" title="CNN神经网络–手写数字识别"></a>CNN神经网络–手写数字识别</h1><p><a href="http://myfile.buildworld.cn/%E6%89%8B%E5%86%99%E6%95%B0%E5%AD%97.jpg" data-fancybox="group" data-caption="训练流程图" class="fancybox"><img alt="训练流程图" title="训练流程图" data-src="http://myfile.buildworld.cn/%E6%89%8B%E5%86%99%E6%95%B0%E5%AD%97.jpg" class="lazyload"></a></p><h3 id="引入包"><a href="#引入包" class="headerlink" title="引入包"></a>引入包</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br></pre></td></tr></table></figure></div><h3 id="下载并载入-MNIST-手写数字库（55000-28-28）55000-张训练图像"><a href="#下载并载入-MNIST-手写数字库（55000-28-28）55000-张训练图像" class="headerlink" title="下载并载入 MNIST 手写数字库（55000 * 28 * 28）55000 张训练图像"></a>下载并载入 MNIST 手写数字库（55000 * 28 * 28）55000 张训练图像</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tensorflow.examples.tutorials.mnist <span class="keyword">import</span> input_data</span><br><span class="line">mnist = input_data.read_data_sets(<span class="string">'mnist_data'</span>, one_hot=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">input_x = tf.placeholder(tf.float32,[<span class="literal">None</span>,<span class="number">28</span>*<span class="number">28</span>])/<span class="number">255</span></span><br><span class="line">output_y = tf.placeholder(tf.int32,[<span class="literal">None</span>,<span class="number">10</span>])</span><br><span class="line">input_x_images = tf.reshape(input_x,[<span class="number">-1</span>,<span class="number">28</span>,<span class="number">28</span>,<span class="number">1</span>])</span><br></pre></td></tr></table></figure></div><h3 id="从Test数据集里选取3000个手写数字的图片和对应标签"><a href="#从Test数据集里选取3000个手写数字的图片和对应标签" class="headerlink" title="从Test数据集里选取3000个手写数字的图片和对应标签"></a>从Test数据集里选取3000个手写数字的图片和对应标签</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">test_x = mnist.test.images[:<span class="number">3000</span>]</span><br><span class="line">test_y = mnist.test.labels[:<span class="number">3000</span>]</span><br></pre></td></tr></table></figure></div><h2 id="构建我们的卷积神经网络"><a href="#构建我们的卷积神经网络" class="headerlink" title="构建我们的卷积神经网络"></a>构建我们的卷积神经网络</h2><h3 id="第1层卷积"><a href="#第1层卷积" class="headerlink" title="第1层卷积"></a>第1层卷积</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">conv1  = tf.layers.conv2d(</span><br><span class="line">    inputs = input_x_images,</span><br><span class="line">    filters = <span class="number">32</span>,</span><br><span class="line">    kernel_size=[<span class="number">5</span>,<span class="number">5</span>],</span><br><span class="line">    strides=<span class="number">1</span>,</span><br><span class="line">    padding=<span class="string">'same'</span>,</span><br><span class="line">    activation=tf.nn.relu</span><br><span class="line">    )</span><br></pre></td></tr></table></figure></div><h3 id="第一层池化-亚采样"><a href="#第一层池化-亚采样" class="headerlink" title="第一层池化(亚采样)"></a>第一层池化(亚采样)</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pool1 = tf.layers.max_pooling2d(</span><br><span class="line">    inputs=conv1,</span><br><span class="line">    pool_size=[<span class="number">2</span>,<span class="number">2</span>],</span><br><span class="line">    strides=<span class="number">2</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></div><h3 id="第2层卷积"><a href="#第2层卷积" class="headerlink" title="第2层卷积"></a>第2层卷积</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">conv2  = tf.layers.conv2d(</span><br><span class="line">    inputs = pool1,</span><br><span class="line">    filters = <span class="number">64</span>,</span><br><span class="line">    kernel_size=[<span class="number">5</span>,<span class="number">5</span>],</span><br><span class="line">    strides=<span class="number">1</span>,</span><br><span class="line">    padding=<span class="string">'same'</span>,</span><br><span class="line">    activation=tf.nn.relu</span><br><span class="line">    )</span><br></pre></td></tr></table></figure></div><h3 id="第二层池化-亚采样"><a href="#第二层池化-亚采样" class="headerlink" title="第二层池化(亚采样)"></a>第二层池化(亚采样)</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pool2 = tf.layers.max_pooling2d(</span><br><span class="line">    inputs=conv2,</span><br><span class="line">    pool_size=[<span class="number">2</span>,<span class="number">2</span>],</span><br><span class="line">    strides=<span class="number">2</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></div><h3 id="平坦化（flat）"><a href="#平坦化（flat）" class="headerlink" title="平坦化（flat）"></a>平坦化（flat）</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flat = tf.reshape(pool2,[<span class="number">-1</span>,<span class="number">7</span>*<span class="number">7</span>*<span class="number">64</span>])</span><br></pre></td></tr></table></figure></div><h3 id="1024个神经元的全连接层"><a href="#1024个神经元的全连接层" class="headerlink" title="1024个神经元的全连接层"></a>1024个神经元的全连接层</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dense = tf.layers.dense(inputs=flat,units=<span class="number">1024</span>,activation=tf.nn.relu)</span><br></pre></td></tr></table></figure></div><h3 id="Dropout-丢弃50"><a href="#Dropout-丢弃50" class="headerlink" title="Dropout 丢弃50%"></a>Dropout 丢弃50%</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dropout = tf.layers.dropout(inputs=dense,rate=<span class="number">0.5</span>)</span><br></pre></td></tr></table></figure></div><h3 id="10个神经元的全连接层，这里不用激活函数来做非线性化"><a href="#10个神经元的全连接层，这里不用激活函数来做非线性化" class="headerlink" title="10个神经元的全连接层，这里不用激活函数来做非线性化"></a>10个神经元的全连接层，这里不用激活函数来做非线性化</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logits = tf.layers.dense(inputs=dropout,units=<span class="number">10</span>) <span class="comment">#最终输出[1,1,10]</span></span><br></pre></td></tr></table></figure></div><h3 id="计算误差（计算Cross-entropy-交叉熵-，再用Softmax计算百分比概率）"><a href="#计算误差（计算Cross-entropy-交叉熵-，再用Softmax计算百分比概率）" class="headerlink" title="计算误差（计算Cross entropy(交叉熵)，再用Softmax计算百分比概率）"></a>计算误差（计算Cross entropy(交叉熵)，再用Softmax计算百分比概率）</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">loss = tf.losses.softmax_cross_entropy(onehot_labels=output_y,logits=logits)</span><br></pre></td></tr></table></figure></div><h3 id="Adam优化器来最小化误差，学习率0-001"><a href="#Adam优化器来最小化误差，学习率0-001" class="headerlink" title="Adam优化器来最小化误差，学习率0.001"></a>Adam优化器来最小化误差，学习率0.001</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">train_op = tf.train.AdamOptimizer(learning_rate=<span class="number">0.001</span>).minimize(loss)</span><br></pre></td></tr></table></figure></div><h3 id="精度。计算-预测值和实际标签的匹配程度"><a href="#精度。计算-预测值和实际标签的匹配程度" class="headerlink" title="精度。计算 预测值和实际标签的匹配程度"></a>精度。计算 预测值和实际标签的匹配程度</h3><h3 id="返回（accuracy-update-op），会创建两个局部变量"><a href="#返回（accuracy-update-op），会创建两个局部变量" class="headerlink" title="返回（accuracy,update_op），会创建两个局部变量"></a>返回（accuracy,update_op），会创建两个局部变量</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">accuracy = tf.metrics.accuracy(</span><br><span class="line">    labels=tf.argmax(output_y,axis=<span class="number">1</span>),</span><br><span class="line">    predictions=tf.argmax(logits,axis=<span class="number">1</span>),)[<span class="number">1</span>]</span><br></pre></td></tr></table></figure></div><h3 id="创建回话"><a href="#创建回话" class="headerlink" title="创建回话"></a>创建回话</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sess = tf.Session()</span><br></pre></td></tr></table></figure></div><h3 id="初始化变量：-全局和局部变量"><a href="#初始化变量：-全局和局部变量" class="headerlink" title="初始化变量： 全局和局部变量"></a>初始化变量： 全局和局部变量</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">init = tf.group(tf.global_variables_initializer(),tf.local_variables_initializer())</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sess.run(init)</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000</span>):</span><br><span class="line">    batch = mnist.train.next_batch(<span class="number">50</span>)  <span class="comment"># 从 Train（训练）数据集里取 “下一个” 50 个样本</span></span><br><span class="line">    train_loss, train_op_= sess.run([loss, train_op], &#123;input_x: batch[<span class="number">0</span>], output_y: batch[<span class="number">1</span>]&#125;)</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">100</span> == <span class="number">0</span>:</span><br><span class="line">        test_accuracy = sess.run(accuracy, &#123;input_x: test_x, output_y: test_y&#125;)</span><br><span class="line">        print(<span class="string">"第 &#123;&#125; 步的 训练损失=&#123;:.4f&#125;, 测试精度=&#123;:.2f&#125;"</span>.format(i, train_loss, test_accuracy))</span><br></pre></td></tr></table></figure></div><pre><code>第 0 步的 训练损失=0.0216, 测试精度=0.94第 100 步的 训练损失=0.0251, 测试精度=0.94第 200 步的 训练损失=0.1048, 测试精度=0.94第 300 步的 训练损失=0.1411, 测试精度=0.94第 400 步的 训练损失=0.0009, 测试精度=0.94第 500 步的 训练损失=0.0154, 测试精度=0.94第 600 步的 训练损失=0.0005, 测试精度=0.95第 700 步的 训练损失=0.0208, 测试精度=0.95第 800 步的 训练损失=0.0017, 测试精度=0.95第 900 步的 训练损失=0.0006, 测试精度=0.95</code></pre><h3 id="测试：打印20个预测值和真实值的对"><a href="#测试：打印20个预测值和真实值的对" class="headerlink" title="测试：打印20个预测值和真实值的对"></a>测试：打印20个预测值和真实值的对</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">test_output = sess.run(logits,&#123;input_x:test_x[:<span class="number">20</span>]&#125;)</span><br><span class="line">inferenced_y = np.argmax(test_output,<span class="number">1</span>)</span><br><span class="line">print(inferenced_y,<span class="string">"Inferenced numbers"</span>) <span class="comment">#推测的数字</span></span><br><span class="line">print(np.argmax(test_y[:<span class="number">20</span>],<span class="number">1</span>),<span class="string">"Real numbers"</span>) <span class="comment">#真实的数字</span></span><br></pre></td></tr></table></figure></div><pre><code>[7 2 1 0 4 1 4 9 5 9 0 6 9 0 1 5 9 7 8 4] Inferenced numbers[7 2 1 0 4 1 4 9 5 9 0 6 9 0 1 5 9 7 3 4] Real numbers</code></pre><h3 id="完整代码："><a href="#完整代码：" class="headerlink" title="完整代码："></a>完整代码：</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载并载入 MNIST 手写数字库（55000 * 28 * 28）55000 张训练图像</span></span><br><span class="line"><span class="keyword">from</span> tensorflow.examples.tutorials.mnist <span class="keyword">import</span> input_data</span><br><span class="line">mnist = input_data.read_data_sets(<span class="string">'mnist_data'</span>, one_hot=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># one_hot 独热码的编码（encoding）形式</span></span><br><span class="line"><span class="comment"># 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 的十位数字</span></span><br><span class="line"><span class="comment"># 0 : 1000000000</span></span><br><span class="line"><span class="comment"># 1 : 0100000000</span></span><br><span class="line"><span class="comment"># 2 : 0010000000</span></span><br><span class="line"><span class="comment"># 3 : 0001000000</span></span><br><span class="line"><span class="comment"># 4 : 0000100000</span></span><br><span class="line"><span class="comment"># 5 : 0000010000</span></span><br><span class="line"><span class="comment"># 6 : 0000001000</span></span><br><span class="line"><span class="comment"># 7 : 0000000100</span></span><br><span class="line"><span class="comment"># 8 : 0000000010</span></span><br><span class="line"><span class="comment"># 9 : 0000000001</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># None 表示张量（Tensor）的第一个维度可以是任何长度</span></span><br><span class="line"><span class="comment"># 除以 255 是为了做 归一化（Normalization），把灰度值从 [0, 255] 变成 [0, 1] 区间</span></span><br><span class="line"><span class="comment"># 归一话可以让之后的优化器（optimizer）更快更好地找到误差最小值</span></span><br><span class="line">input_x = tf.placeholder(tf.float32, [<span class="literal">None</span>, <span class="number">28</span> * <span class="number">28</span>]) / <span class="number">255.</span>  <span class="comment"># 输入</span></span><br><span class="line"></span><br><span class="line">output_y = tf.placeholder(tf.int32, [<span class="literal">None</span>, <span class="number">10</span>])  <span class="comment"># 输出：10个数字的标签</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -1 表示自动推导维度大小。让计算机根据其他维度的值</span></span><br><span class="line"><span class="comment"># 和总的元素大小来推导出 -1 的地方的维度应该是多少</span></span><br><span class="line">input_x_images = tf.reshape(input_x, [<span class="number">-1</span>, <span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>])  <span class="comment"># 改变形状之后的输入</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 从 Test（测试）数据集里选取 3000 个手写数字的图片和对应标签</span></span><br><span class="line">test_x = mnist.test.images[:<span class="number">3000</span>]  <span class="comment"># 图片</span></span><br><span class="line">test_y = mnist.test.labels[:<span class="number">3000</span>]  <span class="comment"># 标签</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建我们的卷积神经网络：</span></span><br><span class="line"><span class="comment"># 第 1 层卷积</span></span><br><span class="line">conv1 = tf.layers.conv2d(</span><br><span class="line">    inputs=input_x_images,  <span class="comment"># 形状 [28, 28, 1]</span></span><br><span class="line">    filters=<span class="number">32</span>,             <span class="comment"># 32 个过滤器，输出的深度（depth）是32</span></span><br><span class="line">    kernel_size=[<span class="number">5</span>, <span class="number">5</span>],     <span class="comment"># 过滤器在二维的大小是 (5 * 5)</span></span><br><span class="line">    strides=<span class="number">1</span>,              <span class="comment"># 步长是 1</span></span><br><span class="line">    padding=<span class="string">'same'</span>,         <span class="comment"># same 表示输出的大小不变，因此需要在外围补零 2 圈</span></span><br><span class="line">    activation=tf.nn.relu   <span class="comment"># 激活函数是 Relu</span></span><br><span class="line">)  <span class="comment"># 形状 [28, 28, 32]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第 1 层池化（亚采样）</span></span><br><span class="line">pool1 = tf.layers.max_pooling2d(</span><br><span class="line">    inputs=conv1,      <span class="comment"># 形状 [28, 28, 32]</span></span><br><span class="line">    pool_size=[<span class="number">2</span>, <span class="number">2</span>],  <span class="comment"># 过滤器在二维的大小是（2 * 2）</span></span><br><span class="line">    strides=<span class="number">2</span>          <span class="comment"># 步长是 2</span></span><br><span class="line">)  <span class="comment"># 形状 [14, 14, 32]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第 2 层卷积</span></span><br><span class="line">conv2 = tf.layers.conv2d(</span><br><span class="line">    inputs=pool1,          <span class="comment"># 形状 [14, 14, 32]</span></span><br><span class="line">    filters=<span class="number">64</span>,            <span class="comment"># 64 个过滤器，输出的深度（depth）是64</span></span><br><span class="line">    kernel_size=[<span class="number">5</span>, <span class="number">5</span>],    <span class="comment"># 过滤器在二维的大小是 (5 * 5)</span></span><br><span class="line">    strides=<span class="number">1</span>,             <span class="comment"># 步长是 1</span></span><br><span class="line">    padding=<span class="string">'same'</span>,        <span class="comment"># same 表示输出的大小不变，因此需要在外围补零 2 圈</span></span><br><span class="line">    activation=tf.nn.relu  <span class="comment"># 激活函数是 Relu</span></span><br><span class="line">)  <span class="comment"># 形状 [14, 14, 64]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第 2 层池化（亚采样）</span></span><br><span class="line">pool2 = tf.layers.max_pooling2d(</span><br><span class="line">    inputs=conv2,      <span class="comment"># 形状 [14, 14, 64]</span></span><br><span class="line">    pool_size=[<span class="number">2</span>, <span class="number">2</span>],  <span class="comment"># 过滤器在二维的大小是（2 * 2）</span></span><br><span class="line">    strides=<span class="number">2</span>          <span class="comment"># 步长是 2</span></span><br><span class="line">)  <span class="comment"># 形状 [7, 7, 64]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 平坦化（flat）。降维</span></span><br><span class="line">flat = tf.reshape(pool2, [<span class="number">-1</span>, <span class="number">7</span> * <span class="number">7</span> * <span class="number">64</span>])  <span class="comment"># 形状 [7 * 7 * 64, ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1024 个神经元的全连接层</span></span><br><span class="line">dense = tf.layers.dense(inputs=flat, units=<span class="number">1024</span>, activation=tf.nn.relu)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Dropout : 丢弃 50%（rate=0.5）</span></span><br><span class="line">dropout = tf.layers.dropout(inputs=dense, rate=<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 10 个神经元的全连接层，这里不用激活函数来做非线性化了</span></span><br><span class="line">logits = tf.layers.dense(inputs=dropout, units=<span class="number">10</span>)  <span class="comment"># 输出。形状 [1, 1, 10]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算误差（先用 Softmax 计算百分比概率，</span></span><br><span class="line"><span class="comment"># 再用 Cross entropy（交叉熵）来计算百分比概率和对应的独热码之间的误差）</span></span><br><span class="line">loss = tf.losses.softmax_cross_entropy(onehot_labels=output_y, logits=logits)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Adam 优化器来最小化误差，学习率 0.001</span></span><br><span class="line">train_op = tf.train.AdamOptimizer(learning_rate=<span class="number">0.001</span>).minimize(loss)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 精度。计算 预测值 和 实际标签 的匹配程度</span></span><br><span class="line"><span class="comment"># 返回 (accuracy, update_op), 会创建两个 局部变量</span></span><br><span class="line">accuracy = tf.metrics.accuracy(</span><br><span class="line">    labels=tf.argmax(output_y, axis=<span class="number">1</span>),</span><br><span class="line">    predictions=tf.argmax(logits, axis=<span class="number">1</span>),)[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建会话</span></span><br><span class="line">sess = tf.Session()</span><br><span class="line"><span class="comment"># 初始化变量：全局和局部</span></span><br><span class="line">init = tf.group(tf.global_variables_initializer(), tf.local_variables_initializer())</span><br><span class="line">sess.run(init)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 训练 5000 步。这个步数可以调节</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5000</span>):</span><br><span class="line">    batch = mnist.train.next_batch(<span class="number">50</span>)  <span class="comment"># 从 Train（训练）数据集里取 “下一个” 50 个样本</span></span><br><span class="line">    train_loss, train_op_ = sess.run([loss, train_op], &#123;input_x: batch[<span class="number">0</span>], output_y: batch[<span class="number">1</span>]&#125;)</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">100</span> == <span class="number">0</span>:</span><br><span class="line">        test_accuracy = sess.run(accuracy, &#123;input_x: test_x, output_y: test_y&#125;)</span><br><span class="line">        print(<span class="string">"第 &#123;&#125; 步的 训练损失=&#123;:.4f&#125;, 测试精度=&#123;:.2f&#125;"</span>.format(i, train_loss, test_accuracy))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试：打印 20 个预测值 和 真实值</span></span><br><span class="line">test_output = sess.run(logits, &#123;input_x: test_x[:<span class="number">20</span>]&#125;)</span><br><span class="line">inferred_y = np.argmax(test_output, <span class="number">1</span>)</span><br><span class="line">print(inferred_y, <span class="string">'推测的数字'</span>)  <span class="comment"># 推测的数字</span></span><br><span class="line">print(np.argmax(test_y[:<span class="number">20</span>], <span class="number">1</span>), <span class="string">'真实的数字'</span>)  <span class="comment"># 真实的数字</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭会话</span></span><br><span class="line">sess.close()</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> 人工智能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CNN </tag>
            
            <tag> TensorFlow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot微服务架构项目--Union社交平台</title>
      <link href="/2019/02/10/SpringBoot%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E9%A1%B9%E7%9B%AE-Union%E7%A4%BE%E4%BA%A4%E5%B9%B3%E5%8F%B0/"/>
      <url>/2019/02/10/SpringBoot%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E9%A1%B9%E7%9B%AE-Union%E7%A4%BE%E4%BA%A4%E5%B9%B3%E5%8F%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><a href="https://file.buildworld.cn/img/6dc7724665fb0fa34d8d2872f6b40d22_224859_0cf8011f_759177.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://file.buildworld.cn/img/6dc7724665fb0fa34d8d2872f6b40d22_224859_0cf8011f_759177.png" class="lazyload"></a><br><a href="https://gitee.com/union_project/union_parent" target="_blank" rel="noopener">Gitee项目地址</a></p><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><blockquote><p>本项目是采用Spring全家桶的java后端框架，采用目前WEB端比较流行的前后端分离的开发方式，后端采用微服务架构思想，将业务各个拆分出来，通过SpringCloud微服务框架将各个微服务业务连接起来，使得项目业务之间独立运行，在服务部署和运行时不会相互影响。</p></blockquote><h4 id="一、系统概况"><a href="#一、系统概况" class="headerlink" title="一、系统概况"></a>一、系统概况</h4><h5 id="1、系统技术栈示意图"><a href="#1、系统技术栈示意图" class="headerlink" title="1、系统技术栈示意图"></a>1、系统技术栈示意图</h5><p><a href="http://myfile.buildworld.cn/224859_801038ac_759177.jpeg" data-fancybox="group" data-caption="系统技术栈示意图" class="fancybox"><img alt="系统技术栈示意图" title="系统技术栈示意图" data-src="http://myfile.buildworld.cn/224859_801038ac_759177.jpeg" class="lazyload"></a></p><h5 id="2、后端系统架构图"><a href="#2、后端系统架构图" class="headerlink" title="2、后端系统架构图"></a>2、后端系统架构图</h5><p><a href="http://myfile.buildworld.cn/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E5%9B%BE%E6%96%B0.png" data-fancybox="group" data-caption="后端系统架构图" class="fancybox"><img alt="后端系统架构图" title="后端系统架构图" data-src="http://myfile.buildworld.cn/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E5%9B%BE%E6%96%B0.png" class="lazyload"></a></p><h5 id="3、后台微服务系统"><a href="#3、后台微服务系统" class="headerlink" title="3、后台微服务系统"></a>3、后台微服务系统</h5><table><thead><tr><th>微服务系统</th><th>名称</th><th>端口</th></tr></thead><tbody><tr><td>union_config</td><td>配置服务器</td><td>12000</td></tr><tr><td>union_eureka</td><td>Eureka服务器</td><td>8110</td></tr><tr><td>union-base</td><td>基础服务器</td><td>9001</td></tr><tr><td>union-recruit</td><td>招聘服务器</td><td>9002</td></tr><tr><td>union-qa</td><td>用户问题服务器</td><td>9003</td></tr><tr><td>union-article</td><td>文章服务器</td><td>9004</td></tr><tr><td>union-gathering</td><td>用户活动服务器</td><td>9005</td></tr><tr><td>union-spit</td><td>用户吐槽服务器</td><td>9006</td></tr><tr><td>union-search</td><td>ES搜索服务器</td><td>9007</td></tr><tr><td>union-user</td><td>用户服务器</td><td>9008</td></tr><tr><td>union-friend</td><td>交友服务器</td><td>9009</td></tr><tr><td>union-manager</td><td>管理员管理服务器</td><td>9010</td></tr><tr><td>union-web</td><td>用户管理服务器</td><td>9011</td></tr><tr><td>union_rabbitmqtest</td><td>RM测试服务器</td><td>8002</td></tr><tr><td>union_ai</td><td>Ai人工智能服务器</td><td>未开发</td></tr></tbody></table><h4 id="二、SpringCloud使用说明"><a href="#二、SpringCloud使用说明" class="headerlink" title="二、SpringCloud使用说明"></a>二、SpringCloud使用说明</h4><h5 id="1、主要框架"><a href="#1、主要框架" class="headerlink" title="1、主要框架"></a>1、主要框架</h5><ul><li>服务发现——Netflix Eureka</li><li>服务调用——Netflix Feign</li><li>熔断器——Netflix Hystrix</li><li>服务网关——Netflix Zuul</li><li>分布式配置——Spring Cloud Config</li><li>消息总线 —— Spring Cloud Bus</li></ul><h5 id="注意一下Cloud版本"><a href="#注意一下Cloud版本" class="headerlink" title="注意一下Cloud版本"></a>注意一下Cloud版本</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Release TrainBoot Version</span><br><span class="line">Greenwich       2.1.x</span><br><span class="line">Finchley        2.0.x</span><br><span class="line">Edgware         1.5.x</span><br><span class="line">Dalston         1.5.x</span><br></pre></td></tr></table></figure></div><h5 id="2、服务发现组件–Eureka"><a href="#2、服务发现组件–Eureka" class="headerlink" title="2、服务发现组件–Eureka"></a>2、服务发现组件–Eureka</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">  Eureka是Netflix开发的服务发现框架，SpringCloud将它集成在自己的子项目</span><br><span class="line">spring-cloud-netflix中，实现SpringCloud的服务发现功能。Eureka包含两个组件：</span><br><span class="line">  Eureka Server和Eureka Client。</span><br><span class="line">    </span><br><span class="line">  Eureka Server提供服务注册服务，各个节点启动后，会在Eureka Server中进行注</span><br><span class="line">册，这样EurekaServer中的服务注册表中将会存储所有可用服务节点的信息，服务节点</span><br><span class="line">的信息可以在界面中直观的看到。</span><br><span class="line"></span><br><span class="line">  Eureka Client是一个java客户端，用于简化与Eureka Server的交互，客户端同时也</span><br><span class="line">就别一个内置的、使用轮询(round-robin)负载算法的负载均衡器。在应用启动后，将会</span><br><span class="line">向Eureka Server发送心跳,默认周期为30秒，如果Eureka Server在多个心跳周期内没有</span><br><span class="line">接收到某个节点的心跳，Eureka Server将会从服务注册表中把这个服务节点移除(默认90</span><br><span class="line">秒)。</span><br><span class="line"></span><br><span class="line">  Eureka Server之间通过复制的方式完成数据的同步，Eureka还提供了客户端缓存机</span><br><span class="line">制，即使所有的Eureka Server都挂掉，客户端依然可以利用缓存中的信息消费其他服务</span><br><span class="line">的API。综上，Eureka通过心跳检查、客户端缓存等机制，确保了系统的高可用性、灵活</span><br><span class="line">性和可伸缩性。</span><br></pre></td></tr></table></figure></div><blockquote><p>下面是项目全部跑起来的结果</p></blockquote><p><a href="https://images.gitee.com/uploads/images/2019/0202/224900_36c8b6c3_759177.jpeg" data-fancybox="group" data-caption="Eureka服务器" class="fancybox"><img alt="Eureka服务器" title="Eureka服务器" data-src="https://images.gitee.com/uploads/images/2019/0202/224900_36c8b6c3_759177.jpeg" class="lazyload"></a></p><h5 id="3、服务间调用组件–Feign"><a href="#3、服务间调用组件–Feign" class="headerlink" title="3、服务间调用组件–Feign"></a>3、服务间调用组件–Feign</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">  Feign是简化Java HTTP客户端开发的工具（java-to-httpclient-binder），它的灵感</span><br><span class="line">来自于Retrofit、JAXRS-2.0和WebSocket。Feign的初衷是降低统一绑定Denominator到</span><br><span class="line">HTTP API的复杂度，不区分是否为restful。</span><br></pre></td></tr></table></figure></div><h5 id="4、熔断器Hystrix"><a href="#4、熔断器Hystrix" class="headerlink" title="4、熔断器Hystrix"></a>4、熔断器Hystrix</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  在微服务架构中通常会有多个服务层调用，基础服务的故障可能会导致级联故障，进而</span><br><span class="line">造成整个系统不可用的情况，这种现象被称为服务雪崩效应。服务雪崩效应是一种</span><br><span class="line">因“服务提供者”的不可用导致“服务消费者”的不可用,并将不可用逐渐放大的过程。</span><br><span class="line"></span><br><span class="line">  Hystrix 能使你的系统在出现依赖服务失效的时候，通过隔离系统所依赖的服务，防</span><br><span class="line">止服务级联失败，同时提供失败回退机制，更优雅地应对失效，并使你的系统能更快地</span><br><span class="line">从异常中恢复。</span><br></pre></td></tr></table></figure></div><h5 id="5、微服务网关Zuul"><a href="#5、微服务网关Zuul" class="headerlink" title="5、微服务网关Zuul"></a>5、微服务网关Zuul</h5><blockquote><p>Zuul是Netflix开源的微服务网关，他可以和Eureka,Ribbon,Hystrix等组件配合使<br>用。<br>Zuul组件的核心是一系列的过滤器，这些过滤器可以完成以下功能：</p></blockquote><ul><li>身份认证和安全: 识别每一个资源的验证要求，并拒绝那些不符的请求</li><li>审查与监控：</li><li>动态路由：动态将请求路由到不同后端集群</li><li>压力测试：逐渐增加指向集群的流量，以了解性能</li><li>负载分配：为每一种负载类型分配对应容量，并弃用超出限定值的请求</li><li>静态响应处理：边缘位置进行响应，避免转发到内部集群</li><li>多区域弹性：跨域AWS Region进行请求路由，旨在实现ELB(ElasticLoad Balancing)使用多样化</li></ul><h5 id="6、微服务配置文件集中管理Spring-Cloud-Config"><a href="#6、微服务配置文件集中管理Spring-Cloud-Config" class="headerlink" title="6、微服务配置文件集中管理Spring Cloud Config"></a>6、微服务配置文件集中管理Spring Cloud Config</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">  在分布式系统中，由于服务数量巨多，为了方便服务配置文件统一管理，实时更新，所</span><br><span class="line">以需要分布式配置中心组件。在Spring Cloud中，有分布式配置中心组件spring cloud</span><br><span class="line">config ，它支持配置服务放在配置服务的内存中（即本地），也支持放在远程Git仓库</span><br><span class="line">中。在spring cloud config 组件中，分两个角色，一是config server，二是config</span><br><span class="line">client。</span><br><span class="line">  Config Server是一个可横向扩展、集中式的配置服务器，它用于集中管理应用程序各个</span><br><span class="line">环境下的配置，默认使用Git存储配置文件内容，也可以使用SVN存储，或者是本地文件</span><br><span class="line">存储。</span><br><span class="line">  Config Client是Config Server的客户端，用于操作存储在Config Server中的配置内容。</span><br><span class="line">  微服务在启动时会请求Config Server获取配置文件的内容，请求到后再启动容器。</span><br><span class="line">详细内容看在线文档： https:&#x2F;&#x2F;springcloud.cc&#x2F;spring-cloud-config.html</span><br></pre></td></tr></table></figure></div><h5 id="7、消息总线组件SpringCloudBus"><a href="#7、消息总线组件SpringCloudBus" class="headerlink" title="7、消息总线组件SpringCloudBus"></a>7、消息总线组件SpringCloudBus</h5><blockquote><p>可以用于动态修改各个微服务系统的配置文件，而不要重新启动微服务</p></blockquote><h4 id="三、系统运维"><a href="#三、系统运维" class="headerlink" title="三、系统运维"></a>三、系统运维</h4><h5 id="1、新建一个Mysql服务器容器"><a href="#1、新建一个Mysql服务器容器" class="headerlink" title="1、新建一个Mysql服务器容器"></a>1、新建一个Mysql服务器容器</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -di --name&#x3D;union_mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD&#x3D;root centos&#x2F;mysql-57-centos7</span><br></pre></td></tr></table></figure></div><h5 id="2、新建一个redis服务器"><a href="#2、新建一个redis服务器" class="headerlink" title="2、新建一个redis服务器"></a>2、新建一个redis服务器</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -di --name&#x3D;union_redis -p 6379:6379 redis</span><br></pre></td></tr></table></figure></div><h5 id="3、elasticsearch容器"><a href="#3、elasticsearch容器" class="headerlink" title="3、elasticsearch容器"></a>3、elasticsearch容器</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker run -di --name&#x3D;es -p 5601:5601 -p 9200:9200 nshou&#x2F;elasticsearch-kibana</span><br><span class="line">带挂载文件的创建方式</span><br><span class="line">docker run -di --name&#x3D;union_es -p 9200:9200 -p 9300:9300 -v &#x2F;usr&#x2F;local&#x2F;es&#x2F;elasticsearch.yml:&#x2F;usr&#x2F;share&#x2F;elasticsearch&#x2F;config&#x2F;elasticsearch.yml elasticsearch:5.6.8</span><br></pre></td></tr></table></figure></div><blockquote><p>head安装</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker -di --name&#x3D;union_eshead -p 9100:9100 mobz&#x2F;elasticsearch-head:5</span><br></pre></td></tr></table></figure></div><h5 id="4、导出某个容器"><a href="#4、导出某个容器" class="headerlink" title="4、导出某个容器"></a>4、导出某个容器</h5><blockquote><p>导出某个容器，非常简单，使用docker export命令，语法：docker export $container_id &gt; 容器快照名</p></blockquote><h5 id="5、导入某个容器–docker-import命令"><a href="#5、导入某个容器–docker-import命令" class="headerlink" title="5、导入某个容器–docker import命令"></a>5、导入某个容器–docker import命令</h5><blockquote><p>有了容器快照之后，我们可以在想要的时候随时导入。导入快照使用docker import命令。<br>例如我们可以使用cat centos.tar | docker import - my/centos:v888 导入容器快照作为镜像</p></blockquote><blockquote><p>镜像保存/载入：docker load/docker save；将一个镜像导出为文件，再使用docker load命令将文件导入为一个镜像，会保存该镜像的的所有历史记录。比docker export命令导出的文件大，很好理解，因为会保存镜像的所有历史记录。<br>容器导入/导出：docker import/docker export；将一个容器导出为文件，再使用docker import命令将容器导入成为一个新的镜像，但是相比docker save命令，容器文件会丢失所有元数据和历史记录，仅保存容器当时的状态，相当于虚拟机快照。</p></blockquote><h5 id="6、rabbitMq创建"><a href="#6、rabbitMq创建" class="headerlink" title="6、rabbitMq创建"></a>6、rabbitMq创建</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -di --name=union_rm -p 5671:5617 -p 5672:5672 -p 4369:4369 -p 15671:15671 -p 15672:15672 -p 25672:25672 rabbitmq:management</span><br></pre></td></tr></table></figure></div><h5 id="7、创建私有仓库容器"><a href="#7、创建私有仓库容器" class="headerlink" title="7、创建私有仓库容器"></a>7、创建私有仓库容器</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run -di --name&#x3D;registry -p 5000:5000 registry</span><br><span class="line">&#123;&quot;registry-mirrors&quot;:[&quot;https:&#x2F;&#x2F;docker.mirrors.ustc.edu.cn&quot;],&quot;insecure-registries&quot;:[&quot;192.168.255.128:5000&quot;]&#125;</span><br><span class="line">刷新配置systemctl daemon-reload</span><br><span class="line">通过Maven插件自动部署。</span><br><span class="line">对于数量众多的微服务，手动部署无疑是非常麻烦的做法，并且容易出错。所以我们这</span><br><span class="line">里学习如何自动部署，这也是企业实际开发中经常使用的方法。</span><br></pre></td></tr></table></figure></div><h5 id="8、Maven插件自动部署步骤："><a href="#8、Maven插件自动部署步骤：" class="headerlink" title="8、Maven插件自动部署步骤："></a>8、Maven插件自动部署步骤：</h5><h6 id="（1）修改宿主机的docker配置，让其可以远程访问"><a href="#（1）修改宿主机的docker配置，让其可以远程访问" class="headerlink" title="（1）修改宿主机的docker配置，让其可以远程访问"></a>（1）修改宿主机的docker配置，让其可以远程访问</h6><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /lib/systemd/system/docker.service</span><br></pre></td></tr></table></figure></div><blockquote><p>其中ExecStart=后添加配置 -H tcp://0.0.0.0:2375 -H unix:///var/run/docker.sock</p></blockquote><h6 id="（2）修改pom-xml文件，添加插件"><a href="#（2）修改pom-xml文件，添加插件" class="headerlink" title="（2）修改pom.xml文件，添加插件"></a>（2）修改pom.xml文件，添加插件</h6> <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>config<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!-- docker的maven插件，官网 https://github.com/spotify/docker-maven-plugin --&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.spotify<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>docker-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.4.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">imageName</span>&gt;</span>192.168.255.128:5000/$&#123;project.artifactId&#125;:$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">imageName</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">baseImage</span>&gt;</span>jdk1.8<span class="tag">&lt;/<span class="name">baseImage</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">entryPoint</span>&gt;</span>["java", "-jar","/$&#123;project.build.finalName&#125;.jar"]<span class="tag">&lt;/<span class="name">entryPoint</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                           <span class="tag">&lt;<span class="name">targetPath</span>&gt;</span>/<span class="tag">&lt;/<span class="name">targetPath</span>&gt;</span></span><br><span class="line">                           <span class="tag">&lt;<span class="name">directory</span>&gt;</span>$&#123;project.build.directory&#125;<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                           <span class="tag">&lt;<span class="name">include</span>&gt;</span>$&#123;project.build.finalName&#125;.jar<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">dockerHost</span>&gt;</span>http://192.168.255.128:2375<span class="tag">&lt;/<span class="name">dockerHost</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure></div><h5 id="9、Gogs安装与配置"><a href="#9、Gogs安装与配置" class="headerlink" title="9、Gogs安装与配置"></a>9、Gogs安装与配置</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker pull gogs/gogs</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mkdir -p /var/gogs</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker run -di --name=gogs -p 10022:22 -p 3000:3000 -v /var/gogsdata:/data gogs/gogs</span></span><br></pre></td></tr></table></figure></div><h5 id="10、容器管理工具Rancher"><a href="#10、容器管理工具Rancher" class="headerlink" title="10、容器管理工具Rancher"></a>10、容器管理工具Rancher</h5><blockquote><p>Rancher是一个开源的企业级全栈化容器部署及管理平台。Rancher为容器提供一揽<br>子基础架构服务：CNI兼容的网络服务、存储服务、主机管理、负载均衡、防护墙……<br>Rancher让上述服务跨越公有云、私有云、虚拟机、物理机环境运行，真正实现一键式应<br>用部署和管理。</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name=rancher --restart=always -p 9090:8080 rancher/server</span><br></pre></td></tr></table></figure></div><h5 id="11、influxDB监控"><a href="#11、influxDB监控" class="headerlink" title="11、influxDB监控"></a>11、influxDB监控</h5><blockquote><p>influxDB是一个分布式时间序列数据库。cAdvisor仅仅显示实时信息，但是不存储<br>监视数据。因此，我们需要提供时序数据库用于存储cAdvisor组件所提供的监控信息，<br>以便显示除实时信息之外的时序数据。</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -di -p 8083:8083 -p 8086:8086 --expose 8090 --expose 8099 --name influxsrv tutum/influxdb</span><br></pre></td></tr></table></figure></div><p>端口概述： 8083端口:web访问端口 8086:数据写入端口</p><h6 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h6><ul><li>创建数据库<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE &quot;cadvisor&quot;</span><br></pre></td></tr></table></figure></div><h5 id="12、cAdvisor"><a href="#12、cAdvisor" class="headerlink" title="12、cAdvisor"></a>12、cAdvisor</h5><blockquote><p>Google开源的用于监控基础设施应用的工具，它是一个强大的监控工具，不需要任<br>何配置就可以通过运行在Docker主机上的容器来监控Docker容器，而且可以监控Docker<br>主机。更多详细操作和配置选项可以查看Github上的cAdvisor项目文档。</p></blockquote></li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --volume=/:/rootfs:ro --volume=/var/run:/var/run:rw --volume=/sys:/sys:ro --volume=/var/lib/docker/:/var/lib/docker:ro --publish=8080:8080 --detach=true --link influxsrv:influxsrv --name=cadvisor google/cadvisor -storage_driver=influxdb -storage_driver_db=union-db -storage_driver_host=influxsrv:8086</span><br></pre></td></tr></table></figure></div><h5 id="13、Grafana"><a href="#13、Grafana" class="headerlink" title="13、Grafana"></a>13、Grafana</h5><blockquote><p>Grafana是一个可视化面板（Dashboard），有着非常漂亮的图表和布局展示，功<br>能齐全的度量仪表盘和图形编辑器。支持Graphite、zabbix、InfluxDB、Prometheus和<br>OpenTSDB作为数据源。<br>Grafana主要特性：灵活丰富的图形化选项；可以混合多种风格；支持白天和夜间模式；<br>多个数据源。</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 3001:3000 -e INFLUXDB_HOST=influxsrv -e INFLUXDB_PORT=8086 -e INFLUXDB_NAME=cadvisor -e INFLUXDB_USER=root -e INFLUXDB_PASS=root --link influxsrv:influxsrv --name grafana grafana/grafana</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> 微服务架构 </category>
          
          <category> 服务器 </category>
          
          <category> 系统 </category>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> SpringCloud </tag>
            
            <tag> SpringDataJpa </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>轻量级文件存储系统</title>
      <link href="/2019/01/27/%E8%BD%BB%E9%87%8F%E7%BA%A7%E6%96%87%E4%BB%B6%E5%AD%98%E5%82%A8%E7%B3%BB%E7%BB%9F/"/>
      <url>/2019/01/27/%E8%BD%BB%E9%87%8F%E7%BA%A7%E6%96%87%E4%BB%B6%E5%AD%98%E5%82%A8%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="Easy-File-Upload-轻量级文件存储系统"><a href="#Easy-File-Upload-轻量级文件存储系统" class="headerlink" title="Easy File Upload 轻量级文件存储系统"></a>Easy File Upload 轻量级文件存储系统</h2><p><a href="https://gitee.com/mi_chong/EasyFileUpload/" target="_blank" rel="noopener">Gitee项目地址</a></p><p><a href="https://file.buildworld.cn/img/ea92cb20ac076f7ad36592c9609f773a_esfu_logo.png" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="https://file.buildworld.cn/img/ea92cb20ac076f7ad36592c9609f773a_esfu_logo.png" class="lazyload"></a></p><blockquote><p>此项目是后端是基于SpringBoot2.x，前端是基于layui，存储仓库是基于七牛云，开箱即用，可以上传本地和云端文件，支持MD5文件校检，防止文件重复上传。前端文件放入Nginx服务器即可，后端项目可以打包位war包，部署到tomcat服务器下即可，完全前后端分离。你可以当做图床，也可以当做网盘，存储文件。</p></blockquote><h4 id="一、测试环境"><a href="#一、测试环境" class="headerlink" title="一、测试环境"></a>一、测试环境</h4><p><a href="http://www.ai2art.com/fileupload/" target="_blank" rel="noopener">官网地址-www.ai2art.com/fileupload</a></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">前端：Nginx-1.12.0</span><br><span class="line">后端：Apache-tomcat-8.5.29</span><br><span class="line">数据库：Mysql</span><br></pre></td></tr></table></figure></div><p><a href="http://myfile.buildworld.cn/360%E6%88%AA%E5%9B%BE16751025435782.jpg" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="http://myfile.buildworld.cn/360%E6%88%AA%E5%9B%BE16751025435782.jpg" class="lazyload"></a></p><hr><h4 id="二、用户使用"><a href="#二、用户使用" class="headerlink" title="二、用户使用"></a>二、用户使用</h4><h5 id="1、单个文件上传"><a href="#1、单个文件上传" class="headerlink" title="1、单个文件上传"></a>1、单个文件上传</h5><blockquote><p>点击上传或者拖拽文件实现上传，上传完成，自动回调显示文件地址</p></blockquote><p><a href="http://myfile.buildworld.cn/360%E6%88%AA%E5%9B%BE16520817898671.jpg" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="http://myfile.buildworld.cn/360%E6%88%AA%E5%9B%BE16520817898671.jpg" class="lazyload"></a><br><a href="http://myfile.buildworld.cn/360%E6%88%AA%E5%9B%BE1793072184105113.jpg" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="http://myfile.buildworld.cn/360%E6%88%AA%E5%9B%BE1793072184105113.jpg" class="lazyload"></a></p><blockquote><p>服务器支持文件MD5校检，实现文件查重。点击上传按钮可以实现云端文件上传，即用户只要提供文件的网络地址，无需下载实现云端存储</p></blockquote><p><a href="http://myfile.buildworld.cn/360%E6%88%AA%E5%9B%BE174012037168101.jpg" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="http://myfile.buildworld.cn/360%E6%88%AA%E5%9B%BE174012037168101.jpg" class="lazyload"></a></p><h5 id="2、多个文件上传"><a href="#2、多个文件上传" class="headerlink" title="2、多个文件上传"></a>2、多个文件上传</h5><blockquote><p>多文件上传，包含了本地文件查重，上传，秒传，上传失败重传，删除功能。</p></blockquote><p><a href="http://myfile.buildworld.cn/360%E6%88%AA%E5%9B%BE17860604528594.jpg" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="http://myfile.buildworld.cn/360%E6%88%AA%E5%9B%BE17860604528594.jpg" class="lazyload"></a></p><h5 id="3、文件列表"><a href="#3、文件列表" class="headerlink" title="3、文件列表"></a>3、文件列表</h5><blockquote><p>文件列表包括文件分页显示，文件搜索，显示文件名称，文件大小，文件MD5，文件网络地址，文件上传时间。暂时不支持删除！开发者可以自己加。</p></blockquote><p><a href="http://myfile.buildworld.cn/360%E6%88%AA%E5%9B%BE17571116264764.jpg" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="http://myfile.buildworld.cn/360%E6%88%AA%E5%9B%BE17571116264764.jpg" class="lazyload"></a></p><hr><h4 id="三、开发者"><a href="#三、开发者" class="headerlink" title="三、开发者"></a>三、开发者</h4><h5 id="1、后端"><a href="#1、后端" class="headerlink" title="1、后端"></a>1、后端</h5><blockquote><p>后端采用SpringBoot+SpringDataJpa框架开发，采用目前最新的SpringBoot稳定版，测试运行正常，部署到Tomcat8+版本即可。数据库名称qiniuyun。</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SpringBoot: 2.1.2.RELEASE</span><br></pre></td></tr></table></figure></div><ul><li>修改application.yml文件配置</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#七牛云配置，自己到七牛云控制台获取</span><br><span class="line">qiniuyun:</span><br><span class="line">  config:</span><br><span class="line">    accesskey: XXXXXXXXXXXXXXXXXX</span><br><span class="line">    secretkey: XXXXXXXXXXXXXXXXXXXX</span><br><span class="line">    bucket: 七牛云存储空间名称</span><br><span class="line">    fileurl: 文件地址前缀（如 http:&#x2F;&#x2F;myfile.buildworld.cn&#x2F;）</span><br></pre></td></tr></table></figure></div><h5 id="2、前端"><a href="#2、前端" class="headerlink" title="2、前端"></a>2、前端</h5><blockquote><p>前端使用layui框架，使用时注意修改请求接口的地址即可</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> 系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> SpringDataJpa </tag>
            
            <tag> layui </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>毕业纪念</title>
      <link href="/2018/05/23/%E6%AF%95%E4%B8%9A%E7%BA%AA%E5%BF%B5/"/>
      <url>/2018/05/23/%E6%AF%95%E4%B8%9A%E7%BA%AA%E5%BF%B5/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script>    <div id="aplayer-KrvjDYLS" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="28892408" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="true" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"></div><p></p><div class="note success">            <h2 id="2014年10月"><a href="#2014年10月" class="headerlink" title="2014年10月"></a>2014年10月</h2><p><strong>大半夜</strong> 打了个的就是为了去看这个 <strong>大提琴</strong></p>          </div><div class="justified-gallery"><p><a href="http://myuniversity.buildworld.cn/123.jpg" data-fancybox="group" data-caption class="fancybox"><img src="http://myuniversity.buildworld.cn/123.jpg" alt title></a></p>          </div><div class="note success">            <h2 id="2015年03月"><a href="#2015年03月" class="headerlink" title="2015年03月"></a>2015年03月</h2>          </div><blockquote><p>冒着被宿管打死的危险，煮了一波元宵🥘</p></blockquote><div class="justified-gallery"><p><a href="http://myuniversity.buildworld.cn/IMG_20150305_180932.jpg" data-fancybox="group" data-caption class="fancybox"><img src="http://myuniversity.buildworld.cn/IMG_20150305_180932.jpg" alt title></a></p>          </div><blockquote><p>三个追风少年🤪</p></blockquote><div class="justified-gallery"><p><a href="http://myuniversity.buildworld.cn/IMG_20150305_205340.jpg" data-fancybox="group" data-caption class="fancybox"><img src="http://myuniversity.buildworld.cn/IMG_20150305_205340.jpg" alt title></a><br><a href="http://myuniversity.buildworld.cn/IMG_20150305_205712.jpg" data-fancybox="group" data-caption class="fancybox"><img src="http://myuniversity.buildworld.cn/IMG_20150305_205712.jpg" alt title></a><br><a href="http://myuniversity.buildworld.cn/IMG_20150305_205300.jpg" data-fancybox="group" data-caption class="fancybox"><img src="http://myuniversity.buildworld.cn/IMG_20150305_205300.jpg" alt title></a></p>          </div><blockquote><p>小小的孔明灯放飞梦想🛫  </p></blockquote><div class="justified-gallery"><p><a href="http://myuniversity.buildworld.cn/IMG_20150305_214910.jpg" data-fancybox="group" data-caption class="fancybox"><img src="http://myuniversity.buildworld.cn/IMG_20150305_214910.jpg" alt title></a></p>          </div><blockquote><p>老大辛苦了，也没有白白浪费你一米九二的个子。🤣</p></blockquote><div class="justified-gallery"><p><a href="http://myuniversity.buildworld.cn/IMG_20150331_214241.jpg" data-fancybox="group" data-caption class="fancybox"><img src="http://myuniversity.buildworld.cn/IMG_20150331_214241.jpg" alt title></a></p>          </div><div class="note success">            <h2 id="2015年04月"><a href="#2015年04月" class="headerlink" title="2015年04月"></a>2015年04月</h2><p>爱 <strong>健身</strong> 的室友🥱</p>          </div><div class="justified-gallery"><p><a href="http://myuniversity.buildworld.cn/IMG_20150421_001616.jpg" data-fancybox="group" data-caption class="fancybox"><img src="http://myuniversity.buildworld.cn/IMG_20150421_001616.jpg" alt title></a></p>          </div><div class="note success">            <h2 id="2015年06月"><a href="#2015年06月" class="headerlink" title="2015年06月"></a>2015年06月</h2><p>咦！。。。🤣</p>          </div><div class="justified-gallery"><p><a href="http://myuniversity.buildworld.cn/IMG_20150614_221100.jpg" data-fancybox="group" data-caption class="fancybox"><img src="http://myuniversity.buildworld.cn/IMG_20150614_221100.jpg" alt title></a></p>          </div><div class="note success">            <h2 id="2015年11月"><a href="#2015年11月" class="headerlink" title="2015年11月"></a>2015年11月</h2>          </div><blockquote><p>你这线接的，你确定老师不来打你嘛 <strong>（背景那个人怎么回事）</strong></p></blockquote><div class="justified-gallery"><p><a href="http://myuniversity.buildworld.cn/IMG_20151109_171503.jpg" data-fancybox="group" data-caption class="fancybox"><img src="http://myuniversity.buildworld.cn/IMG_20151109_171503.jpg" alt title></a></p>          </div><blockquote><p>天气确实有点冷 <strong>（这张照片差点被老大打死）</strong></p></blockquote><div class="justified-gallery"><p><a href="http://myuniversity.buildworld.cn/IMG_20151110_122535.jpg" data-fancybox="group" data-caption class="fancybox"><img src="http://myuniversity.buildworld.cn/IMG_20151110_122535.jpg" alt title></a></p>          </div><div class="note success">            <h2 id="2015年12月"><a href="#2015年12月" class="headerlink" title="2015年12月"></a>2015年12月</h2>          </div><blockquote><p>睡的香吗，又熬夜打游戏了吧</p></blockquote><div class="justified-gallery"><p><a href="http://myuniversity.buildworld.cn/IMG_20151203_082134.jpg" data-fancybox="group" data-caption class="fancybox"><img src="http://myuniversity.buildworld.cn/IMG_20151203_082134.jpg" alt title></a></p>          </div><blockquote><p><strong>2015</strong>年的最后一天</p></blockquote><div class="justified-gallery"><p><a href="http://myuniversity.buildworld.cn/IMG_20151231_184115.jpg" data-fancybox="group" data-caption class="fancybox"><img src="http://myuniversity.buildworld.cn/IMG_20151231_184115.jpg" alt title></a></p>          </div>        <div class="note success">            <h2 id="2016年3月"><a href="#2016年3月" class="headerlink" title="2016年3月"></a>2016年3月</h2><p>这个比赛我们学校可神气了</p>          </div><div class="justified-gallery"><p><a href="http://myuniversity.buildworld.cn/IMG_20160324_191007.jpg" data-fancybox="group" data-caption class="fancybox"><img src="http://myuniversity.buildworld.cn/IMG_20160324_191007.jpg" alt title></a></p>          </div><div class="note success">            <h2 id="2016年5月"><a href="#2016年5月" class="headerlink" title="2016年5月"></a>2016年5月</h2>          </div><blockquote><p>花式秀技术👍</p></blockquote><div class="justified-gallery"><p><a href="http://myuniversity.buildworld.cn/IMG_20160507_172319.jpg" data-fancybox="group" data-caption class="fancybox"><img src="http://myuniversity.buildworld.cn/IMG_20160507_172319.jpg" alt title></a><br><a href="http://myuniversity.buildworld.cn/IMG_20160507_172332.jpg" data-fancybox="group" data-caption class="fancybox"><img src="http://myuniversity.buildworld.cn/IMG_20160507_172332.jpg" alt title></a><br><a href="http://myuniversity.buildworld.cn/IMG_20160519_225550.jpg" data-fancybox="group" data-caption class="fancybox"><img src="http://myuniversity.buildworld.cn/IMG_20160519_225550.jpg" alt title></a></p>          </div><blockquote><p><strong>可爱不🤣</strong></p></blockquote><div class="justified-gallery"><p><a href="http://myuniversity.buildworld.cn/IMG_20160520_203302.jpg" data-fancybox="group" data-caption class="fancybox"><img src="http://myuniversity.buildworld.cn/IMG_20160520_203302.jpg" alt title></a></p>          </div><blockquote><p>什么时候英雄联盟出电影，当年的人不知道能不能聚在一起了</p></blockquote><div class="justified-gallery"><p><a href="http://myuniversity.buildworld.cn/IMG_20160608_204202.jpg" data-fancybox="group" data-caption class="fancybox"><img src="http://myuniversity.buildworld.cn/IMG_20160608_204202.jpg" alt title></a></p>          </div><blockquote><p>到了国家需要我的时候了💪</p></blockquote><div class="justified-gallery"><p><a href="http://myuniversity.buildworld.cn/IMG_20160617_173758_HDR.jpg" data-fancybox="group" data-caption class="fancybox"><img src="http://myuniversity.buildworld.cn/IMG_20160617_173758_HDR.jpg" alt title></a></p>          </div><div class="note success">            <h2 id="2016年7月"><a href="#2016年7月" class="headerlink" title="2016年7月"></a>2016年7月</h2>          </div><blockquote><p>那个好像是<strong>RIO</strong>，某人倒了</p></blockquote><div class="justified-gallery"><p><a href="http://myuniversity.buildworld.cn/IMG_20160507_194028.jpg" data-fancybox="group" data-caption class="fancybox"><img src="http://myuniversity.buildworld.cn/IMG_20160507_194028.jpg" alt title></a><br><a href="http://myuniversity.buildworld.cn/IMG_20160507_210101.jpg" data-fancybox="group" data-caption class="fancybox"><img src="http://myuniversity.buildworld.cn/IMG_20160507_210101.jpg" alt title></a></p>          </div><blockquote><p>感谢大家😛</p></blockquote><div class="justified-gallery"><p><a href="http://myuniversity.buildworld.cn/IMG_20160701_224822.jpg" data-fancybox="group" data-caption class="fancybox"><img src="http://myuniversity.buildworld.cn/IMG_20160701_224822.jpg" alt title></a></p>          </div><div class="note success">            <h2 id="2016年11月"><a href="#2016年11月" class="headerlink" title="2016年11月"></a>2016年11月</h2><p>有<strong>故事</strong>的两个男人</p>          </div><div class="justified-gallery"><p><a href="http://myuniversity.buildworld.cn/IMG_20161125_121947.jpg" data-fancybox="group" data-caption class="fancybox"><img src="http://myuniversity.buildworld.cn/IMG_20161125_121947.jpg" alt title></a><br><a href="http://myuniversity.buildworld.cn/IMG_20161125_121934.jpg" data-fancybox="group" data-caption class="fancybox"><img src="http://myuniversity.buildworld.cn/IMG_20161125_121934.jpg" alt title></a></p>          </div><div class="note success">            <h2 id="2017年2月"><a href="#2017年2月" class="headerlink" title="2017年2月"></a>2017年2月</h2><p>曾经也为梦想打拼过</p>          </div><div class="justified-gallery"><p><a href="http://myuniversity.buildworld.cn/IMG_20170218_174815.jpg" data-fancybox="group" data-caption class="fancybox"><img src="http://myuniversity.buildworld.cn/IMG_20170218_174815.jpg" alt title></a><br><a href="http://myuniversity.buildworld.cn/IMG_20170303_174611.jpg" data-fancybox="group" data-caption class="fancybox"><img src="http://myuniversity.buildworld.cn/IMG_20170303_174611.jpg" alt title></a></p>          </div><div class="note success">            <h2 id="2017年3月"><a href="#2017年3月" class="headerlink" title="2017年3月"></a>2017年3月</h2>          </div><blockquote><p>去探望两个<strong>犯人</strong></p></blockquote><div class="justified-gallery"><p><a href="http://myuniversity.buildworld.cn/IMG_20170325_214811.jpg" data-fancybox="group" data-caption class="fancybox"><img src="http://myuniversity.buildworld.cn/IMG_20170325_214811.jpg" alt title></a><br><a href="http://myuniversity.buildworld.cn/IMG_20170325_221042.jpg" data-fancybox="group" data-caption class="fancybox"><img src="http://myuniversity.buildworld.cn/IMG_20170325_221042.jpg" alt title></a></p>          </div><blockquote><p>一个个会享受</p></blockquote><div class="justified-gallery"><p><a href="http://myuniversity.buildworld.cn/IMG_20170312_195019.jpg" data-fancybox="group" data-caption class="fancybox"><img src="http://myuniversity.buildworld.cn/IMG_20170312_195019.jpg" alt title></a></p>          </div><div class="note success">            <h2 id="2017年4月"><a href="#2017年4月" class="headerlink" title="2017年4月"></a>2017年4月</h2><p>没错，<strong>辣个男人</strong>又来了，解锁一波新姿势🤣</p>          </div><div class="justified-gallery"><p><a href="http://myuniversity.buildworld.cn/IMG_20170430_213004.jpg" data-fancybox="group" data-caption class="fancybox"><img src="http://myuniversity.buildworld.cn/IMG_20170430_213004.jpg" alt title></a><br><a href="http://myuniversity.buildworld.cn/IMG_20170430_215255.jpg" data-fancybox="group" data-caption class="fancybox"><img src="http://myuniversity.buildworld.cn/IMG_20170430_215255.jpg" alt title></a></p>          </div><div class="note success">            <h2 id="2018年5月"><a href="#2018年5月" class="headerlink" title="2018年5月"></a>2018年5月</h2>          </div><blockquote><p>409棋牌室欢迎您</p></blockquote><div class="justified-gallery"><p><a href="http://myuniversity.buildworld.cn/IMG_20180523_235804.jpg" data-fancybox="group" data-caption class="fancybox"><img src="http://myuniversity.buildworld.cn/IMG_20180523_235804.jpg" alt title></a><br><a href="http://myuniversity.buildworld.cn/IMG_20180521_114932.jpg" data-fancybox="group" data-caption class="fancybox"><img src="http://myuniversity.buildworld.cn/IMG_20180521_114932.jpg" alt title></a></p>          </div><blockquote><p>上次一起吃饭还是去年考试</p></blockquote><div class="justified-gallery"><p><a href="http://myuniversity.buildworld.cn/IMG_20180523_124637.jpg" data-fancybox="group" data-caption class="fancybox"><img src="http://myuniversity.buildworld.cn/IMG_20180523_124637.jpg" alt title></a></p>          </div><blockquote><p>我们毕业啦</p></blockquote><div class="justified-gallery"><p><a href="http://myuniversity.buildworld.cn/mmexport1527150846686.jpg" data-fancybox="group" data-caption class="fancybox"><img src="http://myuniversity.buildworld.cn/mmexport1527150846686.jpg" alt title></a></p>          </div>]]></content>
      
      
      <categories>
          
          <category> 回忆录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大学 </tag>
            
            <tag> 日常 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker（二）基础使用</title>
      <link href="/2018/05/22/Docker%EF%BC%88%E4%BA%8C%EF%BC%89%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/"/>
      <url>/2018/05/22/Docker%EF%BC%88%E4%BA%8C%EF%BC%89%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h4 id="一、基础配置命令"><a href="#一、基础配置命令" class="headerlink" title="一、基础配置命令"></a>一、基础配置命令</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看所有容器</span></span><br><span class="line">docker ps -a</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看运行中的容器</span></span><br><span class="line">docker ps</span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动容器</span></span><br><span class="line">docker start 容器名或ID</span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入容器</span></span><br><span class="line">docker attach 容器名或ID</span><br></pre></td></tr></table></figure></div><h5 id="dokcer-run命令"><a href="#dokcer-run命令" class="headerlink" title="dokcer run命令"></a>dokcer run命令</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">docker run &lt;相关参数&gt; &lt;镜像 ID&gt; &lt;初始命令&gt;</span><br><span class="line"></span><br><span class="line">-i：表示以“交互模式”运行容器</span><br><span class="line">-t：表示容器启动后会进入其命令行</span><br><span class="line">-v：表示需要将本地哪个目录挂载到容器中，格式：-v &lt;宿主机目录&gt;:&lt;容器目录&gt;</span><br><span class="line"></span><br><span class="line">Usage: docker run [OPTIONS] IMAGE [COMMAND] [ARG...]  </span><br><span class="line"></span><br><span class="line">  -d, --detach=false         指定容器运行于前台还是后台，默认为false   </span><br><span class="line">  -i, --interactive=false   打开STDIN，用于控制台交互  </span><br><span class="line">  -t, --tty=false            分配tty设备，该可以支持终端登录，默认为false  </span><br><span class="line">  -u, --user=""              指定容器的用户  </span><br><span class="line">  -a, --attach=[]            登录容器（必须是以docker run -d启动的容器）</span><br><span class="line">  -w, --workdir=""           指定容器的工作目录 </span><br><span class="line">  -c, --cpu-shares=0        设置容器CPU权重，在CPU共享场景使用  </span><br><span class="line">  -e, --env=[]               指定环境变量，容器中可以使用该环境变量  </span><br><span class="line">  -m, --memory=""            指定容器的内存上限  </span><br><span class="line">  -P, --publish-all=false    指定容器暴露的端口  </span><br><span class="line">  -p, --publish=[]           指定容器暴露的端口 </span><br><span class="line">  -h, --hostname=""          指定容器的主机名  </span><br><span class="line">  -v, --volume=[]            给容器挂载存储卷，挂载到容器的某个目录  </span><br><span class="line">  --volumes-from=[]          给容器挂载其他容器上的卷，挂载到容器的某个目录</span><br><span class="line">  --cap-add=[]               添加权限，权限清单详见：http://linux.die.net/man/7/capabilities  </span><br><span class="line">  --cap-drop=[]              删除权限，权限清单详见：http://linux.die.net/man/7/capabilities  </span><br><span class="line">  --cidfile=""               运行容器后，在指定文件中写入容器PID值，一种典型的监控系统用法  </span><br><span class="line">  --cpuset=""                设置容器可以使用哪些CPU，此参数可以用来容器独占CPU  </span><br><span class="line">  --device=[]                添加主机设备给容器，相当于设备直通  </span><br><span class="line">  --dns=[]                   指定容器的dns服务器  </span><br><span class="line">  --dns-search=[]            指定容器的dns搜索域名，写入到容器的/etc/resolv.conf文件  </span><br><span class="line">  --entrypoint=""            覆盖image的入口点  </span><br><span class="line">  --env-file=[]              指定环境变量文件，文件格式为每行一个环境变量  </span><br><span class="line">  --expose=[]                指定容器暴露的端口，即修改镜像的暴露端口  </span><br><span class="line">  --link=[]                  指定容器间的关联，使用其他容器的IP、env等信息  </span><br><span class="line">  --lxc-conf=[]              指定容器的配置文件，只有在指定--exec-driver=lxc时使用  </span><br><span class="line">  --name=""                  指定容器名字，后续可以通过名字进行容器管理，links特性需要使用名字  </span><br><span class="line">  --net="bridge"             容器网络设置:</span><br><span class="line">                                bridge 使用docker daemon指定的网桥     </span><br><span class="line">                                host     //容器使用主机的网络  </span><br><span class="line">                                container:NAME_or_ID  &gt;//使用其他容器的网路，共享IP和PORT等网络资源  </span><br><span class="line">                                none 容器使用自己的网络（类似--net=bridge），但是不进行配置 </span><br><span class="line">  --privileged=false         指定容器是否为特权容器，特权容器拥有所有的capabilities  </span><br><span class="line">  --restart="no"             指定容器停止后的重启策略:</span><br><span class="line">                                no：容器退出时不重启  </span><br><span class="line">                                on-failure：容器故障退出（返回值非零）时重启 </span><br><span class="line">                                always：容器退出时总是重启  </span><br><span class="line">  --rm=false                 指定容器停止后自动删除容器(不支持以docker run -d启动的容器)  </span><br><span class="line">  --sig-proxy=true           设置由代理接受并处理信号，但是SIGCHLD、SIGSTOP和SIGKILL不能被代理</span><br></pre></td></tr></table></figure></div><h4 id="二、Docker命令"><a href="#二、Docker命令" class="headerlink" title="二、Docker命令"></a>二、Docker命令</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">镜像操作：</span><br><span class="line">    build     Build an image from a Dockerfile</span><br><span class="line">    commit    Create a new image from a container's changes</span><br><span class="line">    images    List images</span><br><span class="line">    load      Load an image from a tar archive or STDIN</span><br><span class="line">    pull      Pull an image or a repository from a registry</span><br><span class="line">    push      Push an image or a repository to a registry</span><br><span class="line">    rmi       Remove one or more images</span><br><span class="line">    search    Search the Docker Hub for images</span><br><span class="line">    tag       Tag an image into a repository</span><br><span class="line">    save      Save one or more images to a tar archive </span><br><span class="line">    history   显示某镜像的历史</span><br><span class="line">    inspect   获取镜像的详细信息</span><br><span class="line"></span><br><span class="line">    容器及其中应用的生命周期操作：</span><br><span class="line">    create    创建一个容器</span><br><span class="line">    kill      Kill one or more running containers</span><br><span class="line">    inspect   Return low-level information on a container, image or task</span><br><span class="line">    pause     Pause all processes within one or more containers</span><br><span class="line">    ps        List containers</span><br><span class="line">    rm        删除一个或者多个容器</span><br><span class="line">    rename    Rename a container</span><br><span class="line">    restart   Restart a container</span><br><span class="line">    run       创建并启动一个容器</span><br><span class="line">    start     启动一个处于停止状态的容器</span><br><span class="line">    stats     显示容器实时的资源消耗信息</span><br><span class="line">    stop      停止一个处于运行状态的容器</span><br><span class="line">    top       Display the running processes of a container</span><br><span class="line">    unpause   Unpause all processes within one or more containers</span><br><span class="line">    update    Update configuration of one or more containers</span><br><span class="line">    wait      Block until a container stops, then print its exit code</span><br><span class="line">    attach    Attach to a running container</span><br><span class="line">    exec      Run a command in a running container</span><br><span class="line">    port      List port mappings or a specific mapping for the container</span><br><span class="line">    logs      获取容器的日志</span><br><span class="line"></span><br><span class="line">    容器文件系统操作：</span><br><span class="line">    cp        Copy files/folders between a container and the local filesystem</span><br><span class="line">    diff      Inspect changes on a container's filesystem</span><br><span class="line">    export    Export a container's filesystem as a tar archive</span><br><span class="line">    import    Import the contents from a tarball to create a filesystem image</span><br><span class="line"></span><br><span class="line">    Docker registry 操作：</span><br><span class="line">    login     Log in to a Docker registry.</span><br><span class="line">    logout    Log out from a Docker registry.</span><br><span class="line"></span><br><span class="line">    Volume 操作</span><br><span class="line">    volume    Manage Docker volumes</span><br><span class="line"></span><br><span class="line">    网络操作</span><br><span class="line">    network   Manage Docker networks</span><br><span class="line"></span><br><span class="line">    Swarm 相关操作</span><br><span class="line">    swarm     Manage Docker Swarm</span><br><span class="line">    service   Manage Docker services</span><br><span class="line">    node      Manage Docker Swarm nodes</span><br><span class="line"></span><br><span class="line">    系统操作：</span><br><span class="line">    version   Show the Docker version information</span><br><span class="line">    events    持续返回docker 事件</span><br><span class="line">    info      显示Docker 主机系统范围内的信息</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看运行中的容器</span></span><br><span class="line">docker ps</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看所有容器</span></span><br><span class="line">docker ps -a</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 退出容器</span></span><br><span class="line">按Ctrl+D 即可退出当前容器【但退出后会停止容器】</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 退出不停止容器：</span></span><br><span class="line">组合键：Ctrl+P+Q</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动容器</span></span><br><span class="line">docker start 容器名或ID</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入容器</span></span><br><span class="line">docker attach 容器名或ID</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 停止容器</span></span><br><span class="line">docker stop 容器名或ID</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 暂停容器</span></span><br><span class="line">docker pause 容器名或ID</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">继续容器</span></span><br><span class="line">docker unpause 容器名或ID</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除容器</span></span><br><span class="line">docker rm 容器名或ID</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除全部容器--慎用</span></span><br><span class="line">docker stop $(docker ps -q) &amp; docker rm $(docker ps -aq)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">保存容器，生成镜像</span></span><br><span class="line">docker commit 容器ID 镜像名称</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">从 host 拷贝文件到 container 里面</span></span><br><span class="line">docker cp /home/soft centos:/webapp</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker（一）安装和配置</title>
      <link href="/2018/05/19/Docker%EF%BC%88%E4%B8%80%EF%BC%89%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/"/>
      <url>/2018/05/19/Docker%EF%BC%88%E4%B8%80%EF%BC%89%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h4 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h4><p>Docker这个名称大家估计已经不陌生了吧，在我大三的时候就听说过这个，也研究过一阵子，也就知道点皮毛，现在由于线上服务器资源紧张，本地搭建虚拟机也过于浪费，所以这段时间好好研究一下Docker技术，也为后面的后端开发提供各种环境保障，比如服务器集群，es，Nginx等等。</p><p><a href="https://ws1.sinaimg.cn/large/005EneYkgy1frgtavax6jj30cr079mxp.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://ws1.sinaimg.cn/large/005EneYkgy1frgtavax6jj30cr079mxp.jpg" class="lazyload"></a></p><p>从上面的图像就可以看到，一个大鲸鱼上面有好多集装箱，大鲸鱼就好像是我们的产品（大容器），集装箱就是一个个服务器。</p><p>下面看看传统虚拟机和Docker架构的区别：</p><p><a href="https://ws1.sinaimg.cn/large/005EneYkgy1frgto9v4xaj30ok0dtwen.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://ws1.sinaimg.cn/large/005EneYkgy1frgto9v4xaj30ok0dtwen.jpg" class="lazyload"></a></p><p>从上面的两张图片可以看出，传统的虚拟机架构和Docker体系架构的区别是，在传统的虚拟机中有一层虚拟机操作系统，而Docker却没有。所以Docker的启动速度和存储空间远远优于传统的虚拟机。</p><p>下面大家看看Docker官方的架构图：</p><p><a href="https://ws1.sinaimg.cn/large/005EneYkgy1frgyjprvcbj30qm0e640h.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://ws1.sinaimg.cn/large/005EneYkgy1frgyjprvcbj30qm0e640h.jpg" class="lazyload"></a></p><h4 id="windows安装"><a href="#windows安装" class="headerlink" title="windows安装"></a>windows安装</h4><h5 id="1、使用的软件"><a href="#1、使用的软件" class="headerlink" title="1、使用的软件"></a>1、使用的软件</h5><p><a href="http://mirrors.aliyun.com/docker-toolbox/windows/" target="_blank" rel="noopener">http://mirrors.aliyun.com/docker-toolbox/windows/</a></p><p><a href="https://ws1.sinaimg.cn/large/005EneYkgy1frh21puistj30hg03uq2v.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://ws1.sinaimg.cn/large/005EneYkgy1frh21puistj30hg03uq2v.jpg" class="lazyload"></a></p><p>docker-for-windows适合于在win10上面使用，默认使用的是win10自带的虚拟机软件Hyper，直接安装即可，提供官方的账号登录。</p><p>docker-toolbox加载boot2docker.iso镜像到virtualbox中去，通过xshell等连接软件即可连接到docker系统。使用这种方式注意，主要是这个镜像是放在github上面的，国内通常下载不下来，因为软件第一次打开的时候回去联网查询最新的版本并且下载下来，国内网通常导致连接超时，无法下载镜像，进而导致软件无法使用，也就无法使用docker了。</p><p><code>Docker Quickstart Terminal</code>启动后会复制<code>C:\Users\Administrator\.docker\machine\cache</code>下的镜像<code>boot2docker.iso</code>到<code>C:\Users\Administrator\.docker\machine\machines\default</code>下面。</p><p>检测到默认的镜像不是最新版本的，需要到<a href="https://github.com/boot2docker/boot2docker/releases" target="_blank" rel="noopener">https://github.com/boot2docker/boot2docker/releases</a>下载最新的，并复制到<code>C:\Users\Administrator\.docker\machine\cache</code>目录下。</p><p><a href="https://ws1.sinaimg.cn/large/005EneYkgy1frh28u5bwcj30ra0dtwf3.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://ws1.sinaimg.cn/large/005EneYkgy1frh28u5bwcj30ra0dtwf3.jpg" class="lazyload"></a></p><h5 id="2、安装步骤"><a href="#2、安装步骤" class="headerlink" title="2、安装步骤"></a>2、安装步骤</h5><p>我的是在windows上面安装的，大家如果有需要去看看这这两篇博客，下面都是基于docker-toolbox来安装的：</p><p><a href="https://blog.csdn.net/tina_ttl/article/details/51372604" target="_blank" rel="noopener">https://blog.csdn.net/tina_ttl/article/details/51372604</a></p><p><a href="https://blog.csdn.net/zistxym/article/details/42918339" target="_blank" rel="noopener">https://blog.csdn.net/zistxym/article/details/42918339</a></p><h4 id="Linux安装"><a href="#Linux安装" class="headerlink" title="Linux安装"></a>Linux安装</h4><h5 id="1、Ubuntu-14-04-16-04-使用apt-get进行安装"><a href="#1、Ubuntu-14-04-16-04-使用apt-get进行安装" class="headerlink" title="1、Ubuntu 14.04 16.04 (使用apt-get进行安装)"></a>1、Ubuntu 14.04 16.04 (使用apt-get进行安装)</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> step 1: 安装必要的一些系统工具</span></span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get -y install apt-transport-https ca-certificates curl software-properties-common</span><br><span class="line"><span class="meta">#</span><span class="bash"> step 2: 安装GPG证书</span></span><br><span class="line">curl -fsSL http://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add -</span><br><span class="line"><span class="meta">#</span><span class="bash"> Step 3: 写入软件源信息</span></span><br><span class="line">sudo add-apt-repository "deb [arch=amd64] http://mirrors.aliyun.com/docker-ce/linux/ubuntu $(lsb_release -cs) stable"</span><br><span class="line"><span class="meta">#</span><span class="bash"> Step 4: 更新并安装 Docker-CE</span></span><br><span class="line">sudo apt-get -y update</span><br><span class="line">sudo apt-get -y install docker-ce</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装指定版本的Docker-CE:</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Step 1: 查找Docker-CE的版本:</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> apt-cache madison docker-ce</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   docker-ce | 17.03.1~ce-0~ubuntu-xenial | http://mirrors.aliyun.com/docker-ce/linux/ubuntu xenial/stable amd64 Packages</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   docker-ce | 17.03.0~ce-0~ubuntu-xenial | http://mirrors.aliyun.com/docker-ce/linux/ubuntu xenial/stable amd64 Packages</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Step 2: 安装指定版本的Docker-CE: (VERSION 例如上面的 17.03.1~ce-0~ubuntu-xenial)</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> sudo apt-get -y install docker-ce=[VERSION]</span></span><br></pre></td></tr></table></figure></div><h5 id="2、CentOS-7-使用yum进行安装"><a href="#2、CentOS-7-使用yum进行安装" class="headerlink" title="2、CentOS 7 (使用yum进行安装)"></a>2、CentOS 7 (使用yum进行安装)</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> step 1: 安装必要的一些系统工具</span></span><br><span class="line">sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line"><span class="meta">#</span><span class="bash"> Step 2: 添加软件源信息</span></span><br><span class="line">sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"><span class="meta">#</span><span class="bash"> Step 3: 更新并安装 Docker-CE</span></span><br><span class="line">sudo yum makecache fast</span><br><span class="line">sudo yum -y install docker-ce</span><br><span class="line"><span class="meta">#</span><span class="bash"> Step 4: 开启Docker服务</span></span><br><span class="line">sudo service docker start</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 注意：</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 官方软件源默认启用了最新的软件，您可以通过编辑软件源的方式获取各个版本的软件包。例如官方并没有将测试版本的软件源置为可用，你可以通过以下方式开启。同理可以开启各种测试版本等。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> vim /etc/yum.repos.d/docker-ee.repo</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   将 [docker-ce-test] 下方的 enabled=0 修改为 enabled=1</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装指定版本的Docker-CE:</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Step 1: 查找Docker-CE的版本:</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> yum list docker-ce.x86_64 --showduplicates | sort -r</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   Loading mirror speeds from cached hostfile</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   Loaded plugins: branch, fastestmirror, langpacks</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   docker-ce.x86_64            17.03.1.ce-1.el7.centos            docker-ce-stable</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   docker-ce.x86_64            17.03.1.ce-1.el7.centos            @docker-ce-stable</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   docker-ce.x86_64            17.03.0.ce-1.el7.centos            docker-ce-stable</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   Available Packages</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Step2 : 安装指定版本的Docker-CE: (VERSION 例如上面的 17.03.0.ce.1-1.el7.centos)</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> sudo yum -y install docker-ce-[VERSION]</span></span><br></pre></td></tr></table></figure></div><h5 id="安装校验"><a href="#安装校验" class="headerlink" title="安装校验"></a>安装校验</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">root@iZbp12adskpuoxodbkqzjfZ:$ docker version</span><br><span class="line">Client:</span><br><span class="line"> Version:      17.03.0-ce</span><br><span class="line"> API version:  1.26</span><br><span class="line"> Go version:   go1.7.5</span><br><span class="line"> Git commit:   3a232c8</span><br><span class="line"> Built:        Tue Feb 28 07:52:04 2017</span><br><span class="line"> OS&#x2F;Arch:      linux&#x2F;amd64</span><br><span class="line"></span><br><span class="line">Server:</span><br><span class="line"> Version:      17.03.0-ce</span><br><span class="line"> API version:  1.26 (minimum version 1.12)</span><br><span class="line"> Go version:   go1.7.5</span><br><span class="line"> Git commit:   3a232c8</span><br><span class="line"> Built:        Tue Feb 28 07:52:04 2017</span><br><span class="line"> OS&#x2F;Arch:      linux&#x2F;amd64</span><br><span class="line"> Experimental: false</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谈谈线程</title>
      <link href="/2018/05/18/%E8%B0%88%E8%B0%88%E7%BA%BF%E7%A8%8B/"/>
      <url>/2018/05/18/%E8%B0%88%E8%B0%88%E7%BA%BF%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>关于Java 的线程问题，我们上大学的时候，计算机专业的学生肯定会遇到这两个名词–线程和进程，老师和我们说一个进程里面可以有多个线程，这里也引出了多线程的概念。可以看一看下面这张图</p><p><a href="https://ws1.sinaimg.cn/large/005EneYkgy1freg81tlhwj30lr0edmxv.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://ws1.sinaimg.cn/large/005EneYkgy1freg81tlhwj30lr0edmxv.jpg" class="lazyload"></a></p><p>提到Java中的线程，我们就会想到Thread以及Runnable，也了解了Thread的生命周期，请看下图：</p><p><a href="https://ws1.sinaimg.cn/large/005EneYkgy1fregagxh1zj30mb07kab6.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://ws1.sinaimg.cn/large/005EneYkgy1fregagxh1zj30mb07kab6.jpg" class="lazyload"></a></p><p>相信大家也写过关于线程的小程序，比如卖火车票啊，生产者消费者模式等。我们使用到了synchronized加锁技术（或者使用Lock方法），也用到了关于线程通知，等待任务的notifyAll()和wait()方法。更多的使用大家找一本大书去看吧，比如《Java核心技术》什么的，Java基础不是本文的重点。下面我们谈谈线程池和多线程的原理和使用，以及整合springboot框架。</p><h4 id="一、线程池"><a href="#一、线程池" class="headerlink" title="一、线程池"></a>一、线程池</h4><p>在多线程任务环境中，每次开启一个任务，我们把它提交到线程池中，交给线程池来管理，由线程池来调度任务。如果每次开启任务都要创建一个线程，那么对于大量任务的环境下，服务器资源将会很快耗尽，不仅对服务是一个灾难，对于用户体验来说也是一个灾难。此时，我们来谈谈Java中线程池技术。</p><h5 id="1、线程池种类"><a href="#1、线程池种类" class="headerlink" title="1、线程池种类"></a>1、线程池种类</h5><h6 id="（1）newSingleThreadExecutor"><a href="#（1）newSingleThreadExecutor" class="headerlink" title="（1）newSingleThreadExecutor"></a>（1）newSingleThreadExecutor</h6><p>单线程的线程池，在这个线程池中的所有任务只有一个线程去执行，如果当前的线程因为异常结束，将会有新的线程来执行，保证任务按照顺序执行下去。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPool</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ExecutorService pool = Executors.newSingleThreadExecutor();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            pool.execute(() -&gt; &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName());</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h6 id="（2）newFixedThreadPool"><a href="#（2）newFixedThreadPool" class="headerlink" title="（2）newFixedThreadPool"></a>（2）newFixedThreadPool</h6><p>创建一个固定线程数目的线程池，每次执行一个新的任务都会创建一个新的线程，直到达到我们设定的线程数。同样的，如果某个线程因为异常而结束，就会补充一个新的线程。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPool</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ExecutorService pool = Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            pool.execute(() -&gt; &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName());</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h6 id="（3）newCachedThreadPool"><a href="#（3）newCachedThreadPool" class="headerlink" title="（3）newCachedThreadPool"></a>（3）<strong>newCachedThreadPool</strong></h6><p>创建一个可缓存的线程池，如果线程池大小超过了任务所需的线程数目，线程池将会回收多余的线程，相反，任务所需线程增加，线程池也会增加线程，弹性修改线程池中的线程数目。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ExecutorService pool = Executors.newCachedThreadPool();</span><br></pre></td></tr></table></figure></div><h6 id="（4）newScheduledThreadPool"><a href="#（4）newScheduledThreadPool" class="headerlink" title="（4）newScheduledThreadPool"></a>（4）<strong>newScheduledThreadPool</strong></h6><p>此线程支持周期性和定时任务。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ScheduledExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPool</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ScheduledExecutorService pool = Executors.newScheduledThreadPool(<span class="number">10</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            pool.schedule(() -&gt; &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">"\t开始发车啦...."</span>);</span><br><span class="line">            &#125;, <span class="number">10</span>, TimeUnit.SECONDS);<span class="comment">//延迟10秒执行任务</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>当我们有定时和周期性任务需求的时候，下面是每隔1秒执行一次</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//pool.scheduleWithFixedDelay也可以</span></span><br><span class="line">pool.scheduleAtFixedRate(() -&gt; &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">"\t开始发车啦...."</span>);</span><br><span class="line">&#125;, <span class="number">1</span>, <span class="number">1</span>, TimeUnit.SECONDS);</span><br></pre></td></tr></table></figure></div><h6 id="（5）newWorkStealingPool"><a href="#（5）newWorkStealingPool" class="headerlink" title="（5）newWorkStealingPool"></a>（5）<strong>newWorkStealingPool</strong></h6><p>jdk8才有的，会根据所给的并行层次来动态地开启关闭线程，通过使用多个队列减少竞争，底层使用ForkJoinPool来实现的。充分利用多CPU多核，将一个任务拆分位多个小任务，放到多个处理器中执行，等这些小任务完成之后，再次合并为这个完整的任务。</p><p><strong>源码：参数parallelism应该是并行层次吧，参考无参的那个方法，这个parallelism应该是可用处理器数目</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Creates a thread pool that maintains enough threads to support</span></span><br><span class="line"><span class="comment">     * the given parallelism level, and may use multiple queues to</span></span><br><span class="line"><span class="comment">     * reduce contention. The parallelism level corresponds to the</span></span><br><span class="line"><span class="comment">     * maximum number of threads actively engaged in, or available to</span></span><br><span class="line"><span class="comment">     * engage in, task processing. The actual number of threads may</span></span><br><span class="line"><span class="comment">     * grow and shrink dynamically. A work-stealing pool makes no</span></span><br><span class="line"><span class="comment">     * guarantees about the order in which submitted tasks are</span></span><br><span class="line"><span class="comment">     * executed.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parallelism the targeted parallelism level</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the newly created thread pool</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IllegalArgumentException if &#123;<span class="doctag">@code</span> parallelism &lt;= 0&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newWorkStealingPool</span><span class="params">(<span class="keyword">int</span> parallelism)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ForkJoinPool</span><br><span class="line">            (parallelism,</span><br><span class="line">             ForkJoinPool.defaultForkJoinWorkerThreadFactory,</span><br><span class="line">             <span class="keyword">null</span>, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Creates a work-stealing thread pool using all</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> Runtime#availableProcessors available processors&#125;</span></span><br><span class="line"><span class="comment">     * as its target parallelism level.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the newly created thread pool</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #newWorkStealingPool(int)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newWorkStealingPool</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ForkJoinPool</span><br><span class="line">            <span class="comment">//Runtime.getRuntime().availableProcessors()返回的是可用处理器数目</span></span><br><span class="line">            (Runtime.getRuntime().availableProcessors(),</span><br><span class="line">             ForkJoinPool.defaultForkJoinWorkerThreadFactory,</span><br><span class="line">             <span class="keyword">null</span>, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div><h5 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h5><ul><li><code>newSingleThreadExecutor：一个单线程的线程池，可以用于需要保证顺序执行的场景，并且只有一个线程在执行。</code></li><li><code>newFixedThreadPool：一个固定大小的线程池，可以用于已知并发压力的情况下，对线程数做限制。</code></li><li><code>newCachedThreadPool：一个可以无限扩大的线程池，比较适合处理执行时间比较小的任务。</code></li><li><code>newScheduledThreadPool：可以延时启动，定时启动的线程池，适用于需要多个后台线程执行周期任务的场景。</code></li><li><code>newWorkStealingPool：一个拥有多个任务队列的线程池，可以减少连接数，创建当前可用cpu数量的线程来并行执行。</code></li></ul><h5 id="2、线程池的拒绝策略"><a href="#2、线程池的拒绝策略" class="headerlink" title="2、线程池的拒绝策略"></a>2、线程池的拒绝策略</h5><p>当任务过多，而且处理器无法处理额外的任务，我们所要要做的就是拒绝服务，java中提供了RejectedExecutionHandler接口，通过实现这个接口的rejectedExecution()方法实现不同的拒绝策略。下面是源码查看一波。</p><h6 id="（1）AbortPolicy策略"><a href="#（1）AbortPolicy策略" class="headerlink" title="（1）AbortPolicy策略"></a>（1）AbortPolicy策略</h6><p><strong>该策略直接抛出异常，阻止系统正常运行</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">AbortPolicy</span> <span class="keyword">implements</span> <span class="title">RejectedExecutionHandler</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">AbortPolicy</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * 总是抛出异常</span></span><br><span class="line"><span class="comment">         * Always throws RejectedExecutionException.</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> r the runnable task requested to be executed</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> e the executor attempting to execute this task</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@throws</span> RejectedExecutionException always</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rejectedExecution</span><span class="params">(Runnable r, ThreadPoolExecutor e)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RejectedExecutionException(<span class="string">"Task "</span> + r.toString() +</span><br><span class="line">                                                 <span class="string">" rejected from "</span> +</span><br><span class="line">                                                 e.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div><h6 id="（2）CallerRunsPolicy-策略"><a href="#（2）CallerRunsPolicy-策略" class="headerlink" title="（2）CallerRunsPolicy 策略"></a>（2）CallerRunsPolicy 策略</h6><p><strong>只要线程池未关闭，该策略直接在调用者线程中，运行当前的被丢弃的任务。</strong> </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * A handler for rejected tasks that runs the rejected task</span></span><br><span class="line"><span class="comment">     * directly in the calling thread of the &#123;<span class="doctag">@code</span> execute&#125; method,</span></span><br><span class="line"><span class="comment">     * unless the executor has been shut down, in which case the task</span></span><br><span class="line"><span class="comment">     * is discarded.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">CallerRunsPolicy</span> <span class="keyword">implements</span> <span class="title">RejectedExecutionHandler</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">CallerRunsPolicy</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> r the runnable task requested to be executed</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> e the executor attempting to execute this task</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rejectedExecution</span><span class="params">(Runnable r, ThreadPoolExecutor e)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!e.isShutdown()) &#123;</span><br><span class="line">                r.run();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div><h6 id="（3）DiscardOldestPolicy策略"><a href="#（3）DiscardOldestPolicy策略" class="headerlink" title="（3）DiscardOldestPolicy策略"></a>（3）DiscardOldestPolicy策略</h6><p><strong>该策略将丢弃最老的一个请求，也就是即将被执行的任务，并尝试再次提交当前任务。</strong> </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * A handler for rejected tasks that discards the oldest unhandled</span></span><br><span class="line"><span class="comment">  * request and then retries &#123;<span class="doctag">@code</span> execute&#125;, unless the executor</span></span><br><span class="line"><span class="comment">  * is shut down, in which case the task is discarded.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">DiscardOldestPolicy</span> <span class="keyword">implements</span> <span class="title">RejectedExecutionHandler</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="title">DiscardOldestPolicy</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * Obtains and ignores the next task that the executor</span></span><br><span class="line"><span class="comment">      * would otherwise execute, if one is immediately available,</span></span><br><span class="line"><span class="comment">      * and then retries execution of task r, unless the executor</span></span><br><span class="line"><span class="comment">      * is shut down, in which case task r is instead discarded.</span></span><br><span class="line"><span class="comment">      *</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@param</span> r the runnable task requested to be executed</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@param</span> e the executor attempting to execute this task</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rejectedExecution</span><span class="params">(Runnable r, ThreadPoolExecutor e)</span> </span>&#123;</span><br><span class="line">         <span class="keyword">if</span> (!e.isShutdown()) &#123;</span><br><span class="line">             <span class="comment">//获取队列，并且将e插入到队列中，等待合适的时间去执行</span></span><br><span class="line">             e.getQueue().poll();</span><br><span class="line">             <span class="comment">//执行任务</span></span><br><span class="line">             e.execute(r);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></div><h6 id="（4）DiscardPolicy-策略"><a href="#（4）DiscardPolicy-策略" class="headerlink" title="（4）DiscardPolicy 策略"></a>（4）DiscardPolicy 策略</h6><p><strong>这个策略默默丢弃无法处理的任务，并且不做任何处理</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A handler for rejected tasks that silently discards the</span></span><br><span class="line"><span class="comment"> * rejected task.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">DiscardPolicy</span> <span class="keyword">implements</span> <span class="title">RejectedExecutionHandler</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DiscardPolicy</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rejectedExecution</span><span class="params">(Runnable r, ThreadPoolExecutor e)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//什么也不做</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h5 id="3、线程池关闭"><a href="#3、线程池关闭" class="headerlink" title="3、线程池关闭"></a>3、线程池关闭</h5><p><code>shutdownNow：对未开始的任务全部取消执行，并且返回未执行任务的list集合。</code></p><p><code>shutdown：不接受新提交的任务，不影响已经提交的任务执行。</code></p><h4 id="二、生产活动中使用"><a href="#二、生产活动中使用" class="headerlink" title="二、生产活动中使用"></a>二、生产活动中使用</h4><h5 id="1、CountDownLatch-方式"><a href="#1、CountDownLatch-方式" class="headerlink" title="1、CountDownLatch 方式"></a>1、CountDownLatch 方式</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StatsDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">static</span> SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(</span><br><span class="line">            <span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">static</span> String startTime = sdf.format(<span class="keyword">new</span> Date());</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * IO密集型任务  = 一般为2*CPU核心数（常出现于线程中：数据库数据交互、文件上传下载、网络数据传输等等）</span></span><br><span class="line"><span class="comment">     * CPU密集型任务 = 一般为CPU核心数+1（常出现于线程中：复杂算法）</span></span><br><span class="line"><span class="comment">     * 混合型任务  = 视机器配置和复杂度自测而定</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> corePoolSize = Runtime.getRuntime().availableProcessors();</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * public ThreadPoolExecutor(int corePoolSize,int maximumPoolSize,long keepAliveTime,</span></span><br><span class="line"><span class="comment">     *                           TimeUnit unit,BlockingQueue&lt;Runnable&gt; workQueue)</span></span><br><span class="line"><span class="comment">     * corePoolSize用于指定核心线程数量</span></span><br><span class="line"><span class="comment">     * maximumPoolSize指定最大线程数</span></span><br><span class="line"><span class="comment">     * keepAliveTime和TimeUnit指定线程空闲后的最大存活时间</span></span><br><span class="line"><span class="comment">     * workQueue则是线程池的缓冲队列,还未执行的线程会在队列中等待</span></span><br><span class="line"><span class="comment">     * 监控队列长度，确保队列有界</span></span><br><span class="line"><span class="comment">     * 不当的线程池大小会使得处理速度变慢，稳定性下降，并且导致内存泄露。如果配置的线程过少，则队列会持续变大，消耗过多内存。</span></span><br><span class="line"><span class="comment">     * 而过多的线程又会 由于频繁的上下文切换导致整个系统的速度变缓——殊途而同归。队列的长度至关重要，它必须得是有界的，这样如果线程池不堪重负了它可以暂时拒绝掉新的请求。</span></span><br><span class="line"><span class="comment">     * ExecutorService 默认的实现是一个无界的 LinkedBlockingQueue。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ThreadPoolExecutor executor  = <span class="keyword">new</span> ThreadPoolExecutor(corePoolSize, corePoolSize+<span class="number">1</span>, <span class="number">10l</span>, TimeUnit.SECONDS,</span><br><span class="line">            <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;(<span class="number">1000</span>));</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        CountDownLatch latch = <span class="keyword">new</span> CountDownLatch(<span class="number">5</span>);</span><br><span class="line">        <span class="comment">//使用execute方法</span></span><br><span class="line">          executor.execute(<span class="keyword">new</span> Stats(<span class="string">"任务A"</span>, <span class="number">1000</span>, latch));</span><br><span class="line">          executor.execute(<span class="keyword">new</span> Stats(<span class="string">"任务B"</span>, <span class="number">1000</span>, latch));</span><br><span class="line">          executor.execute(<span class="keyword">new</span> Stats(<span class="string">"任务C"</span>, <span class="number">1000</span>, latch));</span><br><span class="line">          executor.execute(<span class="keyword">new</span> Stats(<span class="string">"任务D"</span>, <span class="number">1000</span>, latch));</span><br><span class="line">          executor.execute(<span class="keyword">new</span> Stats(<span class="string">"任务E"</span>, <span class="number">1000</span>, latch));</span><br><span class="line">        latch.await();<span class="comment">// 等待所有人任务结束</span></span><br><span class="line">        System.out.println(<span class="string">"所有的统计任务执行完成:"</span> + sdf.format(<span class="keyword">new</span> Date()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Stats</span> <span class="keyword">implements</span> <span class="title">Runnable</span>  </span>&#123;</span><br><span class="line">        String statsName;</span><br><span class="line">        <span class="keyword">int</span> runTime;</span><br><span class="line">        CountDownLatch latch;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Stats</span><span class="params">(String statsName, <span class="keyword">int</span> runTime, CountDownLatch latch)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.statsName = statsName;</span><br><span class="line">            <span class="keyword">this</span>.runTime = runTime;</span><br><span class="line">            <span class="keyword">this</span>.latch = latch;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(statsName+ <span class="string">" do stats begin at "</span>+ startTime);</span><br><span class="line">                <span class="comment">//模拟任务执行时间</span></span><br><span class="line">                Thread.sleep(runTime);</span><br><span class="line">                System.out.println(statsName + <span class="string">" do stats complete at "</span>+ sdf.format(<span class="keyword">new</span> Date()));</span><br><span class="line">                latch.countDown();<span class="comment">//单次任务结束，计数器减一</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h6 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h6><p><a href="https://ws1.sinaimg.cn/large/005EneYkgy1frax2svvguj30f509qq43.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://ws1.sinaimg.cn/large/005EneYkgy1frax2svvguj30f509qq43.jpg" class="lazyload"></a></p><h5 id="2、Future-方式"><a href="#2、Future-方式" class="headerlink" title="2、Future    方式"></a>2、Future    方式</h5><p><code>重点是和springboot整合，采用注解bean方式生成ThreadPoolTaskExecutor</code></p><p>@Bean</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//spring依赖包</span></span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认线程池线程池</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Executor</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ThreadPoolTaskExecutor <span class="title">defaultThreadPool</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ThreadPoolTaskExecutor executor = <span class="keyword">new</span> ThreadPoolTaskExecutor();</span><br><span class="line">        <span class="comment">//核心线程数目</span></span><br><span class="line">        executor.setCorePoolSize(<span class="number">16</span>);</span><br><span class="line">        <span class="comment">//指定最大线程数</span></span><br><span class="line">        executor.setMaxPoolSize(<span class="number">64</span>);</span><br><span class="line">        <span class="comment">//队列中最大的数目</span></span><br><span class="line">        executor.setQueueCapacity(<span class="number">16</span>);</span><br><span class="line">        <span class="comment">//线程名称前缀</span></span><br><span class="line">        executor.setThreadNamePrefix(<span class="string">"defaultThreadPool_"</span>);</span><br><span class="line">        <span class="comment">//rejection-policy：当pool已经达到max size的时候，如何处理新任务</span></span><br><span class="line">        <span class="comment">//CALLER_RUNS：不在新线程中执行任务，而是由调用者所在的线程来执行</span></span><br><span class="line">        <span class="comment">//对拒绝task的处理策略</span></span><br><span class="line">        executor.setRejectedExecutionHandler(<span class="keyword">new</span> ThreadPoolExecutor.CallerRunsPolicy());</span><br><span class="line">        <span class="comment">//线程空闲后的最大存活时间</span></span><br><span class="line">        executor.setKeepAliveSeconds(<span class="number">60</span>);</span><br><span class="line">        <span class="comment">//加载</span></span><br><span class="line">        executor.initialize();</span><br><span class="line">        <span class="keyword">return</span> executor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h6 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h6><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过注解引入配置</span></span><br><span class="line"><span class="meta">@Resource</span>(name = <span class="string">"defaultThreadPool"</span>)</span><br><span class="line"><span class="keyword">private</span> ThreadPoolTaskExecutor executor;</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用Future方式执行多任务</span></span><br><span class="line"><span class="comment">//生成一个集合</span></span><br><span class="line">List&lt;Future&gt; futures = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取后台全部有效运营人员的集合</span></span><br><span class="line">List&lt;AdminUserMsgResponse&gt; adminUserDOList = adminManagerService.GetUserToSentMsg(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (AdminUserMsgResponse response : adminUserDOList) &#123;</span><br><span class="line">           <span class="comment">//并发处理</span></span><br><span class="line">           <span class="keyword">if</span> (response.getMobile() != <span class="keyword">null</span>) &#123;</span><br><span class="line">           Future&lt;?&gt; future = executor.submit(() -&gt; &#123;</span><br><span class="line">           <span class="comment">//发送短信</span></span><br><span class="line">           mobileMessageFacade.sendCustomerMessage(response.getMobile(), msgConfigById.getContent());</span><br><span class="line">           &#125;);</span><br><span class="line">          futures.add(future);</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查询任务执行的结果</span></span><br><span class="line"><span class="keyword">for</span> (Future&lt;?&gt; future : futureList) &#123;</span><br><span class="line">     <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">     <span class="comment">//CPU高速轮询：每个future都并发轮循，判断完成状态然后获取结果，这一行，是本实现方案的精髓所在。即有10个future在高速轮询，完成一个future的获取结果，就关闭一个轮询</span></span><br><span class="line">     <span class="keyword">if</span> (future.isDone()&amp;&amp; !future.isCancelled()) &#123;</span><br><span class="line">     <span class="comment">//获取future成功完成状态，如果想要限制每个任务的超时时间，取消本行的状态判断+future.get(1000*1, TimeUnit.MILLISECONDS)+catch超时异常使用即可。</span></span><br><span class="line">     </span><br><span class="line">     <span class="keyword">break</span>;<span class="comment">//当前future获取结果完毕，跳出while</span></span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       Thread.sleep(<span class="number">1</span>);<span class="comment">//每次轮询休息1毫秒（CPU纳秒级），避免CPU高速轮循耗空CPU---》新手别忘记这个</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 线程 </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot整合定时框架-Elastic-job-lite</title>
      <link href="/2018/05/17/springboot%E6%95%B4%E5%90%88%E5%AE%9A%E6%97%B6%E6%A1%86%E6%9E%B6-Elastic-job-lite/"/>
      <url>/2018/05/17/springboot%E6%95%B4%E5%90%88%E5%AE%9A%E6%97%B6%E6%A1%86%E6%9E%B6-Elastic-job-lite/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h4 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h4><p><a href="https://github.com/MiChongGET/elastic-job" target="_blank" rel="noopener">本文Github地址</a></p><p><a href="http://elasticjob.io/index_zh.html" target="_blank" rel="noopener">官网地址</a></p><blockquote><p>当当网张亮主导开发的分布式任务调度框架，结合zookeeper技术解决quartz框架在分布式系统中重复的定时任务导致的不可预见的错误！</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Elastic-Job是一个分布式调度解决方案，由两个相互独立的子项目Elastic-Job-Lite和Elastic-Job-Cloud组成。</span><br><span class="line"></span><br><span class="line">Elastic-Job-Lite定位为轻量级无中心化解决方案，使用jar包的形式提供分布式任务的协调服务；Elastic-Job-Cloud采用自研Mesos Framework的解决方案，额外提供资源治理、应用分发以及进程隔离等功能。</span><br></pre></td></tr></table></figure></div><p><a href="http://ovfotjrsi.bkt.clouddn.com/docs/img/architecture/elastic_job_lite.png" data-fancybox="group" data-caption="架构图" class="fancybox"><img alt="架构图" title="架构图" data-src="http://ovfotjrsi.bkt.clouddn.com/docs/img/architecture/elastic_job_lite.png" class="lazyload"></a></p><h4 id="二、SpringBoot整合"><a href="#二、SpringBoot整合" class="headerlink" title="二、SpringBoot整合"></a>二、SpringBoot整合</h4><blockquote><p>官网给的例子是基于spring xml来的，有兴趣的可以去看看，我们的项目采用springboot框架，所以要修改一些东西，比如修改为使用@Bean的方式来启动配置</p></blockquote><h5 id="1、pom配置"><a href="#1、pom配置" class="headerlink" title="1、pom配置"></a>1、pom配置</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--框架核心jar包--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.github.kuhn-he&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;elastic-job-lite-spring-boot-starter&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.1.5&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--添加数据相关的驱动主要是为了记录任务相关的一些数据，日志--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.alibaba&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;druid-spring-boot-starter&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.1.2&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;mysql&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-jdbc&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure></div><h5 id="2、application-properties配置"><a href="#2、application-properties配置" class="headerlink" title="2、application.properties配置"></a>2、application.properties配置</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># zookeeper集群</span><br><span class="line">elaticjob.zookeeper.server-lists&#x3D;127.0.0.1:2181</span><br><span class="line">elaticjob.zookeeper.namespace&#x3D;my-project</span><br><span class="line"></span><br><span class="line"># 主要是为了存储任务执行的日志</span><br><span class="line">spring.datasource.druid.log.url&#x3D;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;event_log</span><br><span class="line">spring.datasource.druid.log.username&#x3D;root</span><br><span class="line">spring.datasource.druid.log.password&#x3D;root</span><br><span class="line">spring.datasource.druid.log.driver-class-name&#x3D;com.mysql.jdbc.Driver</span><br><span class="line"></span><br><span class="line">#  自动创建更新验证数据库结构</span><br><span class="line">spring.jpa.hibernate.ddl-auto&#x3D;update</span><br><span class="line">spring.jpa.database&#x3D;mysql</span><br><span class="line">spring.jpa.show-sql&#x3D;true</span><br></pre></td></tr></table></figure></div><h5 id="3、使用bean方式配置项目"><a href="#3、使用bean方式配置项目" class="headerlink" title="3、使用bean方式配置项目"></a>3、使用bean方式配置项目</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">package cn.buildworld.elasticjob.config;</span><br><span class="line"></span><br><span class="line">import cn.buildworld.elasticjob.listener.ElasticJobListener;</span><br><span class="line">import com.dangdang.ddframe.job.reg.zookeeper.ZookeeperConfiguration;</span><br><span class="line">import com.dangdang.ddframe.job.reg.zookeeper.ZookeeperRegistryCenter;</span><br><span class="line">import org.springframework.beans.factory.annotation.Value;</span><br><span class="line">import org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * @Author MiChong</span><br><span class="line"> * @Email: 1564666023@qq.com</span><br><span class="line"> * @Create 2018-05-07 18:16</span><br><span class="line"> * @Version: V1.0</span><br><span class="line"> *&#x2F;</span><br><span class="line">@Configuration</span><br><span class="line">@ConditionalOnExpression(&quot;&#39;$&#123;elastic.zookeeper.server-lists&#125;&#39;.length() &gt;0&quot;)</span><br><span class="line">public class ElasticConfig &#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 初始化配置</span><br><span class="line">     * @param serverList</span><br><span class="line">     * @param namespace</span><br><span class="line">     * @return</span><br><span class="line">     *&#x2F;</span><br><span class="line">    @Bean(initMethod &#x3D; &quot;init&quot;)</span><br><span class="line">    public ZookeeperRegistryCenter regCenter(@Value(&quot;$&#123;elaticjob.zookeeper.server-lists&#125;&quot;) String serverList</span><br><span class="line">            , @Value(&quot;$&#123;elaticjob.zookeeper.namespace&#125;&quot;) String namespace) &#123;</span><br><span class="line"></span><br><span class="line">        return new ZookeeperRegistryCenter(new ZookeeperConfiguration(serverList, namespace));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 设置活动监听，前提是已经设置好了监听，见下一个目录</span><br><span class="line">     * @return</span><br><span class="line">     *&#x2F;</span><br><span class="line">    @Bean</span><br><span class="line">    public ElasticJobListener elasticJobListener() &#123;</span><br><span class="line">        return new ElasticJobListener(100, 100);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h5 id="4、任务监听器"><a href="#4、任务监听器" class="headerlink" title="4、任务监听器"></a>4、任务监听器</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">public class ElasticJobListener extends AbstractDistributeOnceElasticJobListener &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 设置间隔时间</span><br><span class="line">     * @param startedTimeoutMilliseconds</span><br><span class="line">     * @param completedTimeoutMilliseconds</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public ElasticJobListener(long startedTimeoutMilliseconds, long completedTimeoutMilliseconds) &#123;</span><br><span class="line">        super(startedTimeoutMilliseconds, completedTimeoutMilliseconds);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 任务开始</span><br><span class="line">     * @param shardingContexts</span><br><span class="line">     *&#x2F;</span><br><span class="line">    @Override</span><br><span class="line">    public void doBeforeJobExecutedAtLastStarted(ShardingContexts shardingContexts) &#123;</span><br><span class="line">        System.out.println(&quot;任务开始&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 任务结束</span><br><span class="line">     * @param shardingContexts</span><br><span class="line">     *&#x2F;</span><br><span class="line">    @Override</span><br><span class="line">    public void doAfterJobExecutedAtLastCompleted(ShardingContexts shardingContexts) &#123;</span><br><span class="line">        System.err.println(&quot;任务结束&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h5 id="5、数据库配置（任务第一种方式使用到）"><a href="#5、数据库配置（任务第一种方式使用到）" class="headerlink" title="5、数据库配置（任务第一种方式使用到）"></a>5、数据库配置（任务第一种方式使用到）</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class DataSourceConfig &#123;</span><br><span class="line"></span><br><span class="line">    @Bean(&quot;datasource&quot;)</span><br><span class="line">    @ConfigurationProperties(&quot;spring.datasource.druid.log&quot;)</span><br><span class="line">    public DataSource dataSourceTow()&#123;</span><br><span class="line">        return DruidDataSourceBuilder.create().build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h5 id="6、设置任务（三种方式）"><a href="#6、设置任务（三种方式）" class="headerlink" title="6、设置任务（三种方式）"></a>6、设置任务（三种方式）</h5><blockquote><p>Part1 通过在注解上面设置任务的cron,name等</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">@ElasticSimpleJob(cron &#x3D; &quot;0&#x2F;2 * * * * ?&quot;,</span><br><span class="line">        jobName &#x3D; &quot;firstJob&quot;,</span><br><span class="line">        shardingTotalCount &#x3D; 2,</span><br><span class="line">        jobParameter &#x3D; &quot;测试参数&quot;,</span><br><span class="line">        shardingItemParameters &#x3D; &quot;0&#x3D;A,1&#x3D;B&quot;,</span><br><span class="line">        dataSource &#x3D; &quot;datasource&quot;)</span><br><span class="line">@Component</span><br><span class="line">public class MyJob implements SimpleJob &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void execute(ShardingContext shardingContext) &#123;</span><br><span class="line">        System.out.println(String.format(&quot;------Thread ID: %s, 任务总片数: %s, &quot; +</span><br><span class="line">                        &quot;当前分片项: %s,当前参数: %s,&quot; +</span><br><span class="line">                        &quot;当前任务名称: %s,当前任务参数: %s,&quot;+</span><br><span class="line">                        &quot;当前任务的id: %s&quot;</span><br><span class="line">                ,</span><br><span class="line">                &#x2F;&#x2F;获取当前线程的id</span><br><span class="line">                Thread.currentThread().getId(),</span><br><span class="line">                &#x2F;&#x2F;获取任务总片数</span><br><span class="line">                shardingContext.getShardingTotalCount(),</span><br><span class="line">                &#x2F;&#x2F;获取当前分片项</span><br><span class="line">                shardingContext.getShardingItem(),</span><br><span class="line">                &#x2F;&#x2F;获取当前的参数</span><br><span class="line">                shardingContext.getShardingParameter(),</span><br><span class="line">                &#x2F;&#x2F;获取当前的任务名称</span><br><span class="line">                shardingContext.getJobName(),</span><br><span class="line">                &#x2F;&#x2F;获取当前任务参数</span><br><span class="line">                shardingContext.getJobParameter(),</span><br><span class="line">                &#x2F;&#x2F;获取任务的id</span><br><span class="line">                shardingContext.getTaskId()</span><br><span class="line">        ));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>Part2 通过控制器动态添加任务</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">public class TestController &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private ZookeeperRegistryCenter zookeeperRegistryCenter;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 动态添加任务逻辑</span><br><span class="line">     *&#x2F;</span><br><span class="line">    @RequestMapping(&quot;&#x2F;test&quot;)</span><br><span class="line">    public void test() &#123;</span><br><span class="line">        int shardingTotalCount &#x3D; 2;</span><br><span class="line">        String jobName &#x3D; UUID.randomUUID().toString() + &quot;-test123&quot;;</span><br><span class="line"></span><br><span class="line">        JobCoreConfiguration jobCoreConfiguration &#x3D; JobCoreConfiguration</span><br><span class="line">                .newBuilder(jobName, &quot;* * * * * ?&quot;, shardingTotalCount)</span><br><span class="line">                .shardingItemParameters(&quot;0&#x3D;A,1&#x3D;B&quot;)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        SimpleJobConfiguration simpleJobConfiguration &#x3D;</span><br><span class="line">                new SimpleJobConfiguration(jobCoreConfiguration, MyJob2.class.getCanonicalName());</span><br><span class="line"></span><br><span class="line">        JobScheduler jobScheduler &#x3D; new JobScheduler(zookeeperRegistryCenter, LiteJobConfiguration.newBuilder(simpleJobConfiguration).build());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            jobScheduler.init();</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            throw new RuntimeException(&quot;定时任务创建失败&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>Part3 通过handler包装生成任务的方法，简化控制器的代码量</p></blockquote><p>ElasticJobHandler.java</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">public class ElasticJobHandler &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private ZookeeperRegistryCenter zookeeperRegistryCenter;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private DataSourceConfig dataSourceConfig;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private ElasticJobListener elasticJobListener;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * @param jobName</span><br><span class="line">     * @param jobClass</span><br><span class="line">     * @param shardingTotalCount</span><br><span class="line">     * @param cron</span><br><span class="line">     * @param id                 数据ID</span><br><span class="line">     * @return</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private static LiteJobConfiguration.Builder simpleJobConfigBuilder(String jobName,</span><br><span class="line">                                                                       Class&lt;? extends SimpleJob&gt; jobClass,</span><br><span class="line">                                                                       int shardingTotalCount,</span><br><span class="line">                                                                       String cron,</span><br><span class="line">                                                                       String id,String parameters) &#123;</span><br><span class="line">        return LiteJobConfiguration.newBuilder(new SimpleJobConfiguration(</span><br><span class="line">                JobCoreConfiguration</span><br><span class="line">                        .newBuilder(jobName, cron, shardingTotalCount)</span><br><span class="line">                        .shardingItemParameters(parameters)</span><br><span class="line">                        .jobParameter(id).</span><br><span class="line">                        build(),</span><br><span class="line">                jobClass.getCanonicalName()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 添加一个定时任务</span><br><span class="line">     *</span><br><span class="line">     * @param jobName            任务名</span><br><span class="line">     * @param cron               表达式</span><br><span class="line">     * @param shardingTotalCount 分片数</span><br><span class="line">     * @param parameters         当前参数</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public void addJob(String jobName, String cron, Integer shardingTotalCount, String id,String parameters) &#123;</span><br><span class="line">        LiteJobConfiguration jobConfig &#x3D; simpleJobConfigBuilder(jobName, MyJob2.class, shardingTotalCount, cron, id,parameters)</span><br><span class="line">                .overwrite(true).build();</span><br><span class="line"></span><br><span class="line">        new SpringJobScheduler(new MyJob2(), zookeeperRegistryCenter, jobConfig, elasticJobListener).init();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>控制器</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">@ResponseBody</span><br><span class="line">    @RequestMapping(&quot;&#x2F;add&quot;)</span><br><span class="line">    public Object add()&#123;</span><br><span class="line"></span><br><span class="line">        Date startTime &#x3D; new Date();</span><br><span class="line">        startTime.setTime(startTime.getTime()+3000);</span><br><span class="line"></span><br><span class="line">        String cron &#x3D; DateUtil.getCron(startTime);</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            elasticJobHandler.addJob(&quot;myjob:&quot;+cron,cron,2,&quot;66666&quot;,&quot;0&#x3D;A,1&#x3D;B&quot;);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            return &quot;false&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        return &quot;success&quot;;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div><p>时间工具类（主要是date转换为cron表达式）</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">public class DateUtil &#123;</span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 日期转化为cron表达式</span><br><span class="line">     * @param date</span><br><span class="line">     * @return</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public static String getCron(Date  date)&#123;</span><br><span class="line">        String dateFormat&#x3D;&quot;ss mm HH dd MM ? yyyy&quot;;</span><br><span class="line">        return  DateUtil.fmtDateToStr(date, dateFormat);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * cron表达式转为日期</span><br><span class="line">     * @param cron</span><br><span class="line">     * @return</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public static Date getCronToDate(String cron) &#123;</span><br><span class="line">        String dateFormat&#x3D;&quot;ss mm HH dd MM ? yyyy&quot;;</span><br><span class="line">        SimpleDateFormat sdf &#x3D; new SimpleDateFormat(dateFormat);</span><br><span class="line">        Date date &#x3D; null;</span><br><span class="line">        try &#123;</span><br><span class="line">            date &#x3D; sdf.parse(cron);</span><br><span class="line">        &#125; catch (ParseException e) &#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">        return date;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * Description:格式化日期,String字符串转化为Date</span><br><span class="line">     *</span><br><span class="line">     * @param date</span><br><span class="line">     * @param dtFormat</span><br><span class="line">     *            例如:yyyy-MM-dd HH:mm:ss yyyyMMdd</span><br><span class="line">     * @return</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public static String fmtDateToStr(Date date, String dtFormat) &#123;</span><br><span class="line">        if (date &#x3D;&#x3D; null)</span><br><span class="line">            return &quot;&quot;;</span><br><span class="line">        try &#123;</span><br><span class="line">            SimpleDateFormat dateFormat &#x3D; new SimpleDateFormat(dtFormat);</span><br><span class="line">            return dateFormat.format(date);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            return &quot;&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot整合常用技术</title>
      <link href="/2018/05/17/SpringBoot%E6%95%B4%E5%90%88%E5%B8%B8%E7%94%A8%E6%8A%80%E6%9C%AF/"/>
      <url>/2018/05/17/SpringBoot%E6%95%B4%E5%90%88%E5%B8%B8%E7%94%A8%E6%8A%80%E6%9C%AF/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><a href="https://gitee.com/mi_chong/spring-boot-model" target="_blank" rel="noopener">模板地址</a></p><p><a href="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1526542764168&di=307b509c8c315a84383917119b23eba5&imgtype=0&src=http%3A%2F%2Ftherealdanvega.com%2Fwp-content%2Fuploads%2F2015%2F11%2Fspring-boot-logo.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1526542764168&di=307b509c8c315a84383917119b23eba5&imgtype=0&src=http%3A%2F%2Ftherealdanvega.com%2Fwp-content%2Fuploads%2F2015%2F11%2Fspring-boot-logo.png" class="lazyload"></a></p><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>​    <code>Spring Boot是目前大火的Java后端框架，遵循着“约定大于配置”的规则，可以快速开发后台，摆脱SSM框架的各种xml配置，开箱即用，快速部署。依靠着spring的强大社区，框架中集成了各种优秀的第三方框架。</code></p><h4 id="一、逆向生成model、mapper"><a href="#一、逆向生成model、mapper" class="headerlink" title="一、逆向生成model、mapper"></a>一、逆向生成model、mapper</h4><h5 id="maven的配置"><a href="#maven的配置" class="headerlink" title="maven的配置"></a>maven的配置</h5><h5 id="1、首先引入依赖"><a href="#1、首先引入依赖" class="headerlink" title="1、首先引入依赖"></a>1、首先引入依赖</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--整合mybatis--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.mybatis.spring.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">&lt;artifactId&gt;mybatis-spring-boot-starter&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;version&gt;1.3.1&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--mapper--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;tk.mybatis&lt;&#x2F;groupId&gt;</span><br><span class="line">&lt;artifactId&gt;mapper-spring-boot-starter&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;version&gt;2.0.0&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;!--pagehelper--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;com.github.pagehelper&lt;&#x2F;groupId&gt;</span><br><span class="line">&lt;artifactId&gt;pagehelper-spring-boot-starter&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;version&gt;1.2.3&lt;&#x2F;version&gt;</span><br><span class="line">&lt;exclusions&gt;</span><br><span class="line">&lt;exclusion&gt;</span><br><span class="line">&lt;groupId&gt;org.mybatis.spring.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">&lt;artifactId&gt;mybatis-spring-boot-starter&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;exclusion&gt;</span><br><span class="line">&lt;&#x2F;exclusions&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;com.alibaba&lt;&#x2F;groupId&gt;</span><br><span class="line">&lt;artifactId&gt;druid-spring-boot-starter&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;version&gt;1.1.0&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;mysql&lt;&#x2F;groupId&gt;</span><br><span class="line">&lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure></div><h5 id="2、build中添加插件"><a href="#2、build中添加插件" class="headerlink" title="2、build中添加插件"></a>2、build中添加插件</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">         &lt;!--mybatis逆向生成插件--&gt;</span><br><span class="line">&lt;plugin&gt;</span><br><span class="line">&lt;groupId&gt;org.mybatis.generator&lt;&#x2F;groupId&gt;</span><br><span class="line">&lt;artifactId&gt;mybatis-generator-maven-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;version&gt;1.3.2&lt;&#x2F;version&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line"></span><br><span class="line">     &lt;configurationFile&gt;$&#123;basedir&#125;&#x2F;src&#x2F;main&#x2F;resources&#x2F;generator&#x2F;generatorConfig.xml&lt;&#x2F;configurationFile&gt;</span><br><span class="line">&lt;overwrite&gt;true&lt;&#x2F;overwrite&gt;</span><br><span class="line">&lt;verbose&gt;true&lt;&#x2F;verbose&gt;</span><br><span class="line">&lt;&#x2F;configuration&gt;</span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;mysql&lt;&#x2F;groupId&gt;</span><br><span class="line">&lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;version&gt;$&#123;mysql.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;tk.mybatis&lt;&#x2F;groupId&gt;</span><br><span class="line">&lt;artifactId&gt;mapper-generator&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;version&gt;1.0.0&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;dependencies&gt;</span><br><span class="line">&lt;&#x2F;plugin&gt;</span><br></pre></td></tr></table></figure></div><h5 id="3、自定义一个MyMapper"><a href="#3、自定义一个MyMapper" class="headerlink" title="3、自定义一个MyMapper"></a>3、自定义一个MyMapper</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">import tk.mybatis.mapper.common.Mapper;</span><br><span class="line">import tk.mybatis.mapper.common.MySqlMapper;</span><br><span class="line">import tk.mybatis.mapper.common.base.delete.DeleteByPrimaryKeyMapper;</span><br><span class="line">import tk.mybatis.mapper.common.condition.SelectByConditionMapper;</span><br><span class="line">import tk.mybatis.mapper.common.ids.DeleteByIdsMapper;</span><br><span class="line">import tk.mybatis.mapper.common.ids.SelectByIdsMapper;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * 继承自己的MyMapper</span><br><span class="line"> *</span><br><span class="line"> *&#x2F;</span><br><span class="line">public interface MyMapper&lt;T&gt; extends</span><br><span class="line">        Mapper&lt;T&gt;,</span><br><span class="line">        MySqlMapper&lt;T&gt;,</span><br><span class="line">        SelectByIdsMapper&lt;T&gt;,</span><br><span class="line">        SelectByConditionMapper&lt;T&gt;,</span><br><span class="line">        DeleteByIdsMapper&lt;T&gt;,</span><br><span class="line">        DeleteByPrimaryKeyMapper&lt;T&gt; &#123;</span><br><span class="line">    &#x2F;&#x2F;TODO</span><br><span class="line">    &#x2F;&#x2F;FIXME 特别注意，该接口不能被扫描到，否则会出错</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h5 id="4、编写generator配置文件"><a href="#4、编写generator配置文件" class="headerlink" title="4、编写generator配置文件"></a>4、编写generator配置文件</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE generatorConfiguration</span><br><span class="line">        PUBLIC &quot;-&#x2F;&#x2F;mybatis.org&#x2F;&#x2F;DTD MyBatis Generator Configuration 1.0&#x2F;&#x2F;EN&quot;</span><br><span class="line">        &quot;http:&#x2F;&#x2F;mybatis.org&#x2F;dtd&#x2F;mybatis-generator-config_1_0.dtd&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;generatorConfiguration&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--配置环境的文件，数据库的信息--&gt;</span><br><span class="line">    &lt;properties resource&#x3D;&quot;application-dev.properties&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;context id&#x3D;&quot;Mysql&quot; targetRuntime&#x3D;&quot;MyBatis3Simple&quot; defaultModelType&#x3D;&quot;flat&quot;&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;beginningDelimiter&quot; value&#x3D;&quot;&#96;&quot;&#x2F;&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;endingDelimiter&quot; value&#x3D;&quot;&#96;&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--继承自己的MyMapper--&gt;</span><br><span class="line">        &lt;plugin type&#x3D;&quot;tk.mybatis.mapper.generator.MapperPlugin&quot;&gt;</span><br><span class="line">            &lt;property name&#x3D;&quot;mappers&quot; value&#x3D;&quot;cn.buildworld.sbtest.util.MyMapper&quot;&#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;plugin&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--数据库的信息--&gt;</span><br><span class="line">        &lt;jdbcConnection driverClass&#x3D;&quot;$&#123;spring.datasource.driver-class-name&#125;&quot;</span><br><span class="line">                        connectionURL&#x3D;&quot;$&#123;spring.datasource.url&#125;&quot;</span><br><span class="line">                        userId&#x3D;&quot;$&#123;spring.datasource.username&#125;&quot;</span><br><span class="line">                        password&#x3D;&quot;$&#123;spring.datasource.password&#125;&quot;&gt;</span><br><span class="line">        &lt;&#x2F;jdbcConnection&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--实体类生成的位置--&gt;</span><br><span class="line">        &lt;javaModelGenerator targetPackage&#x3D;&quot;cn.buildworld.sbtest.model&quot; targetProject&#x3D;&quot;src&#x2F;main&#x2F;java&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--dao接口生成的位置--&gt;</span><br><span class="line">        &lt;sqlMapGenerator targetPackage&#x3D;&quot;mapper&quot; targetProject&#x3D;&quot;src&#x2F;main&#x2F;resources&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--XML文件生成的位置--&gt;</span><br><span class="line">        &lt;javaClientGenerator targetPackage&#x3D;&quot;cn.buildworld.sbtest.mapper&quot; targetProject&#x3D;&quot;src&#x2F;main&#x2F;java&quot;</span><br><span class="line">                             type&#x3D;&quot;XMLMAPPER&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--数据库表的信息，%代表生成数据库中所有的表--&gt;</span><br><span class="line">        &lt;table tableName&#x3D;&quot;%&quot;&gt;</span><br><span class="line">            &lt;!--mysql 配置--&gt;</span><br><span class="line">            &lt;generatedKey column&#x3D;&quot;id&quot; sqlStatement&#x3D;&quot;Mysql&quot; identity&#x3D;&quot;true&quot;&#x2F;&gt;</span><br><span class="line">            &lt;!--oracle 配置--&gt;</span><br><span class="line">            &lt;!--&lt;generatedKey column&#x3D;&quot;id&quot; sqlStatement&#x3D;&quot;select SEQ_&#123;1&#125;.nextval from dual&quot; identity&#x3D;&quot;false&quot; type&#x3D;&quot;pre&quot;&#x2F;&gt;--&gt;</span><br><span class="line">        &lt;&#x2F;table&gt;</span><br><span class="line">    &lt;&#x2F;context&gt;</span><br><span class="line">&lt;&#x2F;generatorConfiguration&gt;</span><br></pre></td></tr></table></figure></div><h4 id="二、基于mybatis的CRUD"><a href="#二、基于mybatis的CRUD" class="headerlink" title="二、基于mybatis的CRUD"></a>二、基于mybatis的CRUD</h4><h5 id="1、在Application启动文件中添加注解"><a href="#1、在Application启动文件中添加注解" class="headerlink" title="1、在Application启动文件中添加注解"></a>1、在Application启动文件中添加注解</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import tk.mybatis.spring.annotation.MapperScan;</span><br><span class="line"></span><br><span class="line">@SpringBootApplication</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * 扫描mapper包路径</span><br><span class="line"> *&#x2F;</span><br><span class="line">@MapperScan(basePackages &#x3D; &quot;cn.buildworld.sbtest.mapper&quot;)</span><br><span class="line">public class SbtestApplication &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">SpringApplication.run(SbtestApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h6 id="2、PageHelper分页插件的使用"><a href="#2、PageHelper分页插件的使用" class="headerlink" title="2、PageHelper分页插件的使用"></a>2、PageHelper分页插件的使用</h6><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@Autowired</span><br><span class="line">   private HseCustomerService hseCustomerService;</span><br><span class="line">   @GetMapping(&quot;list&quot;)</span><br><span class="line">   public Object getList(@RequestParam(defaultValue &#x3D; &quot;0&quot;)Integer fromId,</span><br><span class="line">                         @RequestParam(defaultValue &#x3D; &quot;2&quot;)Integer limit )&#123;</span><br><span class="line"></span><br><span class="line">       &#x2F;&#x2F;初始化page插件，传入分页参数</span><br><span class="line">       PageHelper.startPage(fromId,limit);</span><br><span class="line">       List&lt;HseCustomer&gt; list &#x3D; hseCustomerService.getList();</span><br><span class="line"></span><br><span class="line">       &#x2F;&#x2F;包装想要返回的结果，包含多种信息</span><br><span class="line">       PageInfo pageInfo &#x3D; new PageInfo(list);</span><br><span class="line"></span><br><span class="line">       return pageInfo;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></div><h6 id="3、在service实现类中使用事务"><a href="#3、在service实现类中使用事务" class="headerlink" title="3、在service实现类中使用事务"></a>3、在service实现类中使用事务</h6><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">   &#x2F;&#x2F;事务--查询</span><br><span class="line">   @Transactional(propagation &#x3D; Propagation.SUPPORTS)</span><br><span class="line">   public List&lt;StudentInfo&gt; getList() &#123;</span><br><span class="line"></span><br><span class="line">       return studentInfoMapper.selectByIds(&quot;123&quot;);</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   &#x2F;&#x2F;事务--修改</span><br><span class="line">   @Transactional(propagation &#x3D; Propagation.REQUIRED)</span><br></pre></td></tr></table></figure></div><h4 id="三、整合缓存Redis"><a href="#三、整合缓存Redis" class="headerlink" title="三、整合缓存Redis"></a>三、整合缓存Redis</h4><h5 id="1、添加依赖"><a href="#1、添加依赖" class="headerlink" title="1、添加依赖"></a>1、添加依赖</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">      &lt;!--引入redis依赖--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-data-redis&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure></div><h5 id="2、配置文件中添加配置（application-properties）"><a href="#2、配置文件中添加配置（application-properties）" class="headerlink" title="2、配置文件中添加配置（application.properties）"></a>2、配置文件中添加配置（application.properties）</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">###########################</span><br><span class="line">#                         #</span><br><span class="line">#         Redis配置        #</span><br><span class="line">#                         #</span><br><span class="line">###########################</span><br><span class="line"># Redis数据库索引（默认为0）</span><br><span class="line">spring.redis.database&#x3D;1</span><br><span class="line"># Redis服务器地址</span><br><span class="line">spring.redis.host&#x3D;119.29.181.95</span><br><span class="line"># Redis服务器连接端口</span><br><span class="line">spring.redis.port&#x3D;6379</span><br><span class="line"># Redis服务器连接密码（默认为空）</span><br><span class="line">spring.redis.password&#x3D;</span><br><span class="line"># 连接池最大连接数（使用负值表示没有限制）</span><br><span class="line">spring.redis.pool.max-active&#x3D;1000</span><br><span class="line"># 连接池最大阻塞时间（使用负值表示没有限制）</span><br><span class="line">spring.redis.pool.max-wait&#x3D;-1</span><br><span class="line"># 连接池中的最大空闲连接</span><br><span class="line">spring.redis.pool.max-idle&#x3D;10</span><br><span class="line"># 连接池中的最小空闲连接</span><br><span class="line">spring.redis.pool.min-idle&#x3D;2</span><br><span class="line"># 连接超时时间</span><br><span class="line">spring.redis.timeout&#x3D;0</span><br></pre></td></tr></table></figure></div><h5 id="3、使用redis"><a href="#3、使用redis" class="headerlink" title="3、使用redis"></a>3、使用redis</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * redis测试</span><br><span class="line"> *&#x2F;</span><br><span class="line"></span><br><span class="line">@Autowired</span><br><span class="line">&#x2F;&#x2F;spring-boot自带的模板</span><br><span class="line">private StringRedisTemplate redisTemplate;</span><br><span class="line">@GetMapping(&quot;redis&quot;)</span><br><span class="line">public Object getRedis()&#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;往redis数据库存入数据</span><br><span class="line">    redisTemplate.opsForValue().set(&quot;name&quot;,&quot;michong&quot;);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;读出redis中的数据</span><br><span class="line">    return redisTemplate.opsForValue().get(&quot;name&quot;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h4 id="四、整合定时器"><a href="#四、整合定时器" class="headerlink" title="四、整合定时器"></a>四、整合定时器</h4><h5 id="1、在启动项加上注解"><a href="#1、在启动项加上注解" class="headerlink" title="1、在启动项加上注解"></a>1、在启动项加上注解</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * 开启定时任务</span><br><span class="line"> *&#x2F;</span><br><span class="line">@EnableScheduling</span><br><span class="line">public class SbtestApplication &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">SpringApplication.run(SbtestApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h5 id="2、简单使用定时器"><a href="#2、简单使用定时器" class="headerlink" title="2、简单使用定时器"></a>2、简单使用定时器</h5><blockquote><p>注意加上@Component和@Scheduled注解</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * 定时任务</span><br><span class="line"> *</span><br><span class="line"> * @Author MiChong</span><br><span class="line"> * @Email: 1564666023@qq.com</span><br><span class="line"> * @Create 2018-03-28 9:02</span><br><span class="line"> * @Version: V1.0</span><br><span class="line"> *&#x2F;</span><br><span class="line">@Component</span><br><span class="line">public class TimeTesk &#123;</span><br><span class="line"></span><br><span class="line">    private static final SimpleDateFormat DATE_FORMAT &#x3D; new SimpleDateFormat(&quot;HH:mm:ss&quot;);</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     *    定义三秒执行的任务</span><br><span class="line">     *&#x2F;</span><br><span class="line">    @Scheduled(fixedRate &#x3D; 3000)</span><br><span class="line">    public void ShowTime()&#123;</span><br><span class="line">        System.out.println(&quot;现在时间：&quot;+DATE_FORMAT.format(new Date()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h5 id="3、使用cron表达式执行定时任务"><a href="#3、使用cron表达式执行定时任务" class="headerlink" title="3、使用cron表达式执行定时任务"></a>3、使用cron表达式执行定时任务</h5><p><a href="http://cron.qqe2.com/" target="_blank" rel="noopener">表达式地址</a></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">public class TimeTesk &#123;</span><br><span class="line"></span><br><span class="line">    private static final SimpleDateFormat DATE_FORMAT &#x3D; new SimpleDateFormat(&quot;HH:mm:ss&quot;);</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 从0开始，每隔三秒执行一次操作</span><br><span class="line">     *&#x2F;</span><br><span class="line">    @Scheduled(cron &#x3D; &quot;0&#x2F;3 * * * * ? &quot;)</span><br><span class="line">    public void ShowTime()&#123;</span><br><span class="line">        System.out.println(&quot;现在时间：&quot;+DATE_FORMAT.format(new Date()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h4 id="五、整合异步任务"><a href="#五、整合异步任务" class="headerlink" title="五、整合异步任务"></a>五、整合异步任务</h4><h5 id="1、启动项添加注解"><a href="#1、启动项添加注解" class="headerlink" title="1、启动项添加注解"></a>1、启动项添加注解</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * 开启异步任务</span><br><span class="line"> *&#x2F;</span><br><span class="line">@EnableAsync</span><br><span class="line">public class SbtestApplication &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">SpringApplication.run(SbtestApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h5 id="2、使用"><a href="#2、使用" class="headerlink" title="2、使用"></a>2、使用</h5><blockquote><p>在使用类上面加上@Component，在类中的方法上面加上@Async</p></blockquote><h4 id="六、拦截器的使用"><a href="#六、拦截器的使用" class="headerlink" title="六、拦截器的使用"></a>六、拦截器的使用</h4><h5 id="1、首先创建一个configer类"><a href="#1、首先创建一个configer类" class="headerlink" title="1、首先创建一个configer类"></a>1、首先创建一个configer类</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class WebMvcConfiger extends WebMvcConfigurerAdapter &#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 重写父类的方法，在此处对拦截器进行设置</span><br><span class="line">     * @param registry</span><br><span class="line">     *&#x2F;</span><br><span class="line">    @Override</span><br><span class="line">    public void addInterceptors(InterceptorRegistry registry) &#123;</span><br><span class="line">        &#x2F;**</span><br><span class="line">         * 拦截器按照顺序执行,如果将one改成 * 则表示拦截所有的请求</span><br><span class="line">         *&#x2F;</span><br><span class="line">        registry.addInterceptor(new TwoInterCeptor()).addPathPatterns(&quot;&#x2F;one&#x2F;**&quot;)</span><br><span class="line">                .addPathPatterns(&quot;&#x2F;two&#x2F;**&quot;);</span><br><span class="line">        registry.addInterceptor(new OneInterCeptor()).addPathPatterns(&quot;&#x2F;two&#x2F;**&quot;);</span><br><span class="line">        super.addInterceptors(registry);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h5 id="2、新建拦截器"><a href="#2、新建拦截器" class="headerlink" title="2、新建拦截器"></a>2、新建拦截器</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">public class OneInterCeptor implements HandlerInterceptor &#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 在请求处理之前进行调用（Controller方法调用之前）</span><br><span class="line">     *&#x2F;</span><br><span class="line">    @Override</span><br><span class="line">    public boolean preHandle(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o) throws Exception &#123;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 请求处理之后进行调用，但是在视图被渲染之前（Controller方法调用之后）</span><br><span class="line">     *&#x2F;</span><br><span class="line">    @Override</span><br><span class="line">    public void postHandle(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, ModelAndView modelAndView) throws Exception &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 在整个请求结束之后被调用，也就是在DispatcherServlet 渲染了对应的视图之后执行</span><br><span class="line">     * （主要是用于进行资源清理工作）</span><br><span class="line">     *&#x2F;</span><br><span class="line">    @Override</span><br><span class="line">    public void afterCompletion(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, Exception e) throws Exception &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public void returnErrorResponse(HttpServletResponse response)</span><br><span class="line">            throws IOException, UnsupportedEncodingException &#123;</span><br><span class="line">        OutputStream out&#x3D;null;</span><br><span class="line">        try&#123;</span><br><span class="line">            response.setCharacterEncoding(&quot;utf-8&quot;);</span><br><span class="line">            response.setContentType(&quot;text&#x2F;json&quot;);</span><br><span class="line">            out &#x3D; response.getOutputStream();</span><br><span class="line">            out.flush();</span><br><span class="line">        &#125; finally&#123;</span><br><span class="line">            if(out!&#x3D;null)&#123;</span><br><span class="line">                out.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> Redis </tag>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot整合Quartz实现定时任务（单任务、多任务）</title>
      <link href="/2018/05/07/SpringBoot%E6%95%B4%E5%90%88Quartz%E5%AE%9E%E7%8E%B0%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%EF%BC%88%E5%8D%95%E4%BB%BB%E5%8A%A1%E3%80%81%E5%A4%9A%E4%BB%BB%E5%8A%A1%EF%BC%89/"/>
      <url>/2018/05/07/SpringBoot%E6%95%B4%E5%90%88Quartz%E5%AE%9E%E7%8E%B0%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%EF%BC%88%E5%8D%95%E4%BB%BB%E5%8A%A1%E3%80%81%E5%A4%9A%E4%BB%BB%E5%8A%A1%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><blockquote><p>Quartz是OpenSymphony开源组织在Job scheduling领域又一个开源项目，它可以与J2EE与J2SE应用程序相结合也可以单独使用。Quartz可以用来创建简单或为运行十个，百个，甚至是好几万个Jobs这样复杂的程序。Jobs可以做成标准的Java组件或 EJBs</p></blockquote><h4 id="一、添加依赖"><a href="#一、添加依赖" class="headerlink" title="一、添加依赖"></a>一、添加依赖</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-test&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;scope&gt;test&lt;&#x2F;scope&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.quartz-scheduler&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;quartz&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;2.2.1&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;&lt;!-- 该依赖必加，里面有sping对schedule的支持 --&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-context-support&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--必须添加，要不然会出错，项目无法启动--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-tx&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;4.3.16.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;&#x2F;dependencies&gt;</span><br></pre></td></tr></table></figure></div><h4 id="二、相关配置"><a href="#二、相关配置" class="headerlink" title="二、相关配置"></a>二、相关配置</h4><blockquote><p>由于springboot是无xml配置，所以此处我们采用bean注解的方式实现quartz的配置</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuartzConfigration</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"jobDetail"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> MethodInvokingJobDetailFactoryBean <span class="title">detailFactoryBean</span><span class="params">(SchedulerTask task)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ScheduleTask为需要执行的任务</span></span><br><span class="line">        MethodInvokingJobDetailFactoryBean jobDetail = <span class="keyword">new</span> MethodInvokingJobDetailFactoryBean();</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         *  是否并发执行</span></span><br><span class="line"><span class="comment">         *  例如每5s执行一次任务，但是当前任务还没有执行完，就已经过了5s了，</span></span><br><span class="line"><span class="comment">         *  如果此处为true，则下一个任务会bing执行，如果此处为false，则下一个任务会等待上一个任务执行完后，再开始执行</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        jobDetail.setConcurrent(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        jobDetail.setName(<span class="string">"scheduler"</span>);<span class="comment">// 设置任务的名字</span></span><br><span class="line">        jobDetail.setGroup(<span class="string">"scheduler_group"</span>);<span class="comment">// 设置任务的分组，这些属性都可以存储在数据库中，在多任务的时候使用</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 这两行代码表示执行task对象中的scheduleTest方法。定时执行的逻辑都在scheduleTest。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        jobDetail.setTargetObject(task);</span><br><span class="line"></span><br><span class="line">        jobDetail.setTargetMethod(<span class="string">"start"</span>);</span><br><span class="line">        <span class="keyword">return</span> jobDetail;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"jobTrigger"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> CronTriggerFactoryBean <span class="title">cronJobTrigger</span><span class="params">(MethodInvokingJobDetailFactoryBean jobDetail)</span> </span>&#123;</span><br><span class="line">        CronTriggerFactoryBean tigger = <span class="keyword">new</span> CronTriggerFactoryBean();</span><br><span class="line">        tigger.setJobDetail(jobDetail.getObject());</span><br><span class="line">        tigger.setCronExpression(<span class="string">"0/2 * * * * ?"</span>);<span class="comment">// 表示每隔2秒钟执行一次</span></span><br><span class="line">        <span class="comment">//tigger.set</span></span><br><span class="line">        tigger.setName(<span class="string">"myTigger"</span>);<span class="comment">// trigger的name</span></span><br><span class="line">        <span class="keyword">return</span> tigger;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"scheduler"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> SchedulerFactoryBean <span class="title">schedulerFactory</span><span class="params">(Trigger cronJobTrigger)</span> </span>&#123;</span><br><span class="line">        SchedulerFactoryBean bean = <span class="keyword">new</span> SchedulerFactoryBean();</span><br><span class="line">        <span class="comment">//设置是否任意一个已定义的Job会覆盖现在的Job。默认为false，即已定义的Job不会覆盖现有的Job。</span></span><br><span class="line">        bean.setOverwriteExistingJobs(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// 延时启动，应用启动5秒后  ，定时器才开始启动</span></span><br><span class="line">        bean.setStartupDelay(<span class="number">5</span>);</span><br><span class="line">        <span class="comment">// 注册定时触发器</span></span><br><span class="line">        bean.setTriggers(cronJobTrigger);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//多任务时的Scheduler，动态设置Trigger。一个SchedulerFactoryBean可能会有多个Trigger</span></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"multitaskScheduler"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> SchedulerFactoryBean <span class="title">schedulerFactoryBean</span><span class="params">()</span></span>&#123;</span><br><span class="line">        SchedulerFactoryBean schedulerFactoryBean = <span class="keyword">new</span> SchedulerFactoryBean();</span><br><span class="line">        <span class="keyword">return</span> schedulerFactoryBean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h4 id="三、应用场景"><a href="#三、应用场景" class="headerlink" title="三、应用场景"></a>三、应用场景</h4><h5 id="1、单任务执行，并且通过控制器的接口实现时间间隔的动态修改"><a href="#1、单任务执行，并且通过控制器的接口实现时间间隔的动态修改" class="headerlink" title="1、单任务执行，并且通过控制器的接口实现时间间隔的动态修改"></a>1、单任务执行，并且通过控制器的接口实现时间间隔的动态修改</h5><h6 id="1）新建一个任务SchedulerTask-java"><a href="#1）新建一个任务SchedulerTask-java" class="headerlink" title="1）新建一个任务SchedulerTask.java"></a>1）新建一个任务SchedulerTask.java</h6><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--三个注释都要加上--&gt;</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@EnableScheduling</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SchedulerTask</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"活动开始！！！"</span>+<span class="keyword">new</span> Date());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h6 id="2）控制器执行"><a href="#2）控制器执行" class="headerlink" title="2）控制器执行"></a>2）控制器执行</h6><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuartzController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span>(name = <span class="string">"jobDetail"</span>)</span><br><span class="line">    <span class="keyword">private</span> JobDetail jobDetail;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span>(name = <span class="string">"scheduler"</span>)</span><br><span class="line">    <span class="keyword">private</span> Scheduler scheduler;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span>(name = <span class="string">"jobTrigger"</span>)</span><br><span class="line">    <span class="keyword">private</span> CronTrigger cronTrigger;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/&#123;second&#125;/quart"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">quartzTest</span><span class="params">(@PathVariable(<span class="string">"second"</span>)</span>Integer second) <span class="keyword">throws</span> SchedulerException </span>&#123;</span><br><span class="line">        CronTrigger cron  = (CronTrigger) scheduler.getTrigger(cronTrigger.getKey());</span><br><span class="line">        String currentCron = cron.getCronExpression();<span class="comment">// 当前Trigger使用的</span></span><br><span class="line">        System.err.println(<span class="string">"当前trigger使用的-"</span>+currentCron);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//修改每隔?秒执行任务</span></span><br><span class="line">        CronScheduleBuilder scheduleBuilder = CronScheduleBuilder.cronSchedule(<span class="string">"0/"</span>+second+<span class="string">" * * * * ?"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 按新的cronExpression表达式重新构建trigger</span></span><br><span class="line">        cron = cron.getTriggerBuilder().withIdentity(cronTrigger.getKey())</span><br><span class="line">                .withSchedule(scheduleBuilder).build();</span><br><span class="line"></span><br><span class="line">        scheduler.rescheduleJob(cronTrigger.getKey(),cron);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"-这是quartz测试！"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h5 id="2、多任务场景"><a href="#2、多任务场景" class="headerlink" title="2、多任务场景"></a>2、多任务场景</h5><h5 id="Part1"><a href="#Part1" class="headerlink" title="==Part1=="></a>==Part1==</h5><blockquote><p>:新建多个Tast.java，也就是一开始就设定好了任务，我们假设为 伪多任务</p></blockquote><h6 id="1）新建多个任务"><a href="#1）新建多个任务" class="headerlink" title="1）新建多个任务"></a>1）新建多个任务</h6><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SchedulerJob1</span> <span class="keyword">implements</span> <span class="title">Job</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(JobExecutionContext jobExecutionContext)</span> <span class="keyword">throws</span> JobExecutionException </span>&#123;</span><br><span class="line">        System.err.println(<span class="string">"这是第一个任务"</span>+<span class="keyword">new</span> Date());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SchedulerJob2</span> <span class="keyword">implements</span> <span class="title">Job</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(JobExecutionContext jobExecutionContext)</span> <span class="keyword">throws</span> JobExecutionException </span>&#123;</span><br><span class="line">        System.err.println(<span class="string">"这是第二个任务"</span>+<span class="keyword">new</span> Date());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h6 id="2）控制器"><a href="#2）控制器" class="headerlink" title="2）控制器"></a>2）控制器</h6><blockquote><p>通过下面的代码就可以实现两个任务交替执行，但是我们一般的应用场景是不确定的任务和执行时间，请看下一个解决方案</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuartzController2</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span>(name = <span class="string">"multitaskScheduler"</span>)</span><br><span class="line">    <span class="keyword">private</span> Scheduler scheduler;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"task1"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">task1</span><span class="params">()</span> <span class="keyword">throws</span> SchedulerException </span>&#123;</span><br><span class="line">        <span class="comment">//配置定时任务对应的Job，这里执行的是ScheduledJob类中定时的方法</span></span><br><span class="line">        JobDetail jobDetail = JobBuilder.newJob(SchedulerJob1.class).withIdentity("job1", "group1").build();</span><br><span class="line">        CronScheduleBuilder scheduleBuilder = CronScheduleBuilder.cronSchedule(<span class="string">"0/3 * * * * ?"</span>);</span><br><span class="line">        <span class="comment">// 每3s执行一次</span></span><br><span class="line">        CronTrigger cronTrigger = TriggerBuilder.newTrigger().withIdentity(<span class="string">"trigger1"</span>, <span class="string">"group1"</span>).withSchedule(scheduleBuilder).build();</span><br><span class="line">        scheduler.scheduleJob(jobDetail, cronTrigger);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"任务1"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"task2"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">task1</span><span class="params">()</span> <span class="keyword">throws</span> SchedulerException </span>&#123;</span><br><span class="line">        <span class="comment">//配置定时任务对应的Job，这里执行的是ScheduledJob类中定时的方法</span></span><br><span class="line">        JobDetail jobDetail = JobBuilder.newJob(SchedulerJob2.class).withIdentity("job2", "group1").build();</span><br><span class="line">        CronScheduleBuilder scheduleBuilder = CronScheduleBuilder.cronSchedule(<span class="string">"0/6 * * * * ?"</span>);</span><br><span class="line">        <span class="comment">// 每3s执行一次</span></span><br><span class="line">        CronTrigger cronTrigger = TriggerBuilder.newTrigger().withIdentity(<span class="string">"trigger2"</span>, <span class="string">"group1"</span>).withSchedule(scheduleBuilder).build();</span><br><span class="line">        scheduler.scheduleJob(jobDetail, cronTrigger);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"任务1"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h5 id="Part2"><a href="#Part2" class="headerlink" title="==Part2:=="></a>==Part2:==</h5><blockquote><p>有时候我们有新建活动之类的场景，这种场景就是活动数目不确定，活动开始时间不确定，所以我们需要用其他的方案来解决！</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">思路：</span><br><span class="line">主要是通过逻辑代码实现任务开始时间的修改，但是必须要修改任务名称和触发器（trigger）名称的修改，确保多个任务之间名称不一致，否则会报错！</span><br><span class="line"></span><br><span class="line">根据任务我们也可以定制使用数据库轮询的方式，确保任务的开启！</span><br><span class="line">主要是为了解决服务器关起和其它因素导致任务终止！</span><br></pre></td></tr></table></figure></div><h6 id="1）任务类"><a href="#1）任务类" class="headerlink" title="1）任务类"></a>1）任务类</h6><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SchedulerJob2</span> <span class="keyword">implements</span> <span class="title">Job</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(JobExecutionContext jobExecutionContext)</span> <span class="keyword">throws</span> JobExecutionException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//这里可以获取控制器绑定的值，实际应用中可以设置为某个活动的id,以便进行数据库操作</span></span><br><span class="line">        Object jobName = jobExecutionContext.getJobDetail().getKey();</span><br><span class="line">        System.err.println(<span class="string">"这是"</span>+jobName+<span class="string">"任务"</span>+<span class="keyword">new</span> Date());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h6 id="2）控制器类"><a href="#2）控制器类" class="headerlink" title="2）控制器类"></a>2）控制器类</h6><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line">   <span class="meta">@RequestMapping</span>(<span class="string">"task2/&#123;jobName&#125;"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> Object <span class="title">task2</span><span class="params">(@PathVariable(value = <span class="string">"jobName"</span>)</span> String jobName) <span class="keyword">throws</span> SchedulerException </span>&#123;</span><br><span class="line">       <span class="comment">//配置定时任务对应的Job，这里执行的是ScheduledJob类中定时的方法</span></span><br><span class="line">       JobDetail jobDetail = JobBuilder</span><br><span class="line">               .newJob(SchedulerJob2<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">               .usingJobData("jobName",jobName)</span><br><span class="line">               .withIdentity(jobName, <span class="string">"group1"</span>)</span><br><span class="line">               .build();</span><br><span class="line"></span><br><span class="line">       CronScheduleBuilder scheduleBuilder = CronScheduleBuilder.cronSchedule(<span class="string">"0/2 * * * * ?"</span>);</span><br><span class="line">       <span class="comment">// 每3s执行一次</span></span><br><span class="line">       CronTrigger cronTrigger = TriggerBuilder.newTrigger()</span><br><span class="line">               .withIdentity(<span class="string">"trigger2"</span>+jobName, <span class="string">"group1"</span>)</span><br><span class="line">               .withSchedule(scheduleBuilder)</span><br><span class="line">               .build();</span><br><span class="line"></span><br><span class="line">       scheduler.scheduleJob(jobDetail,cronTrigger);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> jobName;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></div><h6 id="3）获取所有的在线job"><a href="#3）获取所有的在线job" class="headerlink" title="3）获取所有的在线job"></a>3）获取所有的在线job</h6><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line">   <span class="meta">@RequestMapping</span>(<span class="string">"jobs"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> Object <span class="title">Jobs</span><span class="params">()</span> <span class="keyword">throws</span> SchedulerException </span>&#123;</span><br><span class="line"></span><br><span class="line">       Set&lt;TriggerKey&gt; triggerKeys = scheduler.getTriggerKeys(GroupMatcher.anyTriggerGroup());</span><br><span class="line"></span><br><span class="line">       <span class="comment">//获取所有的job集合</span></span><br><span class="line">       Set&lt;JobKey&gt; jobKeys = scheduler.getJobKeys(GroupMatcher.anyJobGroup());</span><br><span class="line"></span><br><span class="line">       <span class="comment">//可以在这进行线上任务和数据库任务匹配操作，确保该进行的活动进行活动</span></span><br><span class="line">       </span><br><span class="line">       <span class="keyword">return</span> jobKeys;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></div><p>job集合</p><p><a href="https://ws1.sinaimg.cn/large/005EneYkgy1fr2q86loa8j3056067dfn.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://ws1.sinaimg.cn/large/005EneYkgy1fr2q86loa8j3056067dfn.jpg" class="lazyload"></a>`</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> 系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> Quartz </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Cloud构建微服务架构：服务注册与发现（Eureka、Consul)</title>
      <link href="/2018/04/21/Spring%20Cloud%E6%9E%84%E5%BB%BA%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0%EF%BC%88Eureka%E3%80%81Consul)%20/"/>
      <url>/2018/04/21/Spring%20Cloud%E6%9E%84%E5%BB%BA%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0%EF%BC%88Eureka%E3%80%81Consul)%20/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h4 id="一、Spring-Cloud-Eureka"><a href="#一、Spring-Cloud-Eureka" class="headerlink" title="一、Spring Cloud Eureka"></a>一、Spring Cloud Eureka</h4><blockquote><p>Spring Cloud Eureka是Spring Cloud Netflix项目下的服务治理模块。而Spring Cloud Netflix项目是Spring Cloud的子项目之一，主要内容是对Netflix公司一系列开源产品的包装，它为Spring Boot应用提供了自配置的Netflix OSS整合。通过一些简单的注解，开发者就可以快速的在应用中配置一下常用模块并构建庞大的分布式系统。它主要提供的模块包括：服务发现（Eureka），断路器（Hystrix），智能路由（Zuul），客户端负载均衡（Ribbon）等。</p></blockquote><h5 id="1、创建“服务注册中心”"><a href="#1、创建“服务注册中心”" class="headerlink" title="1、创建“服务注册中心”-"></a>1、创建“服务注册中心”-</h5><p>添加依赖</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;parent&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-parent&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.5.4.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;relativePath&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;parent&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-cloud-starter-eureka-server&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;&#x2F;dependencies&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependencyManagement&gt;</span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-cloud-dependencies&lt;&#x2F;artifactId&gt;</span><br><span class="line">           &lt;version&gt;Dalston.SR1&lt;&#x2F;version&gt;</span><br><span class="line">           &lt;type&gt;pom&lt;&#x2F;type&gt;</span><br><span class="line">           &lt;scope&gt;import&lt;&#x2F;scope&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;&#x2F;dependencies&gt;</span><br><span class="line">&lt;&#x2F;dependencyManagement&gt;</span><br></pre></td></tr></table></figure></div><blockquote><p>比较繁琐，可以直接通过idea添加<br><a href="https://ws1.sinaimg.cn/large/005EneYkgy1fqi3remmeej30rj07vjry.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://ws1.sinaimg.cn/large/005EneYkgy1fqi3remmeej30rj07vjry.jpg" class="lazyload"></a></p></blockquote><h5 id="2、通过注解开启服务"><a href="#2、通过注解开启服务" class="headerlink" title="2、通过注解开启服务"></a>2、通过注解开启服务</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootApplication</span><br><span class="line">@EnableEurekaServer</span><br><span class="line">public class EurekaServerApplication &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">SpringApplication.run(EurekaServerApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h5 id="3、修改配置文件"><a href="#3、修改配置文件" class="headerlink" title="3、修改配置文件"></a>3、修改配置文件</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">server.port&#x3D;110</span><br><span class="line"></span><br><span class="line">eureka.instance.hostname&#x3D;localhost</span><br><span class="line">eureka.client.register-with-eureka&#x3D;false</span><br><span class="line">eureka.client.fetch-registry&#x3D;false</span><br><span class="line">eureka.client.service-url.defaultZone&#x3D;http:&#x2F;&#x2F;$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;&#x2F;eureka&#x2F;</span><br></pre></td></tr></table></figure></div><h5 id="4、创建“服务提供方”（client）"><a href="#4、创建“服务提供方”（client）" class="headerlink" title="4、创建“服务提供方”（client）"></a>4、创建“服务提供方”（client）</h5><h6 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h6><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;parent&gt; </span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-parent&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.5.4.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;relativePath&#x2F;&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class="line">&lt;&#x2F;parent&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-cloud-starter-eureka&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;&#x2F;dependencies&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependencyManagement&gt;</span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-cloud-dependencies&lt;&#x2F;artifactId&gt;</span><br><span class="line">           &lt;version&gt;Dalston.SR1&lt;&#x2F;version&gt;</span><br><span class="line">           &lt;type&gt;pom&lt;&#x2F;type&gt;</span><br><span class="line">           &lt;scope&gt;import&lt;&#x2F;scope&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;&#x2F;dependencies&gt;</span><br><span class="line">&lt;&#x2F;dependencyManagement&gt;</span><br></pre></td></tr></table></figure></div><h6 id="添加配置"><a href="#添加配置" class="headerlink" title="添加配置"></a>添加配置</h6><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">spring.application.name&#x3D;eureka-client</span><br><span class="line">server.port&#x3D;2001</span><br><span class="line">eureka.client.serviceUrl.defaultZone&#x3D;http:&#x2F;&#x2F;localhost:110&#x2F;eureka&#x2F;</span><br></pre></td></tr></table></figure></div><h6 id="在application中添加注解"><a href="#在application中添加注解" class="headerlink" title="在application中添加注解"></a>在application中添加注解</h6><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootApplication</span><br><span class="line">@EnableDiscoveryClient</span><br><span class="line">public class ServiceConsumerApplication &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">SpringApplication.run(ServiceConsumerApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Bean</span><br><span class="line">public RestTemplate restTemplate(RestTemplateBuilder builder) &#123;</span><br><span class="line">&#x2F;&#x2F; Do any additional configuration here</span><br><span class="line">return builder.build();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h6 id="在控制器中使用"><a href="#在控制器中使用" class="headerlink" title="在控制器中使用"></a>在控制器中使用</h6><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">public class DcController &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    DiscoveryClient discoveryClient;</span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;&#x2F;dc&quot;)</span><br><span class="line">    public String dc() &#123;</span><br><span class="line">        String services &#x3D; &quot;Services: &quot; + discoveryClient.getServices();</span><br><span class="line">        System.out.println(services);</span><br><span class="line">        return services;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>打开连接<a href="http://localhost:110" target="_blank" rel="noopener">http://localhost:110</a></p><p><a href="https://ws1.sinaimg.cn/large/005EneYkgy1fqi7jqltmzj31gl0okgnp.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://ws1.sinaimg.cn/large/005EneYkgy1fqi7jqltmzj31gl0okgnp.jpg" class="lazyload"></a></p><h5 id="5、创建eureka消费者"><a href="#5、创建eureka消费者" class="headerlink" title="5、创建eureka消费者"></a>5、创建eureka消费者</h5><blockquote><p>eureka消费者和提供者结构配置一样</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--消费提供者提供的接口--&gt;</span><br><span class="line">@RestController</span><br><span class="line">public class IndexController &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    LoadBalancerClient loadBalancerClient;</span><br><span class="line">    @Autowired</span><br><span class="line">    RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;&#x2F;consumer&quot;)</span><br><span class="line">    public String dc() &#123;</span><br><span class="line">        ServiceInstance serviceInstance &#x3D; loadBalancerClient.choose(&quot;eureka-client&quot;);</span><br><span class="line">        String url &#x3D; &quot;http:&#x2F;&#x2F;&quot; + serviceInstance.getHost() + &quot;:&quot; + serviceInstance.getPort() + &quot;&#x2F;dc&quot;;</span><br><span class="line">        System.out.println(url);</span><br><span class="line"></span><br><span class="line">        ServiceInstance instance &#x3D; loadBalancerClient.choose(&quot;eureka-consumer&quot;);</span><br><span class="line">        System.out.println(instance.getHost()+&quot;:&quot;+instance.getPort());</span><br><span class="line">        return restTemplate.getForObject(url, String.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h4 id="二、Spring-Cloud-Consul"><a href="#二、Spring-Cloud-Consul" class="headerlink" title="二、Spring Cloud Consul"></a>二、Spring Cloud Consul</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Spring Cloud Consul项目是针对Consul的服务治理实现。Consul是一个分布式高可用的系统</span><br><span class="line">，它包含多个组件，但是作为一个整体，在微服务架构中为我们的基础设施提供服务发现和服务配置的工具。</span><br><span class="line">它包含了下面几个特性：</span><br><span class="line"></span><br><span class="line">服务发现</span><br><span class="line">健康检查</span><br><span class="line">Key&#x2F;Value存储</span><br><span class="line">多数据中心</span><br></pre></td></tr></table></figure></div><h5 id="1、添加依赖"><a href="#1、添加依赖" class="headerlink" title="1、添加依赖"></a>1、添加依赖</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-starter-consul-config&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-starter-consul-discovery&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-test&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;scope&gt;test&lt;&#x2F;scope&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-actuator&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;dependencies&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependencyManagement&gt;</span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-dependencies&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;version&gt;$&#123;spring-cloud.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">&lt;type&gt;pom&lt;&#x2F;type&gt;</span><br><span class="line">&lt;scope&gt;import&lt;&#x2F;scope&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;&#x2F;dependencies&gt;</span><br><span class="line">&lt;&#x2F;dependencyManagement&gt;</span><br></pre></td></tr></table></figure></div><h5 id="2、properties添加配置"><a href="#2、properties添加配置" class="headerlink" title="2、properties添加配置"></a>2、properties添加配置</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">spring.cloud.consul.host&#x3D;localhost</span><br><span class="line">spring.cloud.consul.port&#x3D;8500</span><br></pre></td></tr></table></figure></div><h5 id="3、开启服务"><a href="#3、开启服务" class="headerlink" title="3、开启服务"></a>3、开启服务</h5><blockquote><p>需要本地开启consul服务，去官网下载服务端软件</p></blockquote><p><a href="https://www.consul.io/" target="_blank" rel="noopener">https://www.consul.io/</a></p><p><a href="https://ws1.sinaimg.cn/large/005EneYkgy1fqiw3huac5j317l0gfn08.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://ws1.sinaimg.cn/large/005EneYkgy1fqiw3huac5j317l0gfn08.jpg" class="lazyload"></a></p><blockquote><p>从官网下载对应版本的服务端软件，Windows系统在当前的软件的目录下面打开cmd，并且输入consul agent -dev,即可开启服务</p></blockquote><h5 id="4、开启spring-boot项目"><a href="#4、开启spring-boot项目" class="headerlink" title="4、开启spring boot项目"></a>4、开启spring boot项目</h5><p><a href="http://localhost://8500" target="_blank" rel="noopener">输入http://localhost://8500</a>即可打开UI界面</p><p><a href="https://ws1.sinaimg.cn/large/005EneYkgy1fqi9an22ntj315c0l40u3.jpg" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="https://ws1.sinaimg.cn/large/005EneYkgy1fqi9an22ntj315c0l40u3.jpg" class="lazyload"></a></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> 系统 </category>
          
          <category> 微服务架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringSession(Springboot版本)</title>
      <link href="/2018/04/19/SpringSession(Springboot%E7%89%88%E6%9C%AC)/"/>
      <url>/2018/04/19/SpringSession(Springboot%E7%89%88%E6%9C%AC)/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h4 id="特性："><a href="#特性：" class="headerlink" title="特性："></a>特性：</h4><ul><li>使用GemFire来构建C/S架构的httpSession（不关注）</li><li>使用第三方仓储来实现集群session管理，也就是常说的分布式session容器，替换应用容器（如tomcat的session容器）。仓储的实现，Spring Session提供了三个实现（redis，mongodb，jdbc），其中redis使我们最常用的。程序的实现，使用AOP技术，几乎可以做到透明化地替换。（核心）</li><li>可以非常方便的扩展Cookie和自定义Session相关的Listener，Filter。</li><li>可以很方便的与Spring Security集成，增加诸如findSessionsByUserName，rememberMe，限制同一个账号可以同时在线的Session数（如设置成1，即可达到把前一次登录顶掉的效果）等等</li></ul><blockquote><p>本文的例子使用springsession结合redis实现session的缓存，解决单点登录的分布式session存储问题</p></blockquote><h4 id="1、添加依赖"><a href="#1、添加依赖" class="headerlink" title="1、添加依赖"></a>1、添加依赖</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.session&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-session-data-redis&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure></div><h4 id="2、添加一个配置"><a href="#2、添加一个配置" class="headerlink" title="2、添加一个配置"></a>2、添加一个配置</h4><blockquote><p>配置类开启Redis Http Session，基本是0配置，只需要让主配置扫描到@EnableRedisHttpSession即可</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableRedisHttpSession</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpSessionConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h4 id="3、配置文件"><a href="#3、配置文件" class="headerlink" title="3、配置文件"></a>3、配置文件</h4><blockquote><p>配置文件application.yml，配置连接的redis信息</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  redis:</span><br><span class="line">    host: localhost</span><br><span class="line">    port: 6379</span><br><span class="line">    database: 0</span><br></pre></td></tr></table></figure></div><p><strong><em>注意：测试使用redis3会报异常，建议使用4及4以上</em></strong></p><h4 id="4、编写测试controller"><a href="#4、编写测试controller" class="headerlink" title="4、编写测试controller"></a>4、编写测试controller</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> FindByIndexNameSessionRepository&lt;? extends ExpiringSession&gt; sessionRepository;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"cookie/&#123;browser&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">cookie</span><span class="params">(@PathVariable(<span class="string">"browser"</span>)</span> String browser, HttpServletRequest request, HttpSession session) </span>&#123;</span><br><span class="line">        <span class="comment">//取出session中的browser</span></span><br><span class="line">        Object sessionBrowser = session.getAttribute(<span class="string">"browser"</span>);</span><br><span class="line">        <span class="keyword">if</span> (sessionBrowser == <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"不存在session，设置browser="</span> + browser);</span><br><span class="line">            session.setAttribute(<span class="string">"browser"</span>, browser);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"存在session，browser="</span> + sessionBrowser.toString());</span><br><span class="line">        &#125;</span><br><span class="line">        Cookie[] cookies = request.getCookies();</span><br><span class="line">        <span class="keyword">if</span> (cookies != <span class="keyword">null</span> &amp;&amp; cookies.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Cookie cookie : cookies) &#123;</span><br><span class="line">                System.out.println(cookie.getName() + <span class="string">" : "</span> + cookie.getValue());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div><h4 id="5、结果"><a href="#5、结果" class="headerlink" title="5、结果"></a>5、结果</h4><p><a href="https://ws1.sinaimg.cn/large/005EneYkgy1fqhsfzkf9oj30j603ot8u.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://ws1.sinaimg.cn/large/005EneYkgy1fqhsfzkf9oj30j603ot8u.jpg" class="lazyload"></a></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">​1 spring:session是默认的Redis HttpSession前缀（redis中，我们常用’:’作为分割符）。</span><br><span class="line"></span><br><span class="line">2 每一个session都会有三个相关的key，第三个key最为重要，它是一个HASH数据结构，</span><br><span class="line">将内存中的session信息序列化到了redis中。如上文的browser，就被记录为sessionAttr:browser&#x3D;chrome,</span><br><span class="line">还有一些meta信息，如创建时间，最后访问时间等。</span><br><span class="line"></span><br><span class="line">3 另外两个key，expirations:1504446540000和sessions:expires:7079…我发现大多数的文章都没有对其分析，</span><br><span class="line">前者是一个SET类型，后者是一个STRING类型，可能会有读者发出这样的疑问，redis自身就有过期时间的设置方式TTL，</span><br><span class="line">为什么要额外添加两个key来维持session过期的特性呢？这需要对redis有一定深入的了解才能想到这层设计。</span><br><span class="line">当然这不是本节的重点，简单提一下：redis清除过期key的行为是一个异步行为且是一个低优先级的行为，</span><br><span class="line">用文档中的原话来说便是，可能会导致session不被清除。于是引入了专门的expiresKey，来专门负责session的清除，</span><br><span class="line">包括我们自己在使用redis时也需要关注这一点。在开发层面，我们仅仅需要关注第三个key就行了。</span><br></pre></td></tr></table></figure></div><h4 id="6、使用自定义CookieSerializer"><a href="#6、使用自定义CookieSerializer" class="headerlink" title="6、使用自定义CookieSerializer"></a>6、使用自定义CookieSerializer</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> CookieSerializer <span class="title">cookieSerializer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    DefaultCookieSerializer serializer = <span class="keyword">new</span> DefaultCookieSerializer();</span><br><span class="line">    serializer.setCookieName(<span class="string">"JSESSIONID"</span>);</span><br><span class="line">    serializer.setCookiePath(<span class="string">"/"</span>);</span><br><span class="line">    serializer.setDomainNamePattern(<span class="string">"^.+?\\.(\\w+\\.[a-z]+)$"</span>);</span><br><span class="line">    <span class="keyword">return</span> serializer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>使用上述配置后，我们可以将Spring Session默认的Cookie Key从SESSION替换为原生的JSESSIONID。而CookiePath设置为根路径且配置了相关的正则表达式，可以达到同父域下的单点登录的效果，在未涉及跨域的单点登录系统中，这是一个非常优雅的解决方案。如果我们的当前域名是moe.cnkirito.moe，该正则会将Cookie设置在父域cnkirito.moe中，如果有另一个相同父域的子域名blog.cnkirito.moe也会识别这个Cookie，便可以很方便的实现同父域下的单点登录。</p></blockquote><h4 id="7、根据用户名查找用户归属的SESSION"><a href="#7、根据用户名查找用户归属的SESSION" class="headerlink" title="7、根据用户名查找用户归属的SESSION"></a>7、根据用户名查找用户归属的SESSION</h4><blockquote><p>这个特性听起来非常有意思，你可以在一些有趣的场景下使用它，如知道用户名后即可删除其SESSION。一直以来我们都是通过线程绑定的方式，让用户操作自己的SESSION，包括获取用户名等操作。但如今它提供了一个反向的操作，根据用户名获取SESSION，恰巧，在一些项目中真的可以使用到这个特性，最起码，当别人问起你，或者讨论到和SESSION相关的知识时，你可以明晰一点，这是可以做到的。</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CookieController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    FindByIndexNameSessionRepository&lt;? extends ExpiringSession&gt; sessionRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/test/findByUsername"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map <span class="title">findByUsername</span><span class="params">(@RequestParam String username)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, ? extends ExpiringSession&gt; usersSessions = sessionRepository.findByIndexNameAndIndexValue(FindByIndexNameSessionRepository.PRINCIPAL_NAME_INDEX_NAME, username);</span><br><span class="line">        <span class="keyword">return</span> usersSessions;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> SpringSession </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JWT登录信息加密</title>
      <link href="/2018/04/11/JWT%E7%99%BB%E5%BD%95%E4%BF%A1%E6%81%AF%E5%8A%A0%E5%AF%86/"/>
      <url>/2018/04/11/JWT%E7%99%BB%E5%BD%95%E4%BF%A1%E6%81%AF%E5%8A%A0%E5%AF%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h4 id="1、背景"><a href="#1、背景" class="headerlink" title="1、背景"></a>1、背景</h4><p>对于传统的单点登录系统，使用cookie和session的方式存储用户登录信息，但是对于安全性要求较高的企业–金融企业，就需要对用户的信息进行加密存储，防止客户信息泄露。</p><p><a href="https://ws1.sinaimg.cn/large/005EneYkgy1fq8uglu1ekj30yl0cijst.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://ws1.sinaimg.cn/large/005EneYkgy1fq8uglu1ekj30yl0cijst.jpg" class="lazyload"></a></p><h4 id="2、JWT构成"><a href="#2、JWT构成" class="headerlink" title="2、JWT构成"></a>2、JWT构成</h4><h6 id="JWT—-JSON-Web-Token"><a href="#JWT—-JSON-Web-Token" class="headerlink" title="JWT—-JSON Web Token"></a>JWT—-JSON Web Token</h6><p><a href="https://ws1.sinaimg.cn/large/005EneYkgy1fq8uj6ep36j30vv0gpwgw.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://ws1.sinaimg.cn/large/005EneYkgy1fq8uj6ep36j30vv0gpwgw.jpg" class="lazyload"></a></p><blockquote><p>第一部分我们称它为头部（header)</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">完整的头部就像下面这样的JSON：</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&quot;typ&quot;: &quot;JWT&quot;,  &#x2F;&#x2F;声明类型，这里是jwt</span><br><span class="line"></span><br><span class="line">&quot;alg&quot;: &quot;HS256&quot; &#x2F;&#x2F;声明加密的算法 通常直接使用 HMAC SHA256</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>第二部分我们称其为载荷（payload)</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">载荷就是存放有效信息的地方。</span><br><span class="line">这个名字像是特指飞机上承载的货品，这些有效信息包含三个部分</span><br><span class="line"></span><br><span class="line">标准中注册的声明</span><br><span class="line"></span><br><span class="line">公共的声明</span><br><span class="line"></span><br><span class="line">私有的声明</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">标准中注册的声明 (建议但不强制使用) ：</span><br><span class="line"></span><br><span class="line">iss: jwt签发者</span><br><span class="line"></span><br><span class="line">sub: jwt所面向的用户</span><br><span class="line"></span><br><span class="line">aud: 接收jwt的一方</span><br><span class="line"></span><br><span class="line">exp: jwt的过期时间，这个过期时间必须要大于签发时间</span><br><span class="line"></span><br><span class="line">nbf: 定义在什么时间之前，该jwt都是不可用的.</span><br><span class="line"></span><br><span class="line">iat: jwt的签发时间</span><br><span class="line"></span><br><span class="line">jti: jwt的唯一身份标识，主要用来作为一次性token,从而回避重放攻击。</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">公共的声明 ：</span><br><span class="line"></span><br><span class="line">公共的声明可以添加任何的信息，一般添加用户的相关信息或其他业务需要的必要信息.但不建议添加敏感信息，因为该部分在客户端可解密.</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">私有的声明 ：</span><br><span class="line"></span><br><span class="line">私有声明是提供者和消费者所共同定义的声明，一般不建议存放敏感信息，因为base64是对称解密的，意味着该部分信息可以归类为明文信息。</span><br><span class="line"></span><br><span class="line">定义一个payload：</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&quot;name&quot;:&quot;MiChong&quot;,</span><br><span class="line"></span><br><span class="line">&quot;age&quot;:&quot;23&quot;,</span><br><span class="line"></span><br><span class="line">&quot;org&quot;:&quot;天王盖地虎&quot;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>第三部分是签证（signature)</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">jwt的第三部分是一个签证信息，这个签证信息由三部分组成：</span><br><span class="line"></span><br><span class="line">header (base64后的)</span><br><span class="line"></span><br><span class="line">payload (base64后的)</span><br><span class="line"></span><br><span class="line">secret</span><br></pre></td></tr></table></figure></div><h4 id="3、Java实现"><a href="#3、Java实现" class="headerlink" title="3、Java实现"></a>3、Java实现</h4><h6 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h6><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.auth0&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;java-jwt&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.3.0&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure></div><h6 id="加密解密实现"><a href="#加密解密实现" class="headerlink" title="加密解密实现"></a>加密解密实现</h6><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> cn.buildworld.daliy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.JWT;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.JWTVerifier;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.algorithms.Algorithm;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.interfaces.Claim;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.interfaces.DecodedJWT;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * jwt加密解密工具</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> MiChong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Email</span>: 1564666023@qq.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Create</span> 2018-04-11 16:16</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span>: V1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtToken</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 公共密钥</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SECRET = <span class="string">"michong"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> UnsupportedEncodingException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">createToken</span><span class="params">()</span> <span class="keyword">throws</span> UnsupportedEncodingException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//签发时间</span></span><br><span class="line">        Date date = <span class="keyword">new</span> Date();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//过期时间- 1分钟过期</span></span><br><span class="line">        Calendar nowTime = Calendar.getInstance();</span><br><span class="line">        nowTime.add(Calendar.MINUTE,<span class="number">1</span>);</span><br><span class="line">        Date expiresDate = nowTime.getTime();</span><br><span class="line"></span><br><span class="line">        Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"alg"</span>,<span class="string">"HS256"</span>);</span><br><span class="line">        map.put(<span class="string">"typ"</span>,<span class="string">"JWT"</span>);</span><br><span class="line">        String token = JWT.create()</span><br><span class="line">                .withClaim(<span class="string">"name"</span>, <span class="string">"michong"</span>)</span><br><span class="line">                <span class="comment">//设置过期时间</span></span><br><span class="line">                .withExpiresAt(expiresDate)</span><br><span class="line">                <span class="comment">//设置签发时间</span></span><br><span class="line">                .withIssuedAt(date)</span><br><span class="line">                .sign(Algorithm.HMAC256(SECRET));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> token;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解密</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> UnsupportedEncodingException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String,Claim&gt; <span class="title">verifyToken</span><span class="params">(String token)</span> <span class="keyword">throws</span> UnsupportedEncodingException </span>&#123;</span><br><span class="line"></span><br><span class="line">        JWTVerifier verifier = JWT.require(Algorithm.HMAC256(SECRET))</span><br><span class="line">        .build();</span><br><span class="line"></span><br><span class="line">        DecodedJWT jwt = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//解密</span></span><br><span class="line">            jwt = verifier.verify(token);</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"token已经失效"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> jwt.getClaims();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h4 id="四、测试"><a href="#四、测试" class="headerlink" title="四、测试"></a>四、测试</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Auth0WithJWT</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> UnsupportedEncodingException </span>&#123;</span><br><span class="line"></span><br><span class="line">        String token = JwtToken.createToken();</span><br><span class="line">        System.out.println(token);</span><br><span class="line">        </span><br><span class="line">        Map&lt;String, Claim&gt; stringClaimMap = JwtToken.verifyToken(token);</span><br><span class="line">        System.out.println(stringClaimMap.get(<span class="string">"name"</span>).asString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h6 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h6><p><a href="https://ws1.sinaimg.cn/large/005EneYkgy1fq8vbms62jj30jf052mxe.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://ws1.sinaimg.cn/large/005EneYkgy1fq8vbms62jj30jf052mxe.jpg" class="lazyload"></a></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot之API--Swagger2接口文档管理</title>
      <link href="/2018/03/29/SpringBoot%E4%B9%8BAPI--Swagger2%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3%E7%AE%A1%E7%90%86/"/>
      <url>/2018/03/29/SpringBoot%E4%B9%8BAPI--Swagger2%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h5 id="1、添加依赖"><a href="#1、添加依赖" class="headerlink" title="1、添加依赖"></a>1、添加依赖</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">      <span class="comment">&lt;!--Swagger2--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div><h5 id="2、创建Swagger2配置类，和application处于同一级"><a href="#2、创建Swagger2配置类，和application处于同一级" class="headerlink" title="2、创建Swagger2配置类，和application处于同一级"></a>2、创建Swagger2配置类，和application处于同一级</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.ApiInfoBuilder;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.PathSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.RequestHandlerSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.ApiInfo;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spi.DocumentationType;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spring.web.plugins.Docket;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * API接口文档配置</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> MiChong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Email</span>: 1564666023@qq.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Create</span> 2018-03-29 16:32</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span>: V1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger</span>2</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Swagger2</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">createRestApi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">                .select()</span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">"cn.buildworld.sbtest.web"</span>))</span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ApiInfo <span class="title">apiInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiInfoBuilder()</span><br><span class="line">                .title(<span class="string">"Spring Boot中使用Swagger2构建RESTful APIs"</span>)</span><br><span class="line">                .contact(<span class="string">"MiChong"</span>)</span><br><span class="line">                .version(<span class="string">"1.0"</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>如上代码所示，通过@Configuration注解，让Spring来加载该类配置。再通过@EnableSwagger2注解来启用Swagger2。<br>再通过createRestApi函数创建Docket的Bean之后，apiInfo()用来创建该Api的基本信息（这些基本信息会展现在文档页面中）。select()函数返回一个ApiSelectorBuilder实例用来控制哪些接口暴露给Swagger来展现，本例采用指定扫描的包路径来定义，Swagger会扫描该包下所有Controller定义的API，并产生文档内容（除了被@ApiIgnore指定的请求）。</p></blockquote><h5 id="3、添加文档内容"><a href="#3、添加文档内容" class="headerlink" title="3、添加文档内容"></a>3、添加文档内容</h5><blockquote><p>在完成了上述配置后，其实已经可以生产文档内容，但是这样的文档主要针对请求本身，而描述主要来源于函数等命名产生，对用户并不友好，我们通常需要自己增加一些说明来丰富文档内容。如下所示，我们通过@ApiOperation注解来给API增加说明、通过@ApiImplicitParams、@ApiImplicitParam注解来给参数增加说明。</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> HseCustomerService hseCustomerService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation</span>(value = <span class="string">"客户列表"</span>)</span><br><span class="line">    <span class="meta">@ApiImplicitParams</span>(&#123;</span><br><span class="line">            <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"fromId"</span>,value = <span class="string">"起始位置"</span>,required = <span class="keyword">false</span>,dataType = <span class="string">"Integer"</span>),</span><br><span class="line">            <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"limit"</span>,value = <span class="string">"每页显示条数"</span>,required = <span class="keyword">false</span>,dataType = <span class="string">"Integer"</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"list"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getList</span><span class="params">(@RequestParam(defaultValue = <span class="string">"0"</span>)</span>Integer fromId,</span></span><br><span class="line"><span class="function">                          @<span class="title">RequestParam</span><span class="params">(defaultValue = <span class="string">"2"</span>)</span>Integer limit )</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//初始化page插件，传入分页参数</span></span><br><span class="line">        PageHelper.startPage(fromId,limit);</span><br><span class="line">        List&lt;HseCustomer&gt; list = hseCustomerService.getList();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//包装想要返回的结果，包含多种信息</span></span><br><span class="line">        PageInfo pageInfo = <span class="keyword">new</span> PageInfo(list);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> pageInfo;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div><h5 id="4、最后显示效果"><a href="#4、最后显示效果" class="headerlink" title="4、最后显示效果"></a>4、最后显示效果</h5><p>本地的访问地址：<br><a href="http://localhost:9091/swagger-ui.html" target="_blank" rel="noopener">http://localhost:9091/swagger-ui.html</a><br><a href="https://ws1.sinaimg.cn/large/005EneYkgy1fptt65qlusj30so0piq4o.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://ws1.sinaimg.cn/large/005EneYkgy1fptt65qlusj30so0piq4o.jpg" class="lazyload"></a></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot整合Dubbo</title>
      <link href="/2018/03/29/SpringBoot%E6%95%B4%E5%90%88Dubbo/"/>
      <url>/2018/03/29/SpringBoot%E6%95%B4%E5%90%88Dubbo/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><a href="https://github.com/alibaba/dubbo-spring-boot-starter" target="_blank" rel="noopener">官方Github地址</a></p><h4 id="一、服务端开发"><a href="#一、服务端开发" class="headerlink" title="一、服务端开发"></a>一、服务端开发</h4><h6 id="1、添加依赖"><a href="#1、添加依赖" class="headerlink" title="1、添加依赖"></a>1、添加依赖</h6><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.alibaba.spring.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;dubbo-spring-boot-starter&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.0.0&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure></div><h6 id="2、在application-properties添加dubbo的相关配置信息"><a href="#2、在application-properties添加dubbo的相关配置信息" class="headerlink" title="2、在application.properties添加dubbo的相关配置信息"></a>2、在application.properties添加dubbo的相关配置信息</h6><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># Spring boot application</span><br><span class="line">spring.application.name &#x3D; dubbo-provider-demo</span><br><span class="line">server.port &#x3D; 9090</span><br><span class="line">management.port &#x3D; 9091</span><br><span class="line"></span><br><span class="line"># Base packages to scan Dubbo Components (e.g., @Service, @Reference)</span><br><span class="line">dubbo.scan.basePackages  &#x3D; com.alibaba.boot.dubbo.demo.provider.service</span><br><span class="line"></span><br><span class="line"># Dubbo Config properties</span><br><span class="line">## ApplicationConfig Bean</span><br><span class="line">dubbo.application.id &#x3D; dubbo-provider-demo</span><br><span class="line">dubbo.application.name &#x3D; dubbo-provider-demo</span><br><span class="line"></span><br><span class="line">## ProtocolConfig Bean</span><br><span class="line">dubbo.protocol.id &#x3D; dubbo</span><br><span class="line">dubbo.protocol.name &#x3D; dubbo</span><br><span class="line">dubbo.protocol.port &#x3D; 12345</span><br><span class="line"></span><br><span class="line">## RegistryConfig Bean</span><br><span class="line">dubbo.registry.id &#x3D; my-registry</span><br><span class="line">dubbo.registry.address &#x3D; N&#x2F;A</span><br></pre></td></tr></table></figure></div><h6 id="3、接下来在Spring-Boot-Application的上添加-EnableDubboConfiguration，表示要开启dubbo功能-dubbo-provider服务可以使用或者不使用web容器"><a href="#3、接下来在Spring-Boot-Application的上添加-EnableDubboConfiguration，表示要开启dubbo功能-dubbo-provider服务可以使用或者不使用web容器" class="headerlink" title="3、接下来在Spring Boot Application的上添加@EnableDubboConfiguration，表示要开启dubbo功能. (dubbo provider服务可以使用或者不使用web容器)"></a>3、接下来在Spring Boot Application的上添加@EnableDubboConfiguration，表示要开启dubbo功能. (dubbo provider服务可以使用或者不使用web容器)</h6><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDubboConfiguration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DubboProviderLauncher</span> </span>&#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h6 id="4、编写你的dubbo服务，只需要添加要发布的服务实现上添加-Service（import-com-alibaba-dubbo-config-annotation-Service）注解，其中interfaceClass是要发布服务的接口"><a href="#4、编写你的dubbo服务，只需要添加要发布的服务实现上添加-Service（import-com-alibaba-dubbo-config-annotation-Service）注解，其中interfaceClass是要发布服务的接口" class="headerlink" title="4、编写你的dubbo服务，只需要添加要发布的服务实现上添加@Service（import com.alibaba.dubbo.config.annotation.Service）注解，其中interfaceClass是要发布服务的接口."></a>4、编写你的dubbo服务，只需要添加要发布的服务实现上添加@Service（import com.alibaba.dubbo.config.annotation.Service）注解，其中interfaceClass是要发布服务的接口.</h6><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span>(interfaceClass = IHelloService<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">Component</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">HelloServiceImpl</span> <span class="keyword">implements</span> <span class="title">IHelloService</span> </span>&#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>==注意：实体类必须实现Serializable接口==</p><h4 id="二、消费端的消费服务"><a href="#二、消费端的消费服务" class="headerlink" title="二、消费端的消费服务"></a>二、消费端的消费服务</h4><h6 id="1、添加依赖-1"><a href="#1、添加依赖-1" class="headerlink" title="1、添加依赖"></a>1、添加依赖</h6><blockquote><p>同上</p></blockquote><h6 id="2、配置文件"><a href="#2、配置文件" class="headerlink" title="2、配置文件"></a>2、配置文件</h6><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># Spring boot application</span><br><span class="line">spring.application.name &#x3D; dubbo-provider-demo</span><br><span class="line"></span><br><span class="line"># Dubbo Config properties</span><br><span class="line">## ApplicationConfig Bean</span><br><span class="line">dubbo.application.id &#x3D; dubbo-consumer-demo</span><br><span class="line">dubbo.application.name &#x3D; dubbo-consumer-demo</span><br><span class="line"></span><br><span class="line">## ProtocolConfig Bean</span><br><span class="line">dubbo.protocol.id &#x3D; dubbo</span><br><span class="line">dubbo.protocol.name &#x3D; dubbo</span><br><span class="line">dubbo.protocol.port &#x3D; 12345</span><br></pre></td></tr></table></figure></div><h6 id="3、add-EnableDubboConfiguration-on-Spring-Boot-Application"><a href="#3、add-EnableDubboConfiguration-on-Spring-Boot-Application" class="headerlink" title="3、add @EnableDubboConfiguration on Spring Boot Application"></a>3、add @EnableDubboConfiguration on Spring Boot Application</h6><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDubboConfiguration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DubboConsumerLauncher</span> </span>&#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h6 id="4、使用"><a href="#4、使用" class="headerlink" title="4、使用"></a>4、使用</h6><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DubboConsumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Reference</span>(url = <span class="string">"dubbo://127.0.0.1:20880"</span>)</span><br><span class="line">    <span class="keyword">private</span> HseCustomerService customerService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"list2"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getList</span><span class="params">(@RequestParam(defaultValue = <span class="string">"0"</span>)</span>Integer fromId,</span></span><br><span class="line"><span class="function">                          @<span class="title">RequestParam</span><span class="params">(defaultValue = <span class="string">"2"</span>)</span>Integer limit )</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//初始化page插件，传入分页参数</span></span><br><span class="line">        PageHelper.startPage(fromId,limit);</span><br><span class="line">        List&lt;HseCustomer&gt; list = customerService.getList();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//包装想要返回的结果，包含多种信息</span></span><br><span class="line">        PageInfo pageInfo = <span class="keyword">new</span> PageInfo(list);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> pageInfo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h6 id="5、成功效果"><a href="#5、成功效果" class="headerlink" title="5、成功效果"></a>5、成功效果</h6><p><a href="https://ws1.sinaimg.cn/large/005EneYkgy1fptt8cwrzxj30ol09bt90.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://ws1.sinaimg.cn/large/005EneYkgy1fptt8cwrzxj30ol09bt90.jpg" class="lazyload"></a></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot统计实时在线人数</title>
      <link href="/2018/03/06/SpringBoot%E7%BB%9F%E8%AE%A1%E5%AE%9E%E6%97%B6%E5%9C%A8%E7%BA%BF%E4%BA%BA%E6%95%B0/"/>
      <url>/2018/03/06/SpringBoot%E7%BB%9F%E8%AE%A1%E5%AE%9E%E6%97%B6%E5%9C%A8%E7%BA%BF%E4%BA%BA%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h4 id="1、配置pom文件依赖"><a href="#1、配置pom文件依赖" class="headerlink" title="1、配置pom文件依赖"></a>1、配置pom文件依赖</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--统计实时人数--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-websocket&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;version&gt;1.5.10.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure></div><h4 id="2、新建一个WebSocketConfig"><a href="#2、新建一个WebSocketConfig" class="headerlink" title="2、新建一个WebSocketConfig"></a>2、新建一个WebSocketConfig</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSocketConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServerEndpointExporter <span class="title">serverEndpointExporter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ServerEndpointExporter();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h4 id="3、在控制器的包下新建一个MySocket"><a href="#3、在控制器的包下新建一个MySocket" class="headerlink" title="3、在控制器的包下新建一个MySocket"></a>3、在控制器的包下新建一个MySocket</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.buildworld.faceweb.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.websocket.OnClose;</span><br><span class="line"><span class="keyword">import</span> javax.websocket.OnMessage;</span><br><span class="line"><span class="keyword">import</span> javax.websocket.OnOpen;</span><br><span class="line"><span class="keyword">import</span> javax.websocket.Session;</span><br><span class="line"><span class="keyword">import</span> javax.websocket.server.ServerEndpoint;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CopyOnWriteArraySet;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 检测实时在线人数</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> MiChong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Email</span>: 1564666023@qq.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Create</span> 2018-03-06 16:43</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span>: V1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ServerEndpoint</span>(<span class="string">"/websocket"</span>)  <span class="comment">//该注解表示该类被声明为一个webSocket终端</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySocket</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始在线人数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> online_num = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 线程安全的socket集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> CopyOnWriteArraySet&lt;MySocket&gt; webSocketSet = <span class="keyword">new</span> CopyOnWriteArraySet&lt;MySocket&gt;();</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 会话</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Session session;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OnOpen</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onOpen</span><span class="params">(Session session)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.session = session;</span><br><span class="line">        webSocketSet.add(<span class="keyword">this</span>);</span><br><span class="line">        addOnlineCount();</span><br><span class="line">        System.out.println(<span class="string">"有链接加入，当前人数为:"</span>+getOnline_num());</span><br><span class="line">        <span class="keyword">this</span>.session.getAsyncRemote().sendText(<span class="string">"有链接加入，当前人数为:"</span>+getOnline_num());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OnClose</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClose</span><span class="params">()</span></span>&#123;</span><br><span class="line">        webSocketSet.remove(<span class="keyword">this</span>);</span><br><span class="line">        subOnlineCount();</span><br><span class="line">        System.out.println(<span class="string">"有链接关闭,当前人数为:"</span>+getOnline_num());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OnMessage</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(String message,Session session)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"来自客户端的消息:"</span>+message);</span><br><span class="line">        <span class="keyword">for</span>(MySocket item:webSocketSet)&#123;</span><br><span class="line">            <span class="keyword">this</span>.session.getAsyncRemote().sendText(message);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">getOnline_num</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> MySocket.online_num;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">subOnlineCount</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> MySocket.online_num--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">addOnlineCount</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> MySocket.online_num++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h4 id="4、前端显示结果"><a href="#4、前端显示结果" class="headerlink" title="4、前端显示结果"></a>4、前端显示结果</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>My WebSocket<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">Welcome<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"text"</span> <span class="attr">type</span>=<span class="string">"text"</span> /&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"send()"</span>&gt;</span>Send<span class="tag">&lt;/<span class="name">button</span>&gt;</span>    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"closeWebSocket()"</span>&gt;</span>Close<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"message"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> websocket = <span class="literal">null</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">//判断当前浏览器是否支持WebSocket</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span>(<span class="string">'WebSocket'</span> <span class="keyword">in</span> <span class="built_in">window</span>)&#123;</span></span><br><span class="line"><span class="actionscript">        onlinenum = <span class="keyword">new</span> WebSocket(<span class="string">"ws://localhost:9090/face/websocket"</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="actionscript">    <span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="actionscript">        alert(<span class="string">'Not support websocket'</span>)</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">//连接发生错误的回调方法</span></span></span><br><span class="line"><span class="actionscript">    onlinenum.onerror = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">        setMessageInnerHTML(<span class="string">"error"</span>);</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">//连接成功建立的回调方法</span></span></span><br><span class="line"><span class="actionscript">    onlinenum.onopen = <span class="function"><span class="keyword">function</span><span class="params">(event)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">        setMessageInnerHTML(<span class="string">"open"</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">//接收到消息的回调方法</span></span></span><br><span class="line"><span class="actionscript">    onlinenum.onmessage = <span class="function"><span class="keyword">function</span><span class="params">(event)</span></span>&#123;</span></span><br><span class="line">        setMessageInnerHTML(event.data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">//连接关闭的回调方法</span></span></span><br><span class="line"><span class="actionscript">    onlinenum.onclose = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">        setMessageInnerHTML(<span class="string">"close"</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">//监听窗口关闭事件，当窗口关闭时，主动去关闭websocket连接，防止连接还没断开就关闭窗口，server端会抛异常。</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onbeforeunload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line">        onlinenum.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">//将消息显示在网页上</span></span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">setMessageInnerHTML</span><span class="params">(innerHTML)</span></span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">'message'</span>).innerHTML += innerHTML + <span class="string">'&lt;br/&gt;'</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">//关闭连接</span></span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">closeWebSocket</span><span class="params">()</span></span>&#123;</span></span><br><span class="line">        onlinenum.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">//发送消息</span></span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">send</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> message = <span class="built_in">document</span>.getElementById(<span class="string">'text'</span>).value;</span></span><br><span class="line">        onlinenum.send(message);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div><h5 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h5><p><a href="http://img.blog.csdn.net/20180306181809300?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE2NzM2ODk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" data-fancybox="group" data-caption="这里写图片描述" class="fancybox"><img alt="这里写图片描述" title="这里写图片描述" data-src="http://img.blog.csdn.net/20180306181809300?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE2NzM2ODk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" class="lazyload"></a></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>人工智能之Python人脸识别技术--face_recognition模块</title>
      <link href="/2018/02/25/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%B9%8BPython%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB%E6%8A%80%E6%9C%AF--face_recognition%E6%A8%A1%E5%9D%97/"/>
      <url>/2018/02/25/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%B9%8BPython%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB%E6%8A%80%E6%9C%AF--face_recognition%E6%A8%A1%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><a href="https://github.com/MiChongGET/face_collection" target="_blank" rel="noopener">Github项目地址：https://github.com/MiChongGET/face_collection</a></p><h4 id="一、环境搭建"><a href="#一、环境搭建" class="headerlink" title="一、环境搭建"></a>一、环境搭建</h4><p>######１．系统环境</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Ubuntu 17.04</span><br><span class="line">Python 2.7.14</span><br><span class="line">pycharm 开发工具</span><br></pre></td></tr></table></figure></div><h6 id="2-开发环境，安装各种系统包"><a href="#2-开发环境，安装各种系统包" class="headerlink" title="2.开发环境，安装各种系统包"></a>2.开发环境，安装各种系统包</h6><ul><li>人脸检测基于dlib，dlib依赖Boost和cmake</li><li>在windows中如果要使用dlib还是比较麻烦的，如果想省时间可以在anaconda中安装<blockquote><p>conda install -c conda-forge dlib=19.4</p></blockquote></li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install build-essential cmake</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install libgtk-3-dev</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install libboost-all-dev</span></span><br></pre></td></tr></table></figure></div><ul><li>其他重要的包<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pip install numpy</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> pip install scipy</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> pip install opencv-python</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> pip install dlib</span></span><br></pre></td></tr></table></figure></div></li><li>安装 face_recognition</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装 face_recognition</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> pip install face_recognition</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装face_recognition过程中会自动安装 numpy、scipy 等</span></span><br></pre></td></tr></table></figure></div><hr><h4 id="二、使用教程"><a href="#二、使用教程" class="headerlink" title="二、使用教程"></a>二、使用教程</h4><h5 id="1、facial-features文件夹"><a href="#1、facial-features文件夹" class="headerlink" title="1、facial_features文件夹"></a>1、facial_features文件夹</h5><blockquote><p>此demo主要展示了识别指定图片中人脸的特征数据，下面就是人脸的八个特征，我们就是要获取特征数据</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#39;chin&#39;,</span><br><span class="line">&#39;left_eyebrow&#39;,</span><br><span class="line">&#39;right_eyebrow&#39;,</span><br><span class="line">&#39;nose_bridge&#39;,</span><br><span class="line">&#39;nose_tip&#39;,</span><br><span class="line">&#39;left_eye&#39;,</span><br><span class="line">&#39;right_eye&#39;,</span><br><span class="line">&#39;top_lip&#39;,</span><br><span class="line">&#39;bottom_lip&#39;</span><br></pre></td></tr></table></figure></div><h5 id="运行结果："><a href="#运行结果：" class="headerlink" title="运行结果："></a>运行结果：</h5><h6 id="自动识别图片中的人脸，并且识别它的特征"><a href="#自动识别图片中的人脸，并且识别它的特征" class="headerlink" title="自动识别图片中的人脸，并且识别它的特征"></a>自动识别图片中的人脸，并且识别它的特征</h6><h6 id="原图："><a href="#原图：" class="headerlink" title="原图："></a>原图：</h6><p><a href="https://ws1.sinaimg.cn/large/005EneYkly1fot3482971j30xc1n7tby.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://ws1.sinaimg.cn/large/005EneYkly1fot3482971j30xc1n7tby.jpg" class="lazyload"></a><br><a href="https://ws1.sinaimg.cn/large/005EneYkly1fostfh1gbuj30dl0kfqc5.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://ws1.sinaimg.cn/large/005EneYkly1fostfh1gbuj30dl0kfqc5.jpg" class="lazyload"></a></p><h6 id="特征数据，数据就是运行出来的矩阵，也就是一个二维数组"><a href="#特征数据，数据就是运行出来的矩阵，也就是一个二维数组" class="headerlink" title="特征数据，数据就是运行出来的矩阵，也就是一个二维数组"></a>特征数据，数据就是运行出来的矩阵，也就是一个二维数组</h6><p><a href="https://ws1.sinaimg.cn/large/005EneYkly1fostgvzjatj31dw06daca.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://ws1.sinaimg.cn/large/005EneYkly1fostgvzjatj31dw06daca.jpg" class="lazyload"></a></p><h6 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h6><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># 自动识别人脸特征</span></span><br><span class="line"><span class="comment"># filename : find_facial_features_in_picture.py</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入pil模块 ，可用命令安装 apt-get install python-Imaging</span></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, ImageDraw</span><br><span class="line"><span class="comment"># 导入face_recogntion模块，可用命令安装 pip install face_recognition</span></span><br><span class="line"><span class="keyword">import</span> face_recognition</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将jpg文件加载到numpy 数组中</span></span><br><span class="line">image = face_recognition.load_image_file(<span class="string">"chenduling.jpg"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#查找图像中所有面部的所有面部特征</span></span><br><span class="line">face_landmarks_list = face_recognition.face_landmarks(image)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"I found &#123;&#125; face(s) in this photograph."</span>.format(len(face_landmarks_list)))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> face_landmarks <span class="keyword">in</span> face_landmarks_list:</span><br><span class="line"></span><br><span class="line">   <span class="comment">#打印此图像中每个面部特征的位置</span></span><br><span class="line">    facial_features = [</span><br><span class="line">        <span class="string">'chin'</span>,</span><br><span class="line">        <span class="string">'left_eyebrow'</span>,</span><br><span class="line">        <span class="string">'right_eyebrow'</span>,</span><br><span class="line">        <span class="string">'nose_bridge'</span>,</span><br><span class="line">        <span class="string">'nose_tip'</span>,</span><br><span class="line">        <span class="string">'left_eye'</span>,</span><br><span class="line">        <span class="string">'right_eye'</span>,</span><br><span class="line">        <span class="string">'top_lip'</span>,</span><br><span class="line">        <span class="string">'bottom_lip'</span></span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> facial_feature <span class="keyword">in</span> facial_features:</span><br><span class="line">        print(<span class="string">"The &#123;&#125; in this face has the following points: &#123;&#125;"</span>.format(facial_feature, face_landmarks[facial_feature]))</span><br><span class="line"></span><br><span class="line">   <span class="comment">#让我们在图像中描绘出每个人脸特征！</span></span><br><span class="line">    pil_image = Image.fromarray(image)</span><br><span class="line">    d = ImageDraw.Draw(pil_image)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> facial_feature <span class="keyword">in</span> facial_features:</span><br><span class="line">        d.line(face_landmarks[facial_feature], width=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">    pil_image.show()</span><br></pre></td></tr></table></figure></div><h4 id="2、find-face文件夹"><a href="#2、find-face文件夹" class="headerlink" title="2、find_face文件夹"></a>2、find_face文件夹</h4><blockquote><p>不仅能识别出来所有的人脸，而且可以将其截图挨个显示出来,打印在前台窗口</p></blockquote><h6 id="原始的图片"><a href="#原始的图片" class="headerlink" title="原始的图片"></a>原始的图片</h6><p><a href="https://ws1.sinaimg.cn/large/005EneYkly1fosvje9oc4j30gl0hctn9.jpg" data-fancybox="group" data-caption="这里写图片描述" class="fancybox"><img alt="这里写图片描述" title="这里写图片描述" data-src="https://ws1.sinaimg.cn/large/005EneYkly1fosvje9oc4j30gl0hctn9.jpg" class="lazyload"></a></p><h6 id="识别的图片"><a href="#识别的图片" class="headerlink" title="识别的图片"></a>识别的图片</h6><p><a href="https://ws1.sinaimg.cn/large/005EneYkly1fostk4lgq4j31ew0m1az4.jpg" data-fancybox="group" data-caption="这里写图片描述" class="fancybox"><img alt="这里写图片描述" title="这里写图片描述" data-src="https://ws1.sinaimg.cn/large/005EneYkly1fostk4lgq4j31ew0m1az4.jpg" class="lazyload"></a></p><h5 id="代码：-1"><a href="#代码：-1" class="headerlink" title="代码："></a>代码：</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment">#  识别图片中的所有人脸并显示出来</span></span><br><span class="line"><span class="comment"># filename : find_faces_in_picture.py</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入pil模块 ，可用命令安装 apt-get install python-Imaging</span></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="comment"># 导入face_recogntion模块，可用命令安装 pip install face_recognition</span></span><br><span class="line"><span class="keyword">import</span> face_recognition</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将jpg文件加载到numpy 数组中</span></span><br><span class="line">image = face_recognition.load_image_file(<span class="string">"yiqi.jpg"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用默认的给予HOG模型查找图像中所有人脸</span></span><br><span class="line"><span class="comment"># 这个方法已经相当准确了，但还是不如CNN模型那么准确，因为没有使用GPU加速</span></span><br><span class="line"><span class="comment"># 另请参见: find_faces_in_picture_cnn.py</span></span><br><span class="line">face_locations = face_recognition.face_locations(image)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用CNN模型</span></span><br><span class="line"><span class="comment"># face_locations = face_recognition.face_locations(image, number_of_times_to_upsample=0, model="cnn")</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印：我从图片中找到了 多少 张人脸</span></span><br><span class="line">print(<span class="string">"I found &#123;&#125; face(s) in this photograph."</span>.format(len(face_locations)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 循环找到的所有人脸</span></span><br><span class="line"><span class="keyword">for</span> face_location <span class="keyword">in</span> face_locations:</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 打印每张脸的位置信息</span></span><br><span class="line">        top, right, bottom, left = face_location</span><br><span class="line">        print(<span class="string">"A face is located at pixel location Top: &#123;&#125;, Left: &#123;&#125;, Bottom: &#123;&#125;, Right: &#123;&#125;"</span>.format(top, left, bottom, right)) </span><br><span class="line"><span class="comment"># 指定人脸的位置信息，然后显示人脸图片</span></span><br><span class="line">        face_image = image[top:bottom, left:right]</span><br><span class="line">        pil_image = Image.fromarray(face_image)</span><br><span class="line">        pil_image.show()</span><br></pre></td></tr></table></figure></div><p>####　３、know_face文件夹</p><blockquote><p>通过设定的人脸图片识别未知图片中的人脸</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># 识别人脸鉴定是哪个人</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入face_recogntion模块，可用命令安装 pip install face_recognition</span></span><br><span class="line"><span class="keyword">import</span> face_recognition</span><br><span class="line"></span><br><span class="line"><span class="comment">#将jpg文件加载到numpy数组中</span></span><br><span class="line">chen_image = face_recognition.load_image_file(<span class="string">"chenduling.jpg"</span>)</span><br><span class="line"><span class="comment">#要识别的图片</span></span><br><span class="line">unknown_image = face_recognition.load_image_file(<span class="string">"sunyizheng.jpg"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取每个图像文件中每个面部的面部编码</span></span><br><span class="line"><span class="comment">#由于每个图像中可能有多个面，所以返回一个编码列表。</span></span><br><span class="line"><span class="comment">#但是由于我知道每个图像只有一个脸，我只关心每个图像中的第一个编码，所以我取索引0。</span></span><br><span class="line">chen_face_encoding = face_recognition.face_encodings(chen_image)[<span class="number">0</span>]</span><br><span class="line">print(<span class="string">"chen_face_encoding:&#123;&#125;"</span>.format(chen_face_encoding))</span><br><span class="line">unknown_face_encoding = face_recognition.face_encodings(unknown_image)[<span class="number">0</span>]</span><br><span class="line">print(<span class="string">"unknown_face_encoding :&#123;&#125;"</span>.format(unknown_face_encoding))</span><br><span class="line"></span><br><span class="line">known_faces = [</span><br><span class="line">    chen_face_encoding</span><br><span class="line">]</span><br><span class="line"><span class="comment">#结果是True/false的数组，未知面孔known_faces阵列中的任何人相匹配的结果</span></span><br><span class="line">results = face_recognition.compare_faces(known_faces, unknown_face_encoding)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"result :&#123;&#125;"</span>.format(results))</span><br><span class="line">print(<span class="string">"这个未知面孔是 陈都灵 吗? &#123;&#125;"</span>.format(results[<span class="number">0</span>]))</span><br><span class="line">print(<span class="string">"这个未知面孔是 我们从未见过的新面孔吗? &#123;&#125;"</span>.format(<span class="keyword">not</span> <span class="literal">True</span> <span class="keyword">in</span> results))</span><br></pre></td></tr></table></figure></div><h5 id="4、video文件夹"><a href="#4、video文件夹" class="headerlink" title="4、video文件夹"></a>4、video文件夹</h5><blockquote><p>通过调用电脑摄像头动态获取视频内的人脸，将其和我们指定的图片集进行匹配，可以告知我们视频内的人脸是否是我们设定好的</p></blockquote><h6 id="实现："><a href="#实现：" class="headerlink" title="实现："></a>实现：</h6><p><a href="https://ws1.sinaimg.cn/large/005EneYkly1fostuqbk69j31dh0lih0x.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://ws1.sinaimg.cn/large/005EneYkly1fostuqbk69j31dh0lih0x.jpg" class="lazyload"></a></p><h6 id="代码：-2"><a href="#代码：-2" class="headerlink" title="代码："></a>代码：</h6><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># 摄像头头像识别</span></span><br><span class="line"><span class="keyword">import</span> face_recognition</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line">video_capture = cv2.VideoCapture(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 本地图像</span></span><br><span class="line">chenduling_image = face_recognition.load_image_file(<span class="string">"chenduling.jpg"</span>)</span><br><span class="line">chenduling_face_encoding = face_recognition.face_encodings(chenduling_image)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 本地图像二</span></span><br><span class="line">sunyizheng_image = face_recognition.load_image_file(<span class="string">"sunyizheng.jpg"</span>)</span><br><span class="line">sunyizheng_face_encoding = face_recognition.face_encodings(sunyizheng_image)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 本地图片三</span></span><br><span class="line">zhangzetian_image = face_recognition.load_image_file(<span class="string">"zhangzetian.jpg"</span>)</span><br><span class="line">zhangzetian_face_encoding = face_recognition.face_encodings(zhangzetian_image)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create arrays of known face encodings and their names</span></span><br><span class="line"><span class="comment"># 脸部特征数据的集合</span></span><br><span class="line">known_face_encodings = [</span><br><span class="line">    chenduling_face_encoding,</span><br><span class="line">    sunyizheng_face_encoding,</span><br><span class="line">    zhangzetian_face_encoding</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 人物名称的集合</span></span><br><span class="line">known_face_names = [</span><br><span class="line">    <span class="string">"michong"</span>,</span><br><span class="line">    <span class="string">"sunyizheng"</span>,</span><br><span class="line">    <span class="string">"chenduling"</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">face_locations = []</span><br><span class="line">face_encodings = []</span><br><span class="line">face_names = []</span><br><span class="line">process_this_frame = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="comment"># 读取摄像头画面</span></span><br><span class="line">    ret, frame = video_capture.read()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 改变摄像头图像的大小，图像小，所做的计算就少</span></span><br><span class="line">    small_frame = cv2.resize(frame, (<span class="number">0</span>, <span class="number">0</span>), fx=<span class="number">0.25</span>, fy=<span class="number">0.25</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># opencv的图像是BGR格式的，而我们需要是的RGB格式的，因此需要进行一个转换。</span></span><br><span class="line">    rgb_small_frame = small_frame[:, :, ::<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Only process every other frame of video to save time</span></span><br><span class="line">    <span class="keyword">if</span> process_this_frame:</span><br><span class="line">        <span class="comment"># 根据encoding来判断是不是同一个人，是就输出true，不是为flase</span></span><br><span class="line">        face_locations = face_recognition.face_locations(rgb_small_frame)</span><br><span class="line">        face_encodings = face_recognition.face_encodings(rgb_small_frame, face_locations)</span><br><span class="line"></span><br><span class="line">        face_names = []</span><br><span class="line">        <span class="keyword">for</span> face_encoding <span class="keyword">in</span> face_encodings:</span><br><span class="line">            <span class="comment"># 默认为unknown</span></span><br><span class="line">            matches = face_recognition.compare_faces(known_face_encodings, face_encoding)</span><br><span class="line">            name = <span class="string">"Unknown"</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># if match[0]:</span></span><br><span class="line">            <span class="comment">#     name = "michong"</span></span><br><span class="line">            <span class="comment"># If a match was found in known_face_encodings, just use the first one.</span></span><br><span class="line">            <span class="keyword">if</span> <span class="literal">True</span> <span class="keyword">in</span> matches:</span><br><span class="line">                first_match_index = matches.index(<span class="literal">True</span>)</span><br><span class="line">                name = known_face_names[first_match_index]</span><br><span class="line">            face_names.append(name)</span><br><span class="line"></span><br><span class="line">    process_this_frame = <span class="keyword">not</span> process_this_frame</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将捕捉到的人脸显示出来</span></span><br><span class="line">    <span class="keyword">for</span> (top, right, bottom, left), name <span class="keyword">in</span> zip(face_locations, face_names):</span><br><span class="line">        <span class="comment"># Scale back up face locations since the frame we detected in was scaled to 1/4 size</span></span><br><span class="line">        top *= <span class="number">4</span></span><br><span class="line">        right *= <span class="number">4</span></span><br><span class="line">        bottom *= <span class="number">4</span></span><br><span class="line">        left *= <span class="number">4</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 矩形框</span></span><br><span class="line">        cv2.rectangle(frame, (left, top), (right, bottom), (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">#加上标签</span></span><br><span class="line">        cv2.rectangle(frame, (left, bottom - <span class="number">35</span>), (right, bottom), (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), cv2.FILLED)</span><br><span class="line">        font = cv2.FONT_HERSHEY_DUPLEX</span><br><span class="line">        cv2.putText(frame, name, (left + <span class="number">6</span>, bottom - <span class="number">6</span>), font, <span class="number">1.0</span>, (<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>), <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Display</span></span><br><span class="line">    cv2.imshow(<span class="string">'monitor'</span>, frame)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 按Q退出</span></span><br><span class="line">    <span class="keyword">if</span> cv2.waitKey(<span class="number">1</span>) &amp; <span class="number">0xFF</span> == ord(<span class="string">'q'</span>):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">video_capture.release()</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure></div><h5 id="5、boss文件夹"><a href="#5、boss文件夹" class="headerlink" title="5、boss文件夹"></a>5、boss文件夹</h5><blockquote><p>github开源项目,主要是结合摄像头程序+极光推送，实现识别摄像头中的人脸。并且通过极光推送平台给移动端发送消息！<br><a href="https://github.com/MiChongGET/face_collection/tree/master/boss" target="_blank" rel="noopener">https://github.com/MiChongGET/face_collection/tree/master/boss</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 人脸识别 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis的使用--（二）与Spring的整合</title>
      <link href="/2018/01/31/Redis%E7%9A%84%E4%BD%BF%E7%94%A8--%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B8%8ESpring%E7%9A%84%E6%95%B4%E5%90%88/"/>
      <url>/2018/01/31/Redis%E7%9A%84%E4%BD%BF%E7%94%A8--%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B8%8ESpring%E7%9A%84%E6%95%B4%E5%90%88/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h5 id="主题词：使用Jedis、项目整合Redis"><a href="#主题词：使用Jedis、项目整合Redis" class="headerlink" title="主题词：使用Jedis、项目整合Redis"></a>主题词：使用Jedis、项目整合Redis</h5><ul><li><p>项目中整合jedis和spring框架：</p><ul><li>设计一个相关接口(把String和Hash类型常用方法进行封装)</li><li>完成两个相关实现类(jedisPool的实现和jedisCluster的实现：属性注入)</li><li>完成spring-jedis.xml(将jedisPool的实现和jedisCluster的实现进行注入操作)</li><li>具体内容参看代码实现</li></ul></li><li><p>需求：在tt-common工程的src/test/java中完成Jedis的简单使用</p></li></ul><ol><li>在tt-common工程引入jedis的依赖</li></ol><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--redis客户端--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div><ol start="2"><li>Jedis的三种使用方法</li></ol><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testJedis1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">"10.31.152.30"</span>,<span class="number">6379</span>);</span><br><span class="line">        jedis.set(<span class="string">"key"</span>,<span class="string">"value"</span>);</span><br><span class="line">        System.out.println(jedis.get(<span class="string">"key"</span>));</span><br><span class="line">        jedis.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testJedis2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//获取jedis池</span></span><br><span class="line">        JedisPool jedisPool = <span class="keyword">new</span> JedisPool(<span class="string">"10.31.152.30"</span>,<span class="number">6379</span>);</span><br><span class="line">        <span class="comment">//获取Jedis对象</span></span><br><span class="line">        Jedis jedis = jedisPool.getResource();</span><br><span class="line">        jedis.set(<span class="string">"key1"</span>,<span class="string">"value1"</span>);</span><br><span class="line">        System.out.println(jedis.get(<span class="string">"key1"</span>));</span><br><span class="line">        <span class="comment">//关闭连接</span></span><br><span class="line">        jedis.close();</span><br><span class="line">        jedisPool.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testJedis3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//创建集群节点集合</span></span><br><span class="line">        Set&lt;HostAndPort&gt; nodes = <span class="keyword">new</span> HashSet&lt;HostAndPort&gt;();</span><br><span class="line">        <span class="comment">//将6个节点加入到集合中</span></span><br><span class="line">        nodes.add(<span class="keyword">new</span> HostAndPort(<span class="string">"10.31.152.30"</span>,<span class="number">7001</span>));</span><br><span class="line">        nodes.add(<span class="keyword">new</span> HostAndPort(<span class="string">"10.31.152.30"</span>,<span class="number">7002</span>));</span><br><span class="line">        nodes.add(<span class="keyword">new</span> HostAndPort(<span class="string">"10.31.152.30"</span>,<span class="number">7003</span>));</span><br><span class="line">        nodes.add(<span class="keyword">new</span> HostAndPort(<span class="string">"10.31.152.30"</span>,<span class="number">7004</span>));</span><br><span class="line">        nodes.add(<span class="keyword">new</span> HostAndPort(<span class="string">"10.31.152.30"</span>,<span class="number">7005</span>));</span><br><span class="line">        nodes.add(<span class="keyword">new</span> HostAndPort(<span class="string">"10.31.152.30"</span>,<span class="number">7006</span>));</span><br><span class="line">        <span class="comment">//创建集群对象</span></span><br><span class="line">        JedisCluster jedisCluster = <span class="keyword">new</span> JedisCluster(nodes);</span><br><span class="line">        <span class="comment">//存入数据</span></span><br><span class="line">        jedisCluster.set(<span class="string">"key2"</span>,<span class="string">"value2"</span>);</span><br><span class="line">        System.out.println(jedisCluster.get(<span class="string">"key2"</span>));</span><br><span class="line">        <span class="comment">//关闭连接</span></span><br><span class="line">        jedisCluster.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div><ol start="3"><li>完成上述三种方法的使用后，将三种方法的工具类添加tt-common中</li></ol><ul><li>在tt-common中添加com.dhc.common.jedis包</li><li>添加三个工具类</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">JedisClient.java</span><br><span class="line">JedisClientCluster.java</span><br><span class="line">JedisClientPool.java</span><br><span class="line"></span><br><span class="line">JsonUtils.java</span><br></pre></td></tr></table></figure></div><hr><ul><li>需求：Spring项目整合Redis</li></ul><ol><li>创建spring-jedis.xml文件</li></ol><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 连接池版本 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jedisPoolConfig"</span> <span class="attr">class</span>=<span class="string">"redis.clients.jedis.JedisPoolConfig"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 最大连接数 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxTotal"</span> <span class="attr">value</span>=<span class="string">"30"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 最大空闲连接数 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxIdle"</span> <span class="attr">value</span>=<span class="string">"10"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 每次释放连接的最大数目 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"numTestsPerEvictionRun"</span> <span class="attr">value</span>=<span class="string">"1024"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 释放连接的扫描间隔（毫秒） --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"timeBetweenEvictionRunsMillis"</span> <span class="attr">value</span>=<span class="string">"30000"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 连接最小空闲时间 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minEvictableIdleTimeMillis"</span> <span class="attr">value</span>=<span class="string">"1800000"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 连接空闲多久后释放, 当空闲时间&gt;该值 且 空闲连接&gt;最大空闲连接数 时直接释放 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"softMinEvictableIdleTimeMillis"</span> <span class="attr">value</span>=<span class="string">"10000"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 获取连接时的最大等待毫秒数,小于零:阻塞不确定的时间,默认-1 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxWaitMillis"</span> <span class="attr">value</span>=<span class="string">"1500"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 在获取连接的时候检查有效性, 默认false --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"testOnBorrow"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 在空闲时检查有效性, 默认false --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"testWhileIdle"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 连接耗尽时是否阻塞, false报异常,ture阻塞直到超时, 默认true --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"blockWhenExhausted"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jedisPool"</span> <span class="attr">class</span>=<span class="string">"redis.clients.jedis.JedisPool"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"poolConfig"</span> <span class="attr">ref</span>=<span class="string">"jedisPoolConfig"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"host"</span> <span class="attr">value</span>=<span class="string">"192.168.31.117"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"port"</span> <span class="attr">value</span>=<span class="string">"6379"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jedisClientPool"</span> <span class="attr">class</span>=<span class="string">"com.dhc.common.jedis.JedisClientPool"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jedisPool"</span> <span class="attr">ref</span>=<span class="string">"jedisPool"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--集群版本--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jedisCluster"</span> <span class="attr">class</span>=<span class="string">"redis.clients.jedis.JedisCluster"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"nodes"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"redis.clients.jedis.HostAndPort"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"host"</span> <span class="attr">value</span>=<span class="string">"192.168.31.117"</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"port"</span> <span class="attr">value</span>=<span class="string">"7001"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"redis.clients.jedis.HostAndPort"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"host"</span> <span class="attr">value</span>=<span class="string">"192.168.31.117"</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"port"</span> <span class="attr">value</span>=<span class="string">"7002"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"redis.clients.jedis.HostAndPort"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"host"</span> <span class="attr">value</span>=<span class="string">"192.168.31.117"</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"port"</span> <span class="attr">value</span>=<span class="string">"7003"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"redis.clients.jedis.HostAndPort"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"host"</span> <span class="attr">value</span>=<span class="string">"192.168.31.117"</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"port"</span> <span class="attr">value</span>=<span class="string">"7004"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"redis.clients.jedis.HostAndPort"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"host"</span> <span class="attr">value</span>=<span class="string">"192.168.31.117"</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"port"</span> <span class="attr">value</span>=<span class="string">"7005"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"redis.clients.jedis.HostAndPort"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"host"</span> <span class="attr">value</span>=<span class="string">"192.168.31.117"</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"port"</span> <span class="attr">value</span>=<span class="string">"7006"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"poolConfig"</span> <span class="attr">ref</span>=<span class="string">"jedisPoolConfig"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jedisClientCluster"</span> <span class="attr">class</span>=<span class="string">"com.dhc.common.jedis.JedisClientCluster"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jedisCluster"</span> <span class="attr">ref</span>=<span class="string">"jedisCluster"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></div><ol><li>使用时将类型注入可以选择其中一个版本</li></ol><ul><li><p>单机版的注入时，将spring-jedis.xml中的集群版本注释，注入接口JedisClient.java</p></li><li><p>集群版本注入时，将spring-jedis.xml中的单机版本注释，注入接口JedisClient.java</p></li><li><p>作业：完成首页门户的轮播图效果（redis集群）</p></li></ul><hr><ul><li><p>需求：解决<strong>查询缓存</strong>问题与<strong>同步缓存</strong>问题</p></li><li><p>读数据规则（查询缓存问题）：先判断缓存中是否有要的数据</p><ul><li>若有，则直接加载</li><li>若无，则去DB加载，并存入缓存中</li><li>实际代码举例</li></ul></li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;TbContent&gt; <span class="title">getContentListByCid</span><span class="params">(Long cid)</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="comment">//查询缓存，如果存在直接加载</span></span><br><span class="line">        String json = jedisClient.hget(<span class="string">"CONTENT_LIST"</span>,Long.toString(cid));</span><br><span class="line">        <span class="keyword">if</span>(StringUtils.isNotBlank(json))&#123;</span><br><span class="line">            List&lt;TbContent&gt; list = JsonUtils.jsonToList(json,TbContent<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            <span class="keyword">return</span> list;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果缓存中没有</span></span><br><span class="line">    TbContentExample example = <span class="keyword">new</span> TbContentExample();</span><br><span class="line">    TbContentExample.Criteria criteria = example.createCriteria();</span><br><span class="line">    criteria.andCategoryIdEqualTo(cid);</span><br><span class="line">    List&lt;TbContent&gt; clist = contentMapper.selectByExample(example);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="comment">//将查询出的数据存放到缓存中</span></span><br><span class="line">        jedisClient.hset(<span class="string">"CONTENT_LIST"</span>,Long.toString(cid),JsonUtils.objectToJson(clist));</span><br><span class="line">        <span class="keyword">return</span> clist;</span><br><span class="line">    &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ul><li>改数据规则（缓存同步问题）：<ul><li>直接失效缓存数据，再修改DB内容</li><li>避免突发情况：避免DB修改成功，但由于网络或者其他问题导致缓存数据没有清理，造成了脏数据</li><li>实际代码举例</li></ul></li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">addContent</span><span class="params">(TbContent content)</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="comment">//缓存同步，删除缓存中对应的数据</span></span><br><span class="line">        jedisClient.hdel(<span class="string">"CONTENT_LIST"</span>,content.getId().toString());</span><br><span class="line">    &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    content.setCreated(<span class="keyword">new</span> Date());</span><br><span class="line">    content.setUpdated(<span class="keyword">new</span> Date());</span><br><span class="line">    <span class="keyword">int</span> count = contentMapper.insert(content);</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> 集群 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis的使用--（一）集群的搭建</title>
      <link href="/2018/01/31/Redis%E7%9A%84%E4%BD%BF%E7%94%A8--%EF%BC%88%E4%B8%80%EF%BC%89%E9%9B%86%E7%BE%A4%E7%9A%84%E6%90%AD%E5%BB%BA/"/>
      <url>/2018/01/31/Redis%E7%9A%84%E4%BD%BF%E7%94%A8--%EF%BC%88%E4%B8%80%EF%BC%89%E9%9B%86%E7%BE%A4%E7%9A%84%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h5 id="主题词：负载均衡高可用、redis集群"><a href="#主题词：负载均衡高可用、redis集群" class="headerlink" title="主题词：负载均衡高可用、redis集群"></a>主题词：负载均衡高可用、redis集群</h5><ul><li>需求：负载均衡高可用的概念</li></ul><ol><li>什么是负载均衡高可用</li></ol><blockquote><p>Nginx一般用作负载均衡服务器，可见处于网络中非常重要的位置，一旦Nginx服务器宕机无法提供服务，那么将影响严重。所以需要负载均衡高可用。</p></blockquote><blockquote><p>高可用——主从备份</p></blockquote><ol start="2"><li>keepalived+nginx实现主从备份</li></ol><blockquote><p>Keepalived的作用是检测服务器的状态，如果有一台web服务器宕机，或工作出现故障，Keepalived将检测到，并将有故障的服务器从系统中剔除，同时使用其他服务器代替该服务器的工作，当服务器工作正常后Keepalived自动将服务器加入到服务器群中，这些工作全部自动完成，不需要人工干涉，需要人工做的只是修复故障的服务器。</p></blockquote><ol start="3"><li>keepalived工作原理</li></ol><blockquote><p>keepalived是以VRRP协议为实现基础的，VRRP全称Virtual Router Redundancy Protocol，即虚拟路由冗余协议。</p></blockquote><blockquote><p>虚拟路由冗余协议，可以认为是实现路由器高可用的协议，即将N台提供相同功能的路由器组成一个路由器组，这个组里面有一个master和多个backup，master上面有一个对外提供服务的vip（该路由器所在局域网内其他机器的默认路由为该vip），master会发组播，当backup收不到vrrp包时就认为master宕掉了，这时就需要根据VRRP的优先级来选举一个backup当master。这样的话就可以保证路由器的高可用了。</p></blockquote><blockquote><p>keepalived主要有三个模块，分别是core、check和vrrp。core模块为keepalived的核心，负责主进程的启动、维护以及全局配置文件的加载和解析。check负责健康检查，包括常见的各种检查方式。vrrp模块是来实现VRRP协议的。</p></blockquote><ol start="4"><li>搭建过程可参考《keepalived权威指南中文.pdf》</li></ol><ul><li>需求：完成redis集群的搭建</li></ul><ol><li><p>了解集群和主从的区别</p></li><li><p>redis集群基本概念</p></li></ol><blockquote><p>redis集群的详细贴子：<a href="http://blog.csdn.net/sanwenyublog/article/details/52942236" target="_blank" rel="noopener">http://blog.csdn.net/sanwenyublog/article/details/52942236</a></p></blockquote><blockquote><p>redis集群中至少应该有三个节点。要保证集群的高可用，每个节点需要有一个备份机。因此redis集群至少需要六台服务器</p></blockquote><blockquote><p>这里搭建的是伪分布模式，可以使用一台服务器运行6个redis实例，修改redis的端口号为7001-7006</p></blockquote><blockquote><p>相关算法：<a href="http://blog.csdn.net/u014490157/article/details/52244378" target="_blank" rel="noopener">http://blog.csdn.net/u014490157/article/details/52244378</a></p></blockquote><ol start="3"><li>redis集群的搭建</li></ol><ul><li>安装ruby环境</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install ruby</span><br><span class="line">yum install rubygems</span><br></pre></td></tr></table></figure></div><ul><li>安装ruby脚本运行使用的包</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 离线安装</span><br><span class="line">gem install redis-3.0.7.gem</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 在线安装</span><br><span class="line">gem install redis -v 3.0.7</span><br></pre></td></tr></table></figure></div><ul><li>创建6台服务器，将6台的端口号修改7001——7006</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1、将端口修改为7001-7006</span><br><span class="line">2、将集群前面#注释去除 cluster-enabled yes</span><br><span class="line">3、如果是云服务器，例如端口是7001，则将7001和17001加入安全组</span><br></pre></td></tr></table></figure></div><ul><li>清除每一个节点的缓存数据</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">bin/redis-cli -p 7002 -c</span><br><span class="line">127.0.0.1:7002&gt; flushall</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:7002&gt; cluster reset</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:7002&gt; quit</span><br><span class="line">[root@VM_241_143_centos redis02]# cd ..</span><br><span class="line">[root@VM_241_143_centos redis-cluster]# cd redis03</span><br><span class="line">[root@VM_241_143_centos redis03]# bin/redis-cli -p 7003 -c</span><br><span class="line">127.0.0.1:7003&gt; flushall</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:7003&gt; cluster reset</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:7003&gt; quit</span><br></pre></td></tr></table></figure></div><ul><li>自定义shell脚本启动6台服务器</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">cd /usr/local/redis-cluster/redis01</span><br><span class="line">bin/redis-server redis.conf</span><br><span class="line">cd ../redis02</span><br><span class="line">bin/redis-server redis.conf</span><br><span class="line">cd ../redis03</span><br><span class="line">bin/redis-server redis.conf</span><br><span class="line">cd ../redis04</span><br><span class="line">bin/redis-server redis.conf</span><br><span class="line">cd ../redis05</span><br><span class="line">bin/redis-server redis.conf</span><br><span class="line">cd ../redis06</span><br><span class="line">bin/redis-server redis.conf</span><br></pre></td></tr></table></figure></div><ul><li><p>自定义shell脚本关闭6台服务器交给大家来做</p></li><li><p>运行如下代码搭建集群环境</p></li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;redis-trib.rb create --replicas 1 10.31.152.30:7001 10.31.152.30:7002 10.31.152.30:7003 10.31.152.30:7004 10.31.152.30:7005 10.31.152.30:7006</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;redis-trib.rb create --replicas 1 10.31.166.22:9001 10.31.166.22:9002 10.31.166.22:9003 10.31.166.22:9004 10.31.166.22:9005 10.31.166.22:9006</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;redis-trib.rb create --replicas 1 119.29.181.95:7001 119.29.181.95:7002 119.29.181.95:7003 119.29.181.95:7004 119.29.181.95:7005 119.29.181.95:7006</span><br></pre></td></tr></table></figure></div><ul><li>集群创建成功的两张截图</li></ul><p><a href="https://i.loli.net/2017/09/14/59ba40edb0422.jpg" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="https://i.loli.net/2017/09/14/59ba40edb0422.jpg" class="lazyload"></a><br><a href="https://i.loli.net/2017/09/14/59ba40edc85f6.jpg" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="https://i.loli.net/2017/09/14/59ba40edc85f6.jpg" class="lazyload"></a></p><ul><li>客户端如何连接集群中的机器</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># -p 端口号</span><br><span class="line"># -c 开启reidis cluster模式,连接redis cluster节点时候使用</span><br><span class="line">bin&#x2F;redis-cli -p 7004 -c</span><br></pre></td></tr></table></figure></div><ul><li>往集群节点存入数据进行测试，查看数据到底存入到哪个节点</li></ul><blockquote><p>redis集群中内置了16384个哈希槽，当需要往集群中存放键值对的时候，redis先对key使用CRC16算法算出一个结果，然后拿这个结果对16384求余，这样每个key都会对应一个编号为0-16383之间的哈希槽，redis会根据节点数量大致均等的将哈希槽映射到不同的节点上</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 集群 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
